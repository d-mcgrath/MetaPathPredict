x_test %>%
map_dfc(~ colnames(.x))
#x_out <-
x_test %>%
map_dfc(~ cur_column)
#x_out <-
x_test %>%
map_dfc(~ cur_column())
#x_out <-
x_test %>%
imap_dfc(~ rep(.y, .x)
)
#x_out <-
x_test %>%
imap_dfc(~ list(rep(.y, .x))
)
rep_along('a', c(4,5))
#mutate(across(everything(), ~ map(.x, function(.y) rep(cur_column(), .y))))
combn('a', c(4,5
))
#mutate(across(everything(), ~ map(.x, function(.y) rep(cur_column(), .y))))
combn(1:4, 'a')
#mutate(across(everything(), ~ map(.x, function(.y) rep(cur_column(), .y))))
combn(1:4, 2)
rep(2, each = 4)
rep(2, times = 4)
rep(2, each = 4:5)
rep('K00001', 10)
rep(rep('K00001', 10), each = c(1:10))
rep(rep('K00001', 10), times = c(1:10))
#x_out <-
x_test %>%
imap_dfc(~ list(rep(rep(.y, length(.x)), times = .x))
)
#x_out <-
x_test %>%
imap_dfc(~ (rep(rep(.y, length(.x)), times = .x))
)
#x_out <-
x_test %>%
imap(~ rep(rep(.y, length(.x)), times = .x)
)
#x_out <-
x_test %>%
select(-1)
#x_out <-
x_test %>%
select(-1) %>%
imap(~ rep(rep(.y, length(.x)), times = .x)
)
x_test
x_test %>%
pivot_longer(2:last_col(), names_to = 'k_numbers', values_to = 'values')
#x_out <-
x_test %>%
pivot_longer(2:last_col(), names_to = 'k_numbers', values_to = 'values') %>%
pivot_wider(names_from = genome_name, values_from = values)
#x_out <-
x_test %>%
pivot_longer(2:last_col(), names_to = 'k_numbers', values_to = 'values') %>%
pivot_wider(names_from = genome_name, values_from = values) %>%
summarize(across(everything() ~ list(.x)))
#x_out <-
x_test %>%
pivot_longer(2:last_col(), names_to = 'k_numbers', values_to = 'values') %>%
pivot_wider(names_from = genome_name, values_from = values) %>%
summarize(across(everything(), ~ list(.x)))
#x_out <-
x_test %>%
pivot_longer(2:last_col(), names_to = 'k_numbers', values_to = 'values') %>%
pivot_wider(names_from = genome_name, values_from = values) %>%
summarize(across(everything(), ~ list(.x))) %>% View()
#x_out <-
x_test %>%
pivot_longer(2:last_col(), names_to = 'k_numbers', values_to = 'values') %>%
pivot_wider(names_from = genome_name, values_from = values) %>%
summarize(across(everything(), ~ list(.x))) %>%
mutate(across(2:last_col(), ~ rep(k_numbers, times = .x))) %>% View()
#x_out <-
x_test %>%
pivot_longer(2:last_col(), names_to = 'k_numbers', values_to = 'values') %>%
pivot_wider(names_from = genome_name, values_from = values) %>%
summarize(across(everything(), ~ list(.x))) %>%
mutate(across(2:last_col(), ~ rep(k_numbers, .x))) %>% View()
rep(c('a','b','c'), 1:3)
x_test %>%
pivot_longer(2:last_col(), names_to = 'k_numbers', values_to = 'values') %>%
pivot_wider(names_from = genome_name, values_from = values) %>%
summarize(across(everything(), ~ list(.x)))
x_test %>%
pivot_longer(2:last_col(), names_to = 'k_numbers', values_to = 'values') %>%
pivot_wider(names_from = genome_name, values_from = values)
#x_out <-
x_test %>%
pivot_longer(2:last_col(), names_to = 'k_numbers', values_to = 'values') %>%
pivot_wider(names_from = genome_name, values_from = values) %>%
#summarize(across(everything(), ~ list(.x))) %>%
mutate(across(2:last_col(), ~ rep(k_numbers, times = .x))) %>%
imap(~ rep(rep(.y, length(.x)), times = .x)
)
#x_out <-
x_test %>%
pivot_longer(2:last_col(), names_to = 'k_numbers', values_to = 'values') %>%
pivot_wider(names_from = genome_name, values_from = values) %>%
#summarize(across(everything(), ~ list(.x))) %>%
mutate(across(2:last_col(), ~ list(rep(k_numbers, times = .x))))# %>%
#x_out <-
x_test %>%
pivot_longer(2:last_col(), names_to = 'k_numbers', values_to = 'values') %>%
pivot_wider(names_from = genome_name, values_from = values) %>%
#summarize(across(everything(), ~ list(.x))) %>%
mutate(across(2:last_col(), ~ (rep(k_numbers, times = .x))))# %>%
#x_out <-
x_test %>%
pivot_longer(2:last_col(), names_to = 'k_numbers', values_to = 'values') %>%
pivot_wider(names_from = genome_name, values_from = values) %>%
summarize(across(everything(), ~ list(.x))) #%>%
#x_out <-
x_test <- x_test %>%
pivot_longer(2:last_col(), names_to = 'k_numbers', values_to = 'values') %>%
pivot_wider(names_from = genome_name, values_from = values) %>%
summarize(across(everything(), ~ list(.x))) #%>%
x_test_knumbers <- x_test$k_numbers
x_test_knumbers
View(x_test_knumbers)
x_test_knumbers <- x_test %>% select(k_numbers)
x_test_genomes <- x_test %>% select(-k_numbers)
View(x_test_genomes)
View(x_test_knumbers)
x_test_genomes %>%
map_dfc(~ rep(x_test_knumbers$k_numbers, .x))
x_test_genomes %>%
map(~ rep(x_test_knumbers$k_numbers, .x))
x_test_genomes
x_test_genomes %>%
map(~ rep(x_test_knumbers$k_numbers, unlist(.x)))
x_test_genomes %>%
map(~ rep(x_test_knumbers$k_numbers, times = unlist(.x)))
x_test_genomes %>%
mutate(across(everything(), ~ rep(x_test_knumbers, .x)))
x_test_genomes %>%
mutate(across(everything(), ~ rep(x_test_knumbers, unlist(.x))))
rm(x_test_genomes, x_test_knumbers)
x_test <- x %>%
map_dfr(~ .x) %>%
rename(k_numbers = k_number) %>%
dplyr::mutate(k_count = 1) %>%
dplyr::group_by(genome_name, k_numbers) %>%
dplyr::summarize(k_count = sum(k_count)) %>%
tidyr::pivot_wider(names_from = k_numbers, values_from = k_count) %>%
dplyr::ungroup() %>%
dplyr::mutate(dplyr::across(2:dplyr::last_col(), ~ as.integer(.x))) %>%
dplyr::mutate(dplyr::across(2:dplyr::last_col(), ~ dplyr::case_when(is.na(.x) ~ 0L,
TRUE ~ .x))) %>%
dplyr::bind_cols(dplyr::select(filler, -c(colnames(filler)[colnames(filler) %in% colnames(.)]))) %>%
dplyr::select(genome_name, colnames(filler)) %>%
dplyr::relocate(colnames(filler), .after = 1)
#x_out <-
#x_test <-
x_test %>%
pivot_longer(2:last_col(), names_to = 'k_numbers', values_to = 'values') %>%
pivot_wider(names_from = genome_name, values_from = values) %>%
#summarize(across(everything(), ~ list(.x))) %>%
mutate(across(2:last_col(), ~ list(rep(k_numbers, times = .x))))# %>%
#x_out <-
#x_test <-
x_test %>%
pivot_longer(2:last_col(), names_to = 'k_numbers', values_to = 'values') %>%
pivot_wider(names_from = genome_name, values_from = values) %>%
#summarize(across(everything(), ~ list(.x))) %>%
mutate(across(2:last_col(), ~ list(rep(k_numbers, times = .x)))) %>%
select(-k_numbers) %>%
slice(1)
#x_out <-
#x_test <-
x_test %>%
pivot_longer(2:last_col(), names_to = 'k_numbers', values_to = 'values') %>%
pivot_wider(names_from = genome_name, values_from = values) %>%
#summarize(across(everything(), ~ list(.x))) %>%
mutate(across(2:last_col(), ~ list(rep(k_numbers, times = .x)))) %>%
select(-k_numbers) %>%
slice(1) %>%
pivot_longer(everything(), names_to = 'genome_name', values_to = 'k_numbers')
x_test
x_out <- x_test %>%
pivot_longer(2:last_col(), names_to = 'k_numbers', values_to = 'values') %>%
pivot_wider(names_from = genome_name, values_from = values) %>%
#summarize(across(everything(), ~ list(.x))) %>%
mutate(across(2:last_col(), ~ list(rep(k_numbers, times = .x)))) %>%
select(-k_numbers) %>%
slice(1) %>%
pivot_longer(everything(), names_to = 'genome_name', values_to = 'k_numbers')
View(x_out)
x_out
5*35
4900 * 1024 ^2
2930/30
2430/30
81000 * 1024 ^2
x_test
View(x_out)
table('K00008' %in% x_out$k_numbers[[1]])
x_out$k_numbers[[1]]
rep(c('a','b','c','d'), times = c(0, 1, 3, 0))
devtools::document()
devtools::document()
devtools::document()
ko_tibble2
responseVars
ko_tibble2 <- purrr::map_dfr(x, ~ {
.x %>%
dtplyr::lazy_dt() %>%
dplyr::group_by(genome_name) %>%
dplyr::summarize(k_numbers = paste0(k_number, collapse = ' ')) %>%
dplyr::as_tibble()
})
ko_tibble2 <- ko_tibble2 %>%
dplyr::mutate(k_numbers = stringr::str_split(k_numbers, pattern = ' '))
ko_tibble2
detach("package:caret", unload = TRUE)
library(caret)
install.packages('carrier')
library(carrier)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
5000 * 1024 ^2
10000 * 1024 ^2
175/12
175-125
5000 * 1024 ^2
%>%
c('a','b','c') %>% str_split()
c('a','b','c') %>% paste0(collapse = ' ')
c('a','b','c') magrittr::`%>%`() paste0(collapse = ' ')
c('a','b','c') magrittr::`%>%`( paste0(collapse = ' ') )
magrittr::`%>%`(c('a','b','c') , paste0(collapse = ' ') )
%p% <- magrittr::`%>%`
%p% <- magrittr::`%>%`()
devtools::document()
devtools::document()
69*81
2200/69
31000 * 1024 ^2
devtools::document()
detach("package:caret", unload = TRUE)
library(caret)
devtools::document()
detach("package:carrier", unload = TRUE)
library(carrier)
detach("package:carrier", unload = TRUE)
devtools::document()
responseVars
ko_tibble2
test_res <- evaluate_model_testdata_dt(responseVars, ko_tibble2)
test_res <- evaluate_model_testdata(responseVars, ko_tibble2)
names(responseVars)
names(responseVars$pres_abs_tbl)
actual_response_vars <- responseVars$pres_abs_tbl %>% select(-genome_name)
View(actual_response_vars)
test_res <- evaluate_model_testdata(actual_response_vars, ko_tibble2)
View(test_res)
View(test_res[["performance_metrics"]][["prop.100"]])
return(ko_tibble)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
load('R/sysdata.rda')
usethis::use_data(all_kegg_modules,all_models,filler,kegg_whole_regex,module_metadata,patt.kegg_modules)
filler
devtools::document()
devtools::document()
all_kegg_modules <- readRDS('data/all_kegg_modules.rda')
usethis::use_data(all_kegg_modules,all_models,filler,kegg_whole_regex,module_metadata,patt.kegg_modules, internal = TRUE,overwrite = TRUE)
load('R/sysdata.rda')
View(filler)
devtools::document()
devtools::document()
5000 * 1024 ^2
35*5
load('R/sysdata.rda')
usethis::use_data(all_kegg_modules,all_models,filler,kegg_whole_regex,module_metadata,patt.kegg_modules)
devtools::document()
5000 * 1024 ^2
library(carrier)
detach("package:carrier", unload = TRUE)
all_models$M00004$lambda.min
sample(c('a','b','c') size = 3)
sample(c('a','b','c'), size = 3)
sample(c('a','b','c'), size = 3)
sample(c('a','b','c'), size = 3)
sample(c('a','b','c'), size = 3)
sample(c('a','b','c'), size = 3)
sample(c('a','b','c'), size = 3)
sample(c('a','b','c'), size = 3)
sample(c('a','b','c'), size = 3)
sample(c('a','b','c'), size = 3)
sample(c('a','b','c'), size = 3)
sample(c('a','b','c'), size = 3)
sample(c('a','b','c'), size = 3)
sample(c('a','b','c'), size = 2)
sample(c('a','b','c'), size = 2)
sample(c('a','b','c'), size = 2)
sample(c('a','b','c'), size = 2)
x <- read_data(input_dir = '~/Downloads/tully-ko-tsv/')
x_modules <- detect_modules(x, .modules = names(all_models))
x
factor(c(0,0,0,1,1,1,0))
factor(factor(c(0,0,0,1,1,1,0)), levels = c('0', '1'))
identical(factor(factor(c(0,0,0,1,1,1,0)), levels = c('0', '1')), factor(c(0,0,0,1,1,1,0)))
2200/30
72000 * 1024 ^2
72*30
2200/69
31400 * 1024 ^2
all_models$M00004
install.packages('LiblineaR')
library(LiblineaR)
data(iris)
attach(iris)
x=iris[,1:4]
y=factor(iris[,5])
train=sample(1:dim(iris)[1],100)
xTrain=x[train,]
xTest=x[-train,]
yTrain=y[train]
yTest=y[-train]
# Center and scale data
s=scale(xTrain,center=TRUE,scale=TRUE)
# Find the best model with the best cost parameter via 10-fold cross-validations
tryTypes=c(0:7)
tryCosts=c(1000,1,0.001)
bestCost=NA
bestAcc=0
bestType=NA
for(ty in tryTypes){
for(co in tryCosts){
acc=LiblineaR(data=s,target=yTrain,type=ty,cost=co,bias=1,cross=5,verbose=FALSE)
cat("Results for C=",co," : ",acc," accuracy.\n",sep="")
if(acc>bestAcc){
bestCost=co
bestAcc=acc
bestType=ty
}
}
}
cat("Best model type is:",bestType,"\n")
cat("Best cost is:",bestCost,"\n")
cat("Best accuracy is:",bestAcc,"\n")
# Re-train best model with best cost value.
m=LiblineaR(data=s,target=yTrain,type=bestType,cost=bestCost,bias=1,verbose=FALSE)
# Scale the test data
s2=scale(xTest,attr(s,"scaled:center"),attr(s,"scaled:scale"))
# Make prediction
pr=FALSE
if(bestType==0 || bestType==7) pr=TRUE
p=predict(m,s2,proba=pr,decisionValues=TRUE)
p
rm(list = ls())
data(iris)
x=iris[,1:4]
y=factor(iris[,5])
train=sample(1:dim(iris)[1],100)
xTrain=x[train,]
xTest=x[-train,]
yTrain=y[train]
yTest=y[-train]
# Center and scale data
s=scale(xTrain,center=TRUE,scale=TRUE)
# Sparse Logistic Regression
t=5
co=heuristicC(s)
m=LiblineaR(data=s,labels=yTrain,type=t,cost=co,bias=TRUE,verbose=FALSE)
m=LiblineaR(data=s,target=yTrain,type=t,cost=co,bias=TRUE,verbose=FALSE)
# Scale the test data
s2=scale(xTest,attr(s,"scaled:center"),attr(s,"scaled:scale"))
# Make prediction
p=predict(m,s2)
# Display confusion matrix
res=table(p$predictions,yTest)
print(res)
# Compute Balanced Classification Rate
BCR=mean(c(res[1,1]/sum(res[,1]),res[2,2]/sum(res[,2]),res[3,3]/sum(res[,3])))
print(BCR)
co
class(iris[,1:4])
y
library(tidyverse)
2000/30
2100/30
70000 * 1024 ^2
library(MetaPredict)
2470/69
2470/60
41000 * 1024 ^2
seq(0.10, 1, by = 0.10)
175/18
175/15
11500 * 1024 ^2
load('R/sysdata.rda')
View(all_kegg_modules)
data(iris)
attach(iris)
x=iris[,1:4]
y=factor(iris[,5])
train=sample(1:dim(iris)[1],100)
xTrain=x[train,]
xTest=x[-train,]
yTrain=y[train]
yTest=y[-train]
# Center and scale data
s=scale(xTrain,center=TRUE,scale=TRUE)
# Find the best model with the best cost parameter via 10-fold cross-validations
tryTypes=c(0:7)
tryCosts=c(1000,1,0.001)
tryCosts
bestCost=NA
bestAcc=0
bestType=NA
for(ty in tryTypes){
for(co in tryCosts){
acc=LiblineaR(data=s,target=yTrain,type=ty,cost=co,bias=1,cross=5,verbose=FALSE)
cat("Results for C=",co," : ",acc," accuracy.\n",sep="")
if(acc>bestAcc){
bestCost=co
bestAcc=acc
bestType=ty
}
}
}
cat("Best model type is:",bestType,"\n")
cat("Best cost is:",bestCost,"\n")
cat("Best accuracy is:",bestAcc,"\n")
# Re-train best model with best cost value.
m=LiblineaR(data=s,target=yTrain,type=bestType,cost=bestCost,bias=1,verbose=FALSE)
m
5000 * 1024 ^2
170/20
8500 * 1024 ^2
424/3
424/3 * 2
424-283
50
2300/50
46000 * 1024 ^2
library(tidyverse)
mult_svm_type_results <- readRDS('all-svm-simTest-results-multiple-svm-types-100621.rda')
mult_svm_type_results <- readRDS('~/Documents/lasso-regression-metapredict/all-svm-simTest-results-multiple-svm-types-100621.rda')
mult_svm_type_perf_metrics <- mult_svm_type_results %>%
map_dfr(~ .x$performance_metrics) #%>%
View(mult_svm_type_perf_metrics)
mult_svm_type_perf_metrics %>%
select(-c(McnemarPValue, Accuracy, AccuracyLower, AccuracyUpper, AccuracyNull, AccuracyPValue, Kappa, `Neg Pred Value`, `Pos Pred Value`, `Detection Rate`, Prevalence, model_name)) %>%
group_by(sim_comp, svm_type) %>%
summarize(across(everything(), ~ mean(.x))) %>%
rename(simulated_completeness = sim_comp,
type = svm_type)
mult_svm_type_average_metrics <- mult_svm_type_perf_metrics %>%
select(-c(McnemarPValue, Accuracy, AccuracyLower, AccuracyUpper, AccuracyNull, AccuracyPValue, Kappa, `Neg Pred Value`, `Pos Pred Value`, `Detection Rate`, Prevalence, model_name)) %>%
group_by(sim_comp, svm_type) %>%
summarize(across(everything(), ~ mean(.x))) %>%
rename(simulated_completeness = sim_comp,
type = svm_type)
average_model_metrics %>%
select(simulated_completeness, F1, Precision, Recall, `Balanced Accuracy`) %>%
mutate(type = 'lasso_regression') %>%
bind_rows(simple_rule_avg_metrics %>%
select(simulated_completeness, F1, Precision, Recall, `Balanced Accuracy`) %>%
mutate(type = 'kegg_rule')
) %>%
bind_rows(mult_svm_type_average_metrics %>%
select(simulated_completeness, F1, Precision, Recall, `Balanced Accuracy`)
) %>%
#filter(simulated_completeness > 40) %>%
pivot_longer(cols = c(F1, Precision, Recall, `Balanced Accuracy`),
names_to = 'metric', values_to = 'values') %>%
ggplot(aes(simulated_completeness, values, color = type)) +
geom_line() +
geom_point() +
facet_wrap(~ metric) +
theme_bw() +
theme(panel.grid = element_blank())
average_model_metrics
rm(mult_svm_type_average_metrics, mult_svm_type_perf_metrics, mult_svm_type_results)
average_model_metrics %>%
select(simulated_completeness, F1, Precision, Recall, `Balanced Accuracy`) %>%
mutate(type = 'lasso_regression') %>%
bind_rows(simple_rule_avg_metrics %>%
select(simulated_completeness, F1, Precision, Recall, `Balanced Accuracy`) %>%
mutate(type = 'KEGG_presence_absence_rule')
) %>%
bind_rows(mult_svm_type_average_metrics %>%
select(simulated_completeness, F1, Precision, Recall, `Balanced Accuracy`, type)
) %>%
#filter(simulated_completeness > 40) %>%
pivot_longer(cols = c(F1, Precision, Recall, `Balanced Accuracy`),
names_to = 'metric', values_to = 'values') %>%
ggplot(aes(simulated_completeness, values, color = type)) +
geom_line() +
geom_point() +
theme_bw() +
theme(panel.grid = element_blank()) +
labs(color = 'Classification/Regression algorithm
or Classification rule') +
facet_wrap(~ metric, scales = 'free') +
scale_y_continuous(breaks = seq(0.1, 1, by = 0.1), limits = c(0.1, 1)) #+
devtools::document()
2450/50
49000 * 1024 ^2
