group_by(module_step) %>%
summarize(across(everything(), ~ sum(.x))) %>%
mutate(module_name = str_replace(module_step, '(M\\d{5}).*', '\\1'),
n = all_kegg_modules[['n']]) %>%
relocate(c(module_name, n), .before = module_step) %>%
select(-module_step) %>%
group_by(module_name) %>%
summarize(across(everything(), ~ sum(.x))) %>%
mutate(across(3:last_col(), ~ case_when(.x == n ~ 1L,
.x < n ~ 0L))) %>%
select(-n) %>%
as_tibble() %>%
pivot_longer(cols = 2:last_col(), names_to = 'temp', values_to = 'temp_values') %>%
pivot_wider(names_from = 'module_name', values_from = 'temp_values')
) %>%
select(-c(temp, k_number))
purrr::map(genome, ~ {
.x %>%
dtplyr::lazy_dt() %>%
dplyr::group_by(genome_name) %>%
dplyr::summarize(k_number = paste0(k_number, collapse = ' ')) %>%
dplyr::as_tibble()
}) %>%
purrr::map_dfr(~ .x)
test.out <- purrr::map(genome, ~ {
.x %>%
dtplyr::lazy_dt() %>%
dplyr::group_by(genome_name) %>%
dplyr::summarize(k_number = paste0(k_number, collapse = ' ')) %>%
dplyr::as_tibble()
}) %>%
purrr::map_dfr(~ .x) %>%
dplyr::bind_cols(
set_names(.$k_number, .$genome_name) %>%
map_dfc(~ str_detect(string = .x, pattern = patt.kegg_modules$k_numbers)) %>%
mutate(module_step = patt.kegg_modules$step, .before = 1) %>%
dtplyr::lazy_dt() %>%
mutate(across(2:last_col(), ~ as.integer(.x))) %>%
group_by(module_step) %>%
summarize(across(everything(), ~ sum(.x))) %>%
mutate(module_name = str_replace(module_step, '(M\\d{5}).*', '\\1'),
n = all_kegg_modules[['n']]) %>%
relocate(c(module_name, n), .before = module_step) %>%
select(-module_step) %>%
group_by(module_name) %>%
summarize(across(everything(), ~ sum(.x))) %>%
mutate(across(3:last_col(), ~ case_when(.x == n ~ 1L,
.x < n ~ 0L))) %>%
select(-n) %>%
as_tibble() %>%
pivot_longer(cols = 2:last_col(), names_to = 'temp', values_to = 'temp_values') %>%
pivot_wider(names_from = 'module_name', values_from = 'temp_values')
) %>%
select(-c(temp, k_number))
test.out
devtools::document()
detect_modules(genome, .modules = names(all_models))
detect_modules(genome, .modules = names(all_models)) %>% t()
detect_modules(genome, .modules = names(all_models)) %>% t() %>% pull(2)
MetaPredict(genome, .modules = names(all_models))
MetaPredict(genome)
devtools::document()
MetaPredict(genome)
devtools::document()
MetaPredict(genome)
devtools::document()
MetaPredict(genome)
rlang::last_error()
rlang::last_trace()
devtools::document()
MetaPredict(genome)
devtools::document()
MetaPredict(genome)
devtools::document()
devtools::document()
MetaPredict(genome)
View(all_models)
test.data <- purrr::map(genome, ~ {
.x %>%
dplyr::mutate(copy_number = 1) %>%
dplyr::group_by(k_number) %>%
dplyr::summarize(copy_number = sum(copy_number), .groups = 'drop') %>%
tidyr::pivot_wider(names_from = k_number, values_from = copy_number) #%>%
#dplyr::mutate(genome_name = .genome_name, .before = 1)
}) %>%
purrr::map_dfr(~ .x) %>%
dplyr::mutate(dplyr::across(dplyr::everything(), ~ as.integer(.x))) %>%
dplyr::mutate(dplyr::across(dplyr::everything(), ~ dplyr::case_when(is.na(.x) ~ 0L,
TRUE ~ .x))) %>%
dplyr::bind_cols(dplyr::select(filler, -c(colnames(filler)[colnames(filler) %in% colnames(.)]))) %>%
dplyr::select(colnames(filler)) %>%
dplyr::relocate(colnames(filler))
test.data
predict(all_models$M00004$glmnet.fit,
s = all_models$M00004$lambda.1se,
newx = test.data,
type = 'class')
predict(all_models$M00004,
s = all_models$M00004$lambda.1se,
newx = test.data,
type = 'class')
predict(all_models$M00004$glmnet.fit,
s = all_models$M00004$lambda.min
newx = test.data,
type = 'class')
predict(all_models$M00004$glmnet.fit,
s = all_models$M00004$lambda.min
newx = test.data,
type = 'class')
predict(all_models$M00004$glmnet.fit,
s = all_models$M00004$lambda.min,
newx = test.data,
type = 'class')
predict(all_models$M00004$glmnet.fit,
s = all_models$M00004$lambda.min,
newx = test.data,
type = 'class')
glmnet::predict.glmnet(all_models$M00004$glmnet.fit,
s = all_models$M00004$lambda.min,
newx = test.data,
type = 'class')
glmnet::predict.glmnet(all_models$M00004$glmnet.fit,
s = all_models$M00004$lambda.min,
newx = model.matrix(test.data),
type = 'class')
predict(all_models$M00004$glmnet.fit,
s = all_models$M00004$lambda.min,
newx = model.matrix(~ .-y,test.data),
type = 'class')
predict(all_models$M00004$glmnet.fit,
s = all_models$M00004$lambda.min,
newx = test.data %>% mutate(module_step_present = 0),
type = 'class')
test.data <- purrr::map(genome, ~ {
.x %>%
dplyr::mutate(copy_number = 1) %>%
dplyr::group_by(k_number) %>%
dplyr::summarize(copy_number = sum(copy_number), .groups = 'drop') %>%
tidyr::pivot_wider(names_from = k_number, values_from = copy_number) #%>%
#dplyr::mutate(genome_name = .genome_name, .before = 1)
}) %>%
purrr::map_dfr(~ .x) %>%
dplyr::mutate(dplyr::across(dplyr::everything(), ~ as.integer(.x))) %>%
dplyr::mutate(dplyr::across(dplyr::everything(), ~ dplyr::case_when(is.na(.x) ~ 0L,
TRUE ~ .x))) %>%
dplyr::bind_cols(dplyr::select(filler, -c(colnames(filler)[colnames(filler) %in% colnames(.)]))) %>%
dplyr::select(colnames(filler)) %>%
dplyr::relocate(colnames(filler)) %>%
mutate(module_step_present = 0, .before = 1)
test.data <- purrr::map(genome, ~ {
.x %>%
dplyr::mutate(copy_number = 1) %>%
dplyr::group_by(k_number) %>%
dplyr::summarize(copy_number = sum(copy_number), .groups = 'drop') %>%
tidyr::pivot_wider(names_from = k_number, values_from = copy_number) #%>%
#dplyr::mutate(genome_name = .genome_name, .before = 1)
}) %>%
purrr::map_dfr(~ .x) %>%
dplyr::mutate(dplyr::across(dplyr::everything(), ~ as.integer(.x))) %>%
dplyr::mutate(dplyr::across(dplyr::everything(), ~ dplyr::case_when(is.na(.x) ~ 0L,
TRUE ~ .x))) %>%
dplyr::bind_cols(dplyr::select(filler, -c(colnames(filler)[colnames(filler) %in% colnames(.)]))) %>%
dplyr::select(colnames(filler)) %>%
dplyr::relocate(colnames(filler)) %>%
mutate(module_step_present = 0, .before = 1)
model.matrix(as.formula('module_step_present ~ .'), test.data)[, -1]
test.data <- purrr::map(genome, ~ {
.x %>%
dplyr::mutate(copy_number = 1) %>%
dplyr::group_by(k_number) %>%
dplyr::summarize(copy_number = sum(copy_number), .groups = 'drop') %>%
tidyr::pivot_wider(names_from = k_number, values_from = copy_number) #%>%
#dplyr::mutate(genome_name = .genome_name, .before = 1)
}) %>%
purrr::map_dfr(~ .x) %>%
dplyr::mutate(dplyr::across(dplyr::everything(), ~ as.integer(.x))) %>%
dplyr::mutate(dplyr::across(dplyr::everything(), ~ dplyr::case_when(is.na(.x) ~ 0L,
TRUE ~ .x))) %>%
dplyr::bind_cols(dplyr::select(filler, -c(colnames(filler)[colnames(filler) %in% colnames(.)]))) %>%
dplyr::select(colnames(filler)) %>%
dplyr::relocate(colnames(filler)) %>%
mutate(module_step_present = 0, .before = 1)
test.data <- model.matrix(as.formula('module_step_present ~ .'), test.data)[, -1]
predict(all_models$M00004$glmnet.fit,
s = all_models$M00004$lambda.min,
newx = test.data,
type = 'class')
test.data
class(test.data)
test.data <- purrr::map(genome, ~ {
.x %>%
dplyr::mutate(copy_number = 1) %>%
dplyr::group_by(k_number) %>%
dplyr::summarize(copy_number = sum(copy_number), .groups = 'drop') %>%
tidyr::pivot_wider(names_from = k_number, values_from = copy_number) #%>%
#dplyr::mutate(genome_name = .genome_name, .before = 1)
}) %>%
purrr::map_dfr(~ .x) %>%
dplyr::mutate(dplyr::across(dplyr::everything(), ~ as.integer(.x))) %>%
dplyr::mutate(dplyr::across(dplyr::everything(), ~ dplyr::case_when(is.na(.x) ~ 0L,
TRUE ~ .x))) %>%
dplyr::bind_cols(dplyr::select(filler, -c(colnames(filler)[colnames(filler) %in% colnames(.)]))) %>%
dplyr::select(colnames(filler)) %>%
dplyr::relocate(colnames(filler)) %>%
mutate(module_step_present = 0, .before = 1)
test.data
test.data <- purrr::map(genome, ~ {
.x %>%
dplyr::mutate(copy_number = 1) %>%
dplyr::group_by(k_number) %>%
dplyr::summarize(copy_number = sum(copy_number), .groups = 'drop') %>%
tidyr::pivot_wider(names_from = k_number, values_from = copy_number) #%>%
#dplyr::mutate(genome_name = .genome_name, .before = 1)
}) %>%
purrr::map_dfr(~ .x) %>%
dplyr::mutate(dplyr::across(dplyr::everything(), ~ as.integer(.x))) %>%
dplyr::mutate(dplyr::across(dplyr::everything(), ~ dplyr::case_when(is.na(.x) ~ 0L,
TRUE ~ .x))) %>%
dplyr::bind_cols(dplyr::select(filler, -c(colnames(filler)[colnames(filler) %in% colnames(.)]))) %>%
dplyr::select(colnames(filler)) %>%
dplyr::relocate(colnames(filler)) %>%
mutate(module_step_present = 0L, .before = 1)
test.data <- model.matrix(as.formula('module_step_present ~ .'), test.data)[, -1]
predict(all_models$M00004$glmnet.fit,
s = all_models$M00004$lambda.min,
newx = test.data,
type = 'class')
test.data <- purrr::map(genome, ~ {
.x %>%
dplyr::mutate(copy_number = 1) %>%
dplyr::group_by(k_number) %>%
dplyr::summarize(copy_number = sum(copy_number), .groups = 'drop') %>%
tidyr::pivot_wider(names_from = k_number, values_from = copy_number) #%>%
#dplyr::mutate(genome_name = .genome_name, .before = 1)
}) %>%
purrr::map_dfr(~ .x) %>%
dplyr::mutate(dplyr::across(dplyr::everything(), ~ as.integer(.x))) %>%
dplyr::mutate(dplyr::across(dplyr::everything(), ~ dplyr::case_when(is.na(.x) ~ 0L,
TRUE ~ .x))) %>%
dplyr::bind_cols(dplyr::select(filler, -c(colnames(filler)[colnames(filler) %in% colnames(.)]))) %>%
dplyr::select(colnames(filler)) %>%
dplyr::relocate(colnames(filler)) %>%
mutate(module_step_present = 0L, .before = 1)
test.data
test.data <- model.matrix(as.formula('module_step_present ~ .'), test.data)[, -1]
predict(all_models$M00004$glmnet.fit,
s = all_models$M00004$lambda.min,
newx = test.data,
type = 'class')
test.data <- purrr::map(genome, ~ {
.x %>%
dplyr::mutate(copy_number = 1) %>%
dplyr::group_by(k_number) %>%
dplyr::summarize(copy_number = sum(copy_number), .groups = 'drop') %>%
tidyr::pivot_wider(names_from = k_number, values_from = copy_number) #%>%
#dplyr::mutate(genome_name = .genome_name, .before = 1)
}) %>%
purrr::map_dfr(~ .x) %>%
dplyr::mutate(dplyr::across(dplyr::everything(), ~ as.integer(.x))) %>%
dplyr::mutate(dplyr::across(dplyr::everything(), ~ dplyr::case_when(is.na(.x) ~ 0L,
TRUE ~ .x))) %>%
dplyr::bind_cols(dplyr::select(filler, -c(colnames(filler)[colnames(filler) %in% colnames(.)]))) %>%
dplyr::select(colnames(filler)) %>%
dplyr::relocate(colnames(filler)) %>%
mutate(module_step_present = 0L, .before = 1)
test.data <- model.matrix(as.formula('module_step_present ~ .'), test.data)#[, -1]]
predict(all_models$M00004$glmnet.fit,
s = all_models$M00004$lambda.min,
newx = test.data,
type = 'class')
test.data <- purrr::map(genome, ~ {
.x %>%
dplyr::mutate(copy_number = 1) %>%
dplyr::group_by(k_number) %>%
dplyr::summarize(copy_number = sum(copy_number), .groups = 'drop') %>%
tidyr::pivot_wider(names_from = k_number, values_from = copy_number) #%>%
#dplyr::mutate(genome_name = .genome_name, .before = 1)
}) %>%
purrr::map_dfr(~ .x) %>%
dplyr::mutate(dplyr::across(dplyr::everything(), ~ as.integer(.x))) %>%
dplyr::mutate(dplyr::across(dplyr::everything(), ~ dplyr::case_when(is.na(.x) ~ 0L,
TRUE ~ .x))) %>%
dplyr::bind_cols(dplyr::select(filler, -c(colnames(filler)[colnames(filler) %in% colnames(.)]))) %>%
dplyr::select(colnames(filler)) %>%
dplyr::relocate(colnames(filler)) %>%
mutate(module_step_present = 0L, .before = 1)
predict(all_models$M00004$glmnet.fit,
s = all_models$M00004$lambda.min,
newx = test.data,
type = 'class')
predict(all_models$M00004$glmnet.fit,
s = all_models$M00004$lambda.min,
newx = as.matrix(test.data),
type = 'class')
predict(all_models$M00004$glmnet.fit,
s = all_models$M00004$lambda.min,
newx = as.matrix(test.data)[, -1],
type = 'class')
as.matrix(test.data)[, -1]
all(colnames(as.matrix(test.data)[, -1]))
colnames(as.matrix(test.data)[, -1])
colnames((test.data)[, -1])
all(colnames((test.data)[, -1]) == colnames(filler))
test.data <- purrr::map(genome, ~ {
.x %>%
dplyr::mutate(copy_number = 1) %>%
dplyr::group_by(k_number) %>%
dplyr::summarize(copy_number = sum(copy_number), .groups = 'drop') %>%
tidyr::pivot_wider(names_from = k_number, values_from = copy_number) #%>%
#dplyr::mutate(genome_name = .genome_name, .before = 1)
}) %>%
purrr::map_dfr(~ .x) %>%
dplyr::mutate(dplyr::across(dplyr::everything(), ~ as.integer(.x))) %>%
dplyr::mutate(dplyr::across(dplyr::everything(), ~ dplyr::case_when(is.na(.x) ~ 0L,
TRUE ~ .x))) %>%
dplyr::bind_cols(dplyr::select(filler, -c(colnames(filler)[colnames(filler) %in% colnames(.)]))) %>%
dplyr::select(colnames(filler)) %>%
dplyr::relocate(colnames(filler)) %>%
mutate(module_step_present = 0, .before = 1) %>%
mutate(module_step_present = as.factor(module_step_present))
predict(all_models$M00004$glmnet.fit,
s = all_models$M00004$lambda.min,
newx = as.matrix(test.data)[, -1],
type = 'class')
predict(all_models$M00004$glmnet.fit,
s = all_models$M00004$lambda.min,
newx = as.matrix(test.data),
type = 'class')
test.data
test.data <- model.matrix(as.formula('module_step_present ~ .'), test.data)[, -1]]
test.data <- model.matrix(as.formula('module_step_present ~ .'), test.data)[, -1]
predict(all_models$M00004$glmnet.fit,
s = all_models$M00004$lambda.min,
newx = test.data,
type = 'class')
predict(all_models$M00004$glmnet.fit,
s = all_models$M00004$lambda.min,
newx = data.matrix(test.data),
type = 'class')
predict(all_models$M00004$glmnet.fit,
s = all_models$M00004$lambda.min,
newx = data.matrix(test.data)[, -1],
type = 'class')
test.data <- purrr::map(genome, ~ {
.x %>%
dplyr::mutate(copy_number = 1) %>%
dplyr::group_by(k_number) %>%
dplyr::summarize(copy_number = sum(copy_number), .groups = 'drop') %>%
tidyr::pivot_wider(names_from = k_number, values_from = copy_number) #%>%
#dplyr::mutate(genome_name = .genome_name, .before = 1)
}) %>%
purrr::map_dfr(~ .x) %>%
dplyr::mutate(dplyr::across(dplyr::everything(), ~ as.integer(.x))) %>%
dplyr::mutate(dplyr::across(dplyr::everything(), ~ dplyr::case_when(is.na(.x) ~ 0L,
TRUE ~ .x))) %>%
dplyr::bind_cols(dplyr::select(filler, -c(colnames(filler)[colnames(filler) %in% colnames(.)]))) %>%
dplyr::select(colnames(filler)) %>%
dplyr::relocate(colnames(filler)) %>%
mutate(module_step_present = 0, .before = 1) %>%
mutate(module_step_present = as.factor(module_step_present))
predict(all_models$M00004$glmnet.fit,
s = all_models$M00004$lambda.min,
newx = data.matrix(test.data)[, -1],
type = 'class')
predict(all_models$M00004$glmnet.fit,
s = all_models$M00004$lambda.min,
newx = data.matrix(test.data),
type = 'class')
predict(all_models$M00004$glmnet.fit,
s = all_models$M00004$lambda.min,
newx = (test.data),
type = 'class')
recon <- detect_modules(genome)
recon <- detect_modules(genome, .modules = names(all_models))
recon
test.data
test.data <- purrr::map(genome, ~ {
.x %>%
dplyr::mutate(copy_number = 1) %>%
dplyr::group_by(k_number) %>%
dplyr::summarize(copy_number = sum(copy_number), .groups = 'drop') %>%
tidyr::pivot_wider(names_from = k_number, values_from = copy_number) #%>%
#dplyr::mutate(genome_name = .genome_name, .before = 1)
}) %>%
purrr::map_dfr(~ .x) %>%
dplyr::mutate(dplyr::across(dplyr::everything(), ~ as.integer(.x))) %>%
dplyr::mutate(dplyr::across(dplyr::everything(), ~ dplyr::case_when(is.na(.x) ~ 0L,
TRUE ~ .x))) %>%
dplyr::bind_cols(dplyr::select(filler, -c(colnames(filler)[colnames(filler) %in% colnames(.)]))) %>%
dplyr::select(colnames(filler)) %>%
dplyr::relocate(colnames(filler)) %>%
mutate(module_step_present = 0L, .before = 1)
x.test <- as.matrix(test.data)[, -1]
predict(all_models$M00004$glmnet.fit,
s = all_models$M00004$lambda.min,
newx = x.test,
type = 'class')
View(x.test)
x.test <- as.matrix(test.data)
View(x.test)
test.data <- model.matrix(as.formula('module_step_present ~ .'), test.data)[-1,]
predict(all_models$M00004$glmnet.fit,
s = all_models$M00004$lambda.min,
newx = x.test,
type = 'class')
test.data <- purrr::map(genome, ~ {
.x %>%
dplyr::mutate(copy_number = 1) %>%
dplyr::group_by(k_number) %>%
dplyr::summarize(copy_number = sum(copy_number), .groups = 'drop') %>%
tidyr::pivot_wider(names_from = k_number, values_from = copy_number) #%>%
#dplyr::mutate(genome_name = .genome_name, .before = 1)
}) %>%
purrr::map_dfr(~ .x) %>%
dplyr::mutate(dplyr::across(dplyr::everything(), ~ as.integer(.x))) %>%
dplyr::mutate(dplyr::across(dplyr::everything(), ~ dplyr::case_when(is.na(.x) ~ 0L,
TRUE ~ .x))) %>%
dplyr::bind_cols(dplyr::select(filler, -c(colnames(filler)[colnames(filler) %in% colnames(.)]))) %>%
dplyr::select(colnames(filler)) %>%
dplyr::relocate(colnames(filler)) %>%
mutate(module_step_present = 0L, .before = 1)
x.test <- as.matrix(test.data)[-1,]
predict(all_models$M00004$glmnet.fit,
s = all_models$M00004$lambda.min,
newx = x.test,
type = 'class')
x.test <- as.matrix(test.data)[, -1]
predict(all_models$M00004$glmnet.fit,
s = all_models$M00004$lambda.min,
newx = x.test,
type = 'class')
predict(all_models$M00004$glmnet.fit,
s = all_models$M00004$lambda.1se,
newx = x.test,
type = 'class')
rbind(test,.data, test.data)
rbind(test.data, test.data)
x.test <- as.matrix(rbind(test.data, test.data))[, -1]
predict(all_models$M00004$glmnet.fit,
s = all_models$M00004$lambda.1se,
newx = x.test,
type = 'class')
View(x.test)
test.data <- purrr::map(genome, ~ {
.x %>%
dplyr::mutate(copy_number = 1) %>%
dplyr::group_by(k_number) %>%
dplyr::summarize(copy_number = sum(copy_number), .groups = 'drop') %>%
tidyr::pivot_wider(names_from = k_number, values_from = copy_number) #%>%
#dplyr::mutate(genome_name = .genome_name, .before = 1)
}) %>%
purrr::map_dfr(~ .x) %>%
dplyr::mutate(dplyr::across(dplyr::everything(), ~ as.integer(.x))) %>%
dplyr::mutate(dplyr::across(dplyr::everything(), ~ dplyr::case_when(is.na(.x) ~ 0L,
TRUE ~ .x))) %>%
dplyr::bind_cols(dplyr::select(filler, -c(colnames(filler)[colnames(filler) %in% colnames(.)]))) %>%
dplyr::select(colnames(filler)) %>%
dplyr::relocate(colnames(filler)) #%>%
x.test <- as.matrix(rbind(test.data, test.data))
predict(all_models$M00004$glmnet.fit,
s = all_models$M00004$lambda.1se,
newx = x.test,
type = 'class')
#x.test <- as.matrix(rbind(test.data, test.data))[, -1]
x.test <- as.matrix(test.data)
predict(all_models$M00004$glmnet.fit,
s = all_models$M00004$lambda.1se,
newx = x.test,
type = 'class')
devtools::document()
MetaPredict(genome)
devtools::document()
MetaPredict(genome)
devtools::document()
MetaPredict(genome)
devtools::document()
MetaPredict(genome)
devtools::document()
MetaPredict(genome)
devtools::document()
devtools::document()
MetaPredict(genome)
names(all_models)
x <- MetaPredict(genome)
x
View(x)
View(x[["module_predictions"]])
devtools::document()
MetaPredict(genome)
class(x$module_predictions$M00004)
devtools::document()
MetaPredict(genome)
x <- MetaPredict(genome)
all_models['M00004']
all_models['M00004'] %>% names()
devtools::document()
x <- MetaPredict(genome)
x
table(is.na(x$module_predictions))
table(is.na(x$module_reconstructions))
table(x$module_reconstructions == 1)
devtools::document()
x <- MetaPredict(genome)
x
devtools::document()
x <- MetaPredict(genome)
x
devtools::document()
devtools::document()
devtools::document()
devtools::document()
getwd()
