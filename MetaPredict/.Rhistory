ggplot2::ggplot(ggplot2::aes(step, name, fill = probability)) +
ggplot2::labs(x = 'Module step', y = 'Module name', fill = 'Probability') +
ggplot2::geom_tile(color = 'snow') +
ggplot2::theme_bw() +
ggplot2::theme(axis.text.y = ggplot2::element_text(size = 4), axis.text.x = ggplot2::element_blank(),
axis.ticks.x = ggplot2::element_blank()) +
ggplot2::facet_wrap(~ split, scales = 'free')
return(heatmaps)
}
create_heatmaps_from(results[[1]][[2]])
create_heatmaps_from <- function(results, metagenome = FALSE) {
if (metagenome == FALSE) {
heatmaps <- results %>%
mutate(probability = case_when(probability == 'Present' ~ '1',
TRUE ~ probability),
probability = as.numeric(probability),
step = stringr::str_replace(step, 'M\\d{5}_', ''),
module_length = length(module)) %>%
arrange(module_length) %>%
select(-c(full, module_length))
} else {
heatmaps <- results[[1]][[2]] %>%
filter(probability != 'taxonomy not found; no calculation done') %>%
mutate(probability = case_when(probability == 'Present' ~ '1',
TRUE ~ probability),
probability = as.numeric(probability)) %>%
group_by(module, name, step) %>%
summarize(probability = max(probability), .groups = 'drop') %>%
group_by(module) %>%
mutate(step = stringr::str_replace(step, 'M\\d{5}_', ''),
module_length = length(module)) %>%
arrange(module_length) %>%
select(-module_length)
}
splits <- determine_splits_for(heatmaps)
heatmaps <- heatmaps %>%
ungroup() %>%
mutate(split = purrr::map(1:length(splits), ~ case_when(module %in% splits[[.x]] ~ .x)) %>%
purrr::as_vector() %>%
na.omit()) %>%
mutate(step = factor(step, levels = step), name = factor(name, levels = name)) %>%
ggplot2::ggplot(ggplot2::aes(step, name, fill = probability)) +
ggplot2::labs(x = 'Module step', y = 'Module name', fill = 'Probability') +
ggplot2::geom_tile(color = 'snow') +
ggplot2::theme_bw() +
ggplot2::theme(axis.text.y = ggplot2::element_text(size = 4), axis.text.x = ggplot2::element_blank(),
axis.ticks.x = ggplot2::element_blank()) +
ggplot2::facet_wrap(~ split, scales = 'free')
return(heatmaps)
}
create_heatmaps_from(results[[1]][[2]])
create_heatmaps_from <- function(results, metagenome = FALSE) {
if (metagenome == FALSE) {
heatmaps <- results %>%
mutate(probability = case_when(probability == 'Present' ~ '1',
TRUE ~ probability),
probability = as.numeric(probability),
step = stringr::str_replace(step, 'M\\d{5}_', ''),
module_length = length(module)) %>%
arrange(module_length) %>%
select(-c(full, module_length))
} else {
heatmaps <- results[[1]][[2]] %>%
filter(probability != 'taxonomy not found; no calculation done') %>%
mutate(probability = case_when(probability == 'Present' ~ '1',
TRUE ~ probability),
probability = as.numeric(probability)) %>%
group_by(module, name, step) %>%
summarize(probability = max(probability), .groups = 'drop') %>%
group_by(module) %>%
mutate(step = stringr::str_replace(step, 'M\\d{5}_', ''),
module_length = length(module)) %>%
arrange(module_length) %>%
select(-module_length)
}
splits <- determine_splits_for(heatmaps)
heatmaps <- heatmaps %>%
ungroup() %>%
mutate(split = purrr::map(1:length(splits), ~ case_when(module %in% splits[[.x]] ~ .x)) %>%
purrr::as_vector() %>%
na.omit()) %>%
mutate(step = factor(step, levels = unique(step)), name = factor(name, levels = unique(name))) %>%
ggplot2::ggplot(ggplot2::aes(step, name, fill = probability)) +
ggplot2::labs(x = 'Module step', y = 'Module name', fill = 'Probability') +
ggplot2::geom_tile(color = 'snow') +
ggplot2::theme_bw() +
ggplot2::theme(axis.text.y = ggplot2::element_text(size = 4), axis.text.x = ggplot2::element_blank(),
axis.ticks.x = ggplot2::element_blank()) +
ggplot2::facet_wrap(~ split, scales = 'free')
return(heatmaps)
}
create_heatmaps_from(results[[1]][[2]])
create_heatmaps_from <- function(results, metagenome = FALSE) {
if (metagenome == FALSE) {
heatmaps <- results %>%
mutate(probability = case_when(probability == 'Present' ~ '1',
TRUE ~ probability),
probability = as.numeric(probability),
step = stringr::str_replace(step, 'M\\d{5}_', ''),
module_length = length(module)) %>%
arrange(module_length) %>%
select(-c(full, module_length))
} else {
heatmaps <- results[[1]][[2]] %>%
filter(probability != 'taxonomy not found; no calculation done') %>%
mutate(probability = case_when(probability == 'Present' ~ '1',
TRUE ~ probability),
probability = as.numeric(probability)) %>%
group_by(module, name, step) %>%
summarize(probability = max(probability), .groups = 'drop') %>%
group_by(module) %>%
mutate(step = stringr::str_replace(step, 'M\\d{5}_', ''),
module_length = length(module)) %>%
arrange(module_length) %>%
select(-module_length)
}
splits <- determine_splits_for(heatmaps)
heatmaps <- heatmaps %>%
ungroup() %>%
mutate(split = purrr::map(1:length(splits), ~ case_when(module %in% splits[[.x]] ~ .x)) %>%
purrr::as_vector() %>%
na.omit()) %>%
mutate(step = factor(step, levels = unique(step)), name = factor(name, levels = unique(name))) %>%
ggplot2::ggplot(ggplot2::aes(forcats::fct_rev(step), forcats::fct_rev(name), fill = probability)) +
ggplot2::labs(x = 'Module step', y = 'Module name', fill = 'Probability') +
ggplot2::geom_tile(color = 'snow') +
ggplot2::theme_bw() +
ggplot2::theme(axis.text.y = ggplot2::element_text(size = 4), axis.text.x = ggplot2::element_blank(),
axis.ticks.x = ggplot2::element_blank()) +
ggplot2::facet_wrap(~ split, scales = 'free')
return(heatmaps)
}
create_heatmaps_from(results[[1]][[2]])
devtools::document()
devtools::document()
devtools::document()
test = read_genome_data('~/Documents/metapredict_project/test-metapred-ko-tsv-output/CarAnox_mtb2_1016-ko.tsv')
results = MetaPredict(test, taxonList = '~/Documents/metapredict_project/test-metapred-ko-tsv-output/taxon.csv')
get_splits_from <- function(heatmaps, n_chunks) {
keys <- split(unique(heatmaps$module),
ggplot2::cut_number(1:length(unique(heatmaps$module)), n_chunks)) %>%
purrr::set_names(1:n_chunks)
return(keys)
}
determine_splits_for <- function(heatmaps, int = 51, n_ints = 1:15) {
ints = int * n_ints
if (n_groups(heatmaps) <= ints[1]) {
splits <- get_splits_from(heatmaps, n_chunks = 1)
} else if (n_groups(heatmaps) > ints[1] & n_groups(heatmaps) <= ints[2]) {
splits <- get_splits_from(heatmaps, n_chunks = 2)
} else if (n_groups(heatmaps) > ints[2] & n_groups(heatmaps) <= ints[3]) {
splits <- get_splits_from(heatmaps, n_chunks = 3)
} else if (n_groups(heatmaps) > ints[3] & n_groups(heatmaps) <= ints[4]) {
splits <- get_splits_from(heatmaps, n_chunks = 4)
} else if (n_groups(heatmaps) > ints[4] & n_groups(heatmaps) <= ints[5]) {
splits <- get_splits_from(heatmaps, n_chunks = 5)
} else if (n_groups(heatmaps) > ints[5] & n_groups(heatmaps) <= ints[6]) {
splits <- get_splits_from(heatmaps, n_chunks = 6)
} else if (n_groups(heatmaps) > ints[6] & n_groups(heatmaps) <= ints[7]) {
splits <- get_splits_from(heatmaps, n_chunks = 7)
} else if (n_groups(heatmaps) > ints[7] & n_groups(heatmaps) <= ints[8]) {
splits <- get_splits_from(heatmaps, n_chunks = 8)
} else if (n_groups(heatmaps) > ints[8] & n_groups(heatmaps) <= ints[9]) {
splits <- get_splits_from(heatmaps, n_chunks = 9)
} else if (n_groups(heatmaps) > ints[9] & n_groups(heatmaps) <= ints[10]) {
splits <- get_splits_from(heatmaps, n_chunks = 10)
} else if (n_groups(heatmaps) > ints[10] & n_groups(heatmaps) <= ints[11]) {
splits <- get_splits_from(heatmaps, n_chunks = 11)
} else if (n_groups(heatmaps) > ints[11] & n_groups(heatmaps) <= ints[12]) {
splits <- get_splits_from(heatmaps, n_chunks = 12)
} else if (n_groups(heatmaps) > ints[12] & n_groups(heatmaps) <= ints[13]) {
splits <- get_splits_from(heatmaps, n_chunks = 13)
} else if (n_groups(heatmaps) > ints[13] & n_groups(heatmaps) <= ints[14]) {
splits <- get_splits_from(heatmaps, n_chunks = 14)
} else {
splits <- get_splits_from(heatmaps, n_chunks = 15)
}
return(splits)
}
create_heatmaps_from <- function(results, metagenome = FALSE) {
if (metagenome == FALSE) {
heatmaps <- results %>%
mutate(probability = case_when(probability == 'Present' ~ '1',
TRUE ~ probability),
probability = as.numeric(probability),
step = stringr::str_replace(step, 'M\\d{5}_', ''),
module_length = length(module)) %>%
arrange(module_length) %>%
select(-c(full, module_length))
} else {
heatmaps <- results %>%
filter(probability != 'taxonomy not found; no calculation done') %>%
mutate(probability = case_when(probability == 'Present' ~ '1',
TRUE ~ probability),
probability = as.numeric(probability)) %>%
group_by(module, name, step) %>%
summarize(probability = max(probability), .groups = 'drop') %>%
group_by(module) %>%
mutate(step = stringr::str_replace(step, 'M\\d{5}_', ''),
module_length = length(module)) %>%
arrange(module_length) %>%
select(-module_length)
}
splits <- determine_splits_for(heatmaps)
heatmaps <- heatmaps %>%
ungroup() %>%
mutate(split = purrr::map(1:length(splits), ~ case_when(module %in% splits[[.x]] ~ .x)) %>%
purrr::as_vector() %>%
na.omit()) %>%
mutate(step = factor(step, levels = unique(step)), name = factor(name, levels = unique(name))) %>%
ggplot2::ggplot(ggplot2::aes(forcats::fct_rev(step), forcats::fct_rev(name), fill = probability)) +
ggplot2::labs(x = 'Module step', y = 'Module name', fill = 'Probability') +
ggplot2::geom_tile(color = 'snow') +
ggplot2::theme_bw() +
ggplot2::scale_fill_gradient2(low = 'blue', mid = 'yellow', high = 'red') +
ggplot2::theme(axis.text.y = ggplot2::element_text(size = 4), axis.text.x = ggplot2::element_blank(),
axis.ticks.x = ggplot2::element_blank()) +
ggplot2::facet_wrap(~ split, scales = 'free')
return(heatmaps)
}
print(results[[1]][[3]])
muted
create_heatmaps_from <- function(results, metagenome = FALSE) {
if (metagenome == FALSE) {
heatmaps <- results %>%
mutate(probability = case_when(probability == 'Present' ~ '1',
TRUE ~ probability),
probability = as.numeric(probability),
step = stringr::str_replace(step, 'M\\d{5}_', ''),
module_length = length(module)) %>%
arrange(module_length) %>%
select(-c(full, module_length))
} else {
heatmaps <- results %>%
filter(probability != 'taxonomy not found; no calculation done') %>%
mutate(probability = case_when(probability == 'Present' ~ '1',
TRUE ~ probability),
probability = as.numeric(probability)) %>%
group_by(module, name, step) %>%
summarize(probability = max(probability), .groups = 'drop') %>%
group_by(module) %>%
mutate(step = stringr::str_replace(step, 'M\\d{5}_', ''),
module_length = length(module)) %>%
arrange(module_length) %>%
select(-module_length)
}
splits <- determine_splits_for(heatmaps)
heatmaps <- heatmaps %>%
ungroup() %>%
mutate(split = purrr::map(1:length(splits), ~ case_when(module %in% splits[[.x]] ~ .x)) %>%
purrr::as_vector() %>%
na.omit()) %>%
mutate(step = factor(step, levels = unique(step)), name = factor(name, levels = unique(name))) %>%
ggplot2::ggplot(ggplot2::aes(forcats::fct_rev(step), forcats::fct_rev(name), fill = probability)) +
ggplot2::labs(x = 'Module step', y = 'Module name', fill = 'Probability') +
ggplot2::geom_tile(color = 'snow') +
ggplot2::theme_bw() +
ggplot2::scale_fill_gradient2(low = 'blue', mid = 'yellow', high = 'red', midpoint = 0.5) +
ggplot2::theme(axis.text.y = ggplot2::element_text(size = 4), axis.text.x = ggplot2::element_blank(),
axis.ticks.x = ggplot2::element_blank()) +
ggplot2::facet_wrap(~ split, scales = 'free')
return(heatmaps)
}
create_heatmaps_from(results[[1]][[3]])
create_heatmaps_from(results[[1]][[2]])
RColorBrewer::display.brewer.all('Paired')
RColorBrewer::display.brewer.pal('Paired')
RColorBrewer::brewer.pal(12, 'Paired')
create_heatmaps_from <- function(results, metagenome = FALSE) {
if (metagenome == FALSE) {
heatmaps <- results %>%
mutate(probability = case_when(probability == 'Present' ~ '1',
TRUE ~ probability),
probability = as.numeric(probability),
step = stringr::str_replace(step, 'M\\d{5}_', ''),
module_length = length(module)) %>%
arrange(module_length) %>%
select(-c(full, module_length))
} else {
heatmaps <- results %>%
filter(probability != 'taxonomy not found; no calculation done') %>%
mutate(probability = case_when(probability == 'Present' ~ '1',
TRUE ~ probability),
probability = as.numeric(probability)) %>%
group_by(module, name, step) %>%
summarize(probability = max(probability), .groups = 'drop') %>%
group_by(module) %>%
mutate(step = stringr::str_replace(step, 'M\\d{5}_', ''),
module_length = length(module)) %>%
arrange(module_length) %>%
select(-module_length)
}
splits <- determine_splits_for(heatmaps)
heatmaps <- heatmaps %>%
ungroup() %>%
mutate(split = purrr::map(1:length(splits), ~ case_when(module %in% splits[[.x]] ~ .x)) %>%
purrr::as_vector() %>%
na.omit()) %>%
mutate(step = factor(step, levels = unique(step)), name = factor(name, levels = unique(name))) %>%
ggplot2::ggplot(ggplot2::aes(forcats::fct_rev(step), forcats::fct_rev(name), fill = probability)) +
ggplot2::labs(x = 'Module step', y = 'Module name', fill = 'Probability') +
ggplot2::geom_tile(color = 'snow') +
ggplot2::theme_bw() +
ggplot2::scale_fill_gradient2(low = 'lightskyblue', mid = '#FFFF99', high = 'lightcoral', midpoint = 0.5) +
ggplot2::theme(axis.text.y = ggplot2::element_text(size = 4), axis.text.x = ggplot2::element_blank(),
axis.ticks.x = ggplot2::element_blank()) +
ggplot2::facet_wrap(~ split, scales = 'free')
return(heatmaps)
}
create_heatmaps_from(results[[1]][[2]])
View(results[[1]][[2]])
test
userData = test
create_heatmaps_from <- function(results, userData, metagenome = FALSE) {
if (metagenome == FALSE) {
heatmaps <- results %>%
mutate(probability = case_when(probability == 'Present' ~ '1',
TRUE ~ probability),
probability = as.numeric(probability),
step = stringr::str_replace(step, 'M\\d{5}_', ''),
module_length = length(module)) %>%
arrange(module_length) %>%
select(-c(full, module_length))
title_org <- unique(userData$organism)
} else {
heatmaps <- results %>%
filter(probability != 'taxonomy not found; no calculation done') %>%
mutate(probability = case_when(probability == 'Present' ~ '1',
TRUE ~ probability),
probability = as.numeric(probability)) %>%
group_by(module, name, step) %>%
summarize(probability = max(probability), .groups = 'drop') %>%
group_by(module) %>%
mutate(step = stringr::str_replace(step, 'M\\d{5}_', ''),
module_length = length(module)) %>%
arrange(module_length) %>%
select(-module_length)
title_org <- unique(userData$metagenome_name)
}
splits <- determine_splits_for(heatmaps)
heatmaps <- heatmaps %>%
ungroup() %>%
mutate(split = purrr::map(1:length(splits), ~ case_when(module %in% splits[[.x]] ~ .x)) %>%
purrr::as_vector() %>%
na.omit()) %>%
mutate(step = factor(step, levels = unique(step)), name = factor(name, levels = unique(name))) %>%
ggplot2::ggplot(ggplot2::aes(forcats::fct_rev(step), forcats::fct_rev(name), fill = probability)) +
ggplot2::labs(x = 'Module step', y = 'Module name', fill = 'Probability',
title = paste(title_org, ': Metabolic pathway predictions')) +
ggplot2::geom_tile(color = 'snow') +
ggplot2::theme_bw() +
ggplot2::scale_fill_gradient2(low = 'lightskyblue', mid = '#FFFF99', high = 'lightcoral', midpoint = 0.5) +
ggplot2::theme(axis.text.y = ggplot2::element_text(size = 4), axis.text.x = ggplot2::element_blank(),
axis.ticks.x = ggplot2::element_blank()) +
ggplot2::facet_wrap(~ split, scales = 'free')
return(heatmaps)
}
create_heatmaps_from(results[[1]][[2]])
create_heatmaps_from(results[[1]][[2]], userData)
devtools::document()
test = read_genome_data('~/Documents/metapredict_project/test-metapred-ko-tsv-output/CarAnox_mtb2_1016-ko.tsv')
results = MetaPredict(test, taxonList = '~/Documents/metapredict_project/test-metapred-ko-tsv-output/taxon.csv')
print(results[[1]][[3]])
get_splits_from <- function(heatmaps, n_chunks) {
keys <- split(unique(heatmaps$module),
ggplot2::cut_number(1:length(unique(heatmaps$module)), n_chunks)) %>%
purrr::set_names(1:n_chunks)
return(keys)
}
determine_splits_for <- function(heatmaps, int = 51, n_ints = 1:15) {
ints = int * n_ints
if (n_groups(heatmaps) <= ints[1]) {
splits <- get_splits_from(heatmaps, n_chunks = 1)
} else if (n_groups(heatmaps) > ints[1] & n_groups(heatmaps) <= ints[2]) {
splits <- get_splits_from(heatmaps, n_chunks = 2)
} else if (n_groups(heatmaps) > ints[2] & n_groups(heatmaps) <= ints[3]) {
splits <- get_splits_from(heatmaps, n_chunks = 3)
} else if (n_groups(heatmaps) > ints[3] & n_groups(heatmaps) <= ints[4]) {
splits <- get_splits_from(heatmaps, n_chunks = 4)
} else if (n_groups(heatmaps) > ints[4] & n_groups(heatmaps) <= ints[5]) {
splits <- get_splits_from(heatmaps, n_chunks = 5)
} else if (n_groups(heatmaps) > ints[5] & n_groups(heatmaps) <= ints[6]) {
splits <- get_splits_from(heatmaps, n_chunks = 6)
} else if (n_groups(heatmaps) > ints[6] & n_groups(heatmaps) <= ints[7]) {
splits <- get_splits_from(heatmaps, n_chunks = 7)
} else if (n_groups(heatmaps) > ints[7] & n_groups(heatmaps) <= ints[8]) {
splits <- get_splits_from(heatmaps, n_chunks = 8)
} else if (n_groups(heatmaps) > ints[8] & n_groups(heatmaps) <= ints[9]) {
splits <- get_splits_from(heatmaps, n_chunks = 9)
} else if (n_groups(heatmaps) > ints[9] & n_groups(heatmaps) <= ints[10]) {
splits <- get_splits_from(heatmaps, n_chunks = 10)
} else if (n_groups(heatmaps) > ints[10] & n_groups(heatmaps) <= ints[11]) {
splits <- get_splits_from(heatmaps, n_chunks = 11)
} else if (n_groups(heatmaps) > ints[11] & n_groups(heatmaps) <= ints[12]) {
splits <- get_splits_from(heatmaps, n_chunks = 12)
} else if (n_groups(heatmaps) > ints[12] & n_groups(heatmaps) <= ints[13]) {
splits <- get_splits_from(heatmaps, n_chunks = 13)
} else if (n_groups(heatmaps) > ints[13] & n_groups(heatmaps) <= ints[14]) {
splits <- get_splits_from(heatmaps, n_chunks = 14)
} else {
splits <- get_splits_from(heatmaps, n_chunks = 15)
}
return(splits)
}
create_heatmaps_from <- function(results, userData, metagenome = FALSE) {
if (metagenome == FALSE) {
heatmaps <- results %>%
mutate(probability = case_when(probability == 'Present' ~ '1',
TRUE ~ probability),
probability = as.numeric(probability),
step = stringr::str_replace(step, 'M\\d{5}_', ''),
module_length = length(module)) %>%
arrange(module_length) %>%
select(-c(full, module_length))
title_org <- unique(userData$organism)
} else {
heatmaps <- results %>%
filter(probability != 'taxonomy not found; no calculation done') %>%
mutate(probability = case_when(probability == 'Present' ~ '1',
TRUE ~ probability),
probability = as.numeric(probability)) %>%
group_by(module, name, step) %>%
summarize(probability = max(probability), .groups = 'drop') %>%
group_by(module) %>%
mutate(step = stringr::str_replace(step, 'M\\d{5}_', ''),
module_length = length(module)) %>%
arrange(module_length) %>%
select(-module_length)
title_org <- unique(userData$metagenome_name)
}
splits <- determine_splits_for(heatmaps)
heatmaps <- heatmaps %>%
ungroup() %>%
mutate(split = purrr::map(1:length(splits), ~ case_when(module %in% splits[[.x]] ~ .x)) %>%
purrr::as_vector() %>%
na.omit()) %>%
mutate(step = factor(step, levels = unique(step)), name = factor(name, levels = unique(name))) %>%
ggplot2::ggplot(ggplot2::aes(step, forcats::fct_rev(name), fill = probability)) +
ggplot2::labs(x = 'Module step', y = 'Module name', fill = 'Pathway completion probability',
title = paste0(title_org, ': Metabolic pathway predictions')) +
ggplot2::geom_tile(color = 'snow') +
ggplot2::theme_bw() +
ggplot2::scale_fill_gradient2(low = 'lightskyblue', mid = '#FFFF99', high = 'lightcoral', midpoint = 0.5) +
ggplot2::theme(axis.text.y = ggplot2::element_text(size = 4), axis.text.x = ggplot2::element_blank(),
axis.ticks.x = ggplot2::element_blank()) +
ggplot2::facet_wrap(~ split, scales = 'free')
return(heatmaps)
}
create_heatmaps_from(results[[1]][[2]], test)
devtools::document()
devtools::document()
test = read_genome_data('~/Documents/metapredict_project/test-metapred-ko-tsv-output/CarAnox_mtb2_1016-ko.tsv')
results = MetaPredict(test, taxonList = '~/Documents/metapredict_project/test-metapred-ko-tsv-output/taxon.csv', output_dir = '~/Downloads/metapredict-output')
load('~/Documents/metapredict_project/reqd-metapredict-data-objects-v9-integer-modules-with-NCBI')
View(concat.kegg_modules)
View(patt.kegg_modules)
sum(c(1,1,1), c(1,2,3))
c(1,2,3)
c(1,2,3) + c(3.4.5)
c(1,2,3) + c(3,4,5)
strsplit('111', split = '')
_
+
Reduce('+', c(1,1,1), c(1,1,1))
4500 * 1024 ^2
rlang::squash(xrx)
devtools::document()
load('~/Documents/metapredict_project/jan-21-2021-CURRENT-METAPREDICT-INTERNAL-DATA.RData')
usethis::use_data(all_kegg_modules, arch_phylo_key2, bact_phylo_key2, collection_lengths_m2, modules_contained_y2, n, patt.kegg_modules, priors_list2, internal = TRUE)
usethis::use_data(all_kegg_modules, arch_phylo_key2, bact_phylo_key2, collection_lengths_m2, modules_contained_y2, n, patt.kegg_modules, priors_list2, internal = TRUE, overwrite = TRUE)
usethis::use_data(all_kegg_modules, arch_phylo_key2, bact_phylo_key2, collection_lengths_m2, modules_contained_y2, n, patt.kegg_modules, priors_list2, internal = TRUE)
usethis::use_data(all_kegg_modules, arch_phylo_key2, bact_phylo_key2, collection_lengths_m2, modules_contained_y2, n, patt.kegg_modules, priors_list2, internal = TRUE)
devtools::document()
devtools::document()
read_tsv('~/Downloads/mags-relabun-9-9-2020.tsv') %>% View()
load('~/Documents/cariaco/genecluster_analysis.RData')
save(normProd_counts, file = '~/Documents/cariaco_analysis_2021/normProd_counts.RData')
load('~/Documents/metapredict_project/jan-21-2021-CURRENT-METAPREDICT-INTERNAL-DATA.RData')
View(priors_list2)
View(priors_list2[["Bacteria"]][["Bacteria_Genus"]])
View(priors_list2)
round(1.12345678, digits = 4)
round(0.12345678, digits = 4)
signif(0.12345678, digits = 4)
signif(1.12345678, digits = 4)
load('~/Documents/metapredict_project/jan-21-2021-CURRENT-METAPREDICT-INTERNAL-DATA.RData')
View(priors_list2)
View(modules_contained_y2)
load('~/Documents/metapredict_project/jan-21-2021-CURRENT-METAPREDICT-INTERNAL-DATA.RData')
View(priors_list2)
priors_list.orig <- priors_list2
save(priors_list.orig, file = '~/Documents/metapredict-construct-yl/priors-list-old-draft-from-before-feb-16-2021.RData')
rm(priors_list.orig)
save(bact_phylo_key2, arch_phylo_key2, file = '~/Documents/metapredict-construct-yl/arch-bact-phylokeys-2.RData')
load('~/Documents/metapredict-construct-yl/CURRENT-METAPREDICT-INTERNAL-DATA-FEB-16-2021.RData')
usethis::use_data(all_kegg_modules, arch_phylo_key2, bact_phylo_key2, collection_lengths_m, modules_contained_y, n, patt.kegg_modules, priors_list2, internal = TRUE)
devtools::document()
load('~/Documents/metapredict-construct-yl/CURRENT-METAPREDICT-INTERNAL-DATA-FEB-16-2021.RData')
load('~/Documents/tool-testing-metapredict/CURRENT-METAPREDICT-INTERNAL_DATA-FEB-18-2021.RData')
usethis::use_data(all_kegg_modules, arch_phylo_key2, bact_phylo_key2, collection_lengths_m, modules_contained_y, patt.kegg_modules, priors_list2, n, internal = TRUE)
devtools::document()
devtools::document()
load('~/Documents/tool-testing-metapredict/CURRENT-METAPREDICT-INTERNAL_DATA-FEB-19-2021.RData')
usethis::use_data(all_kegg_modules, arch_phylo_key2, bact_phylo_key2, collection_lengths_m, modules_contained_y, patt.kegg_modules, priors_list2, n, internal = TRUE)
devtools::document()
devtools::document()
load('/Users/dmcgrath/Documents/metapredict-construct-yl/BACT-PRIORS-DATA-031221/CURRENT-METAPREDICT-INTERNAL-DATA-MAR-12-2021.RData')
usethis::use_data(all_kegg_modules, arch_phylo_key2, bact_phylo_key2, collection_lengths_m, modules_contained_y, n, patt.kegg_modules, priors_list2)
getwd()
getwd()
usethis::use_data(all_kegg_modules, arch_phylo_key2, bact_phylo_key2, collection_lengths_m, modules_contained_y, n, patt.kegg_modules, priors_list2, internal = TRUE)
devtools::document()
