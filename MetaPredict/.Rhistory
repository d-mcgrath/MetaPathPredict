scale(5)
all_kegg_modules
all_kegg_modules
#kegg_module_genes <-
all_kegg_modules %>%
group_by(module_name, module, module_class) %>%
summarize(k_numbers = paste0(rule, collapse = '|'))
#kegg_module_genes <-
all_kegg_modules %>%
group_by(module_name, module, module_class) %>%
summarize(k_numbers = paste0(rule, collapse = '|')) %>% View()
#kegg_module_genes <-
all_kegg_modules %>%
group_by(module_name, module, module_class) %>%
summarize(k_numbers = paste0(rule, collapse = '|'), .groups = 'drop') %>%
mutate(k_numbers = list(str_split(k_numbers, pattern = '|')))
#kegg_module_genes <-
all_kegg_modules %>%
group_by(module_name, module, module_class) %>%
summarize(k_numbers = paste0(rule, collapse = '|'), .groups = 'drop') %>%
mutate(k_numbers = (str_split(k_numbers, pattern = '|')))
#kegg_module_genes <-
all_kegg_modules %>%
group_by(module_name, module, module_class) %>%
summarize(k_numbers = paste0(rule, collapse = '|'), .groups = 'drop') %>%
mutate(k_numbers = str_split(k_numbers, pattern = '|')) %>% View()
#kegg_module_genes <-
all_kegg_modules %>%
group_by(module_name, module, module_class) %>%
summarize(k_numbers = paste0(rule, collapse = '|'), .groups = 'drop') %>%
mutate(k_numbers = str_split(k_numbers, pattern = '\\|')) %>% View()
#kegg_module_genes <-
all_kegg_modules %>%
group_by(module_name, module, module_class) %>%
summarize(k_numbers = paste0(rule, collapse = '|'), .groups = 'drop') #%>%
#kegg_module_genes <-
all_kegg_modules %>%
group_by(module_name, module, module_class) %>%
summarize(k_numbers = paste0(rule, collapse = '|'), .groups = 'drop') %>%
filter(str_detect(k_numbers, 'M\\d{5}')) #%>%
#kegg_module_genes <-
all_kegg_modules %>%
group_by(module_name, module, module_class) %>%
summarize(k_numbers = paste0(rule, collapse = '|'), .groups = 'drop') %>%
filter(!str_detect(k_numbers, 'M\\d{5}')) %>%
mutate(k_numbers = str_split(k_numbers, pattern = '\\|')) %>%
map(module_gene_tibble, ~
map2(test_data, module_list, function(.current_tibble, .current_module)
.current_tibble %>%
lazy_dt() %>%
mutate(across(.cols = .x, ~ 0)) %>%
as_tibble()
)
)
#kegg_module_genes <-
all_kegg_modules %>%
group_by(module_name, module, module_class) %>%
summarize(k_numbers = paste0(rule, collapse = '|'), .groups = 'drop') %>%
filter(!str_detect(k_numbers, 'M\\d{5}')) %>%
mutate(k_numbers = str_split(k_numbers, pattern = '\\|'))
rm(constance)
kegg_module_genes
kegg_module_genes <- all_kegg_modules %>%
group_by(module_name, module, module_class) %>%
summarize(k_numbers = paste0(rule, collapse = '|'), .groups = 'drop') %>%
filter(!str_detect(k_numbers, 'M\\d{5}')) %>%
mutate(k_numbers = str_split(k_numbers, pattern = '\\|'))
kegg_module_genes
kegg_module_genes %>% View()
filler %>% colnames()
colnames(filler) %>% head(10)
all_kegg_modules %>%
group_by(module_name, module, module_class) %>%
summarize(k_numbers = paste0(rule, collapse = '|'), .groups = 'drop') %>%
filter(!str_detect(k_numbers, 'M\\d{5}')) %>%
mutate(k_numbers = str_split(k_numbers, pattern = '\\|')) %>%
mutate(k_numbers = map(k_numbers, ~ .x[.x %in% colnames(filler)]))
all_kegg_modules %>%
group_by(module_name, module, module_class) %>%
summarize(k_numbers = paste0(rule, collapse = '|'), .groups = 'drop') %>%
filter(!str_detect(k_numbers, 'M\\d{5}')) %>%
mutate(k_numbers = str_split(k_numbers, pattern = '\\|'))
all_kegg_modules %>%
group_by(module_name, module, module_class) %>%
summarize(k_numbers = paste0(rule, collapse = '|'), .groups = 'drop') %>%
filter(!str_detect(k_numbers, 'M\\d{5}')) %>%
mutate(k_numbers = str_split(k_numbers, pattern = '\\|'))
all_kegg_modules %>%
group_by(module_name, module, module_class) %>%
summarize(k_numbers = paste0(rule, collapse = '|'), .groups = 'drop') %>%
filter(!str_detect(k_numbers, 'M\\d{5}')) %>%
mutate(k_numbers = str_split(k_numbers, pattern = '\\|')) %>%
mutate(k_numbers = map(k_numbers, ~ .x[.x %in% colnames(filler)]))
kegg_module_genes <- all_kegg_modules %>%
group_by(module_name, module, module_class) %>%
summarize(k_numbers = paste0(rule, collapse = '|'), .groups = 'drop') %>%
filter(!str_detect(k_numbers, 'M\\d{5}')) %>%
mutate(k_numbers = str_split(k_numbers, pattern = '\\|')) %>%
mutate(k_numbers = map(k_numbers, ~ .x[.x %in% colnames(filler)]))
map2(1:10, 1, ~ c(.x, .y))
map2(list(1:10, 11:20), list(1,2), ~ c(.x, .y))
map2(list(1:10, 11:20), list(1,2), ~ map(101:110, function(.z) c(.x, .y)))
map2(list(1:10, 11:20), list(1,2), ~ map(101:110, function(.z) c(.x, .y, .z)))
map2(list(1:10, 11:20), list(1,2), ~ c(.x, .y) %>% map(101:110, function(.z) c(., .z)))
map2(list(1:10, 11:20), list(1,2), ~ c(.x, .y) %>% map(101:110, function(.z) c(.z)))
map2(list(1:10, 11:20), list(1,2), ~ c(.x, .y) %>% map2(101:110, c(.x, .y)))
map2(list(1:10, 11:20), list(1,2), ~ c(.x, .y) %>% map2(100:110, c(.x, .y)))
map2(list(1:10, 11:20), list(1,2), ~ c(.x, .y))
map2(list(1:10, 11:20), list(1,2), ~ c(.x, .y) %>% map2(., 100:110, c(.x, .y)))
map2(list(1:10, 11:20), list(1,2), ~ c(.x, .y) %>% map2(100:102, c(.x, .y)))
map2(list(1:10, 11:20), list(1,2), ~ c(.x, .y))
map2(list(1:10, 11:20), list(1,2), ~ c(.x, .y) %>% map2(100:110, ~ c(.x, .y)))
set_names('1', nm = 'a')
set_names('1', nm = 'a') %>% class()
set_names('1', nm = 'a') %>% list()
set_names('1', nm = 'a') %>% as.list()
set_names(tibble(), nm = 'a') %>% as.list()
set_names(tibble(x = 1), nm = 'a') %>% as.list()
set_names(tibble(x = 1), nm = 'a')
all_kegg_modules %>%
group_by(module_name, module, module_class) %>%
summarize(k_numbers = paste0(rule, collapse = '|'), .groups = 'drop') %>%
filter(!str_detect(k_numbers, 'M\\d{5}')) %>%
mutate(k_numbers = str_split(k_numbers, pattern = '\\|')) %>%
mutate(k_numbers = map(k_numbers, ~ .x[.x %in% colnames(filler)]))
all_kegg_modules %>%
group_by(module_name, module, module_class) %>%
summarize(k_numbers = paste0(rule, collapse = '|'), .groups = 'drop') %>%
filter(!str_detect(k_numbers, 'M\\d{5}')) %>%
mutate(k_numbers = str_split(k_numbers, pattern = '\\|')) %>%
mutate(k_numbers = map(k_numbers, ~ .x[.x %in% colnames(filler)])) %>%
filter(module %in% names(all_models))
kegg_module_genes <- all_kegg_modules %>%
group_by(module_name, module, module_class) %>%
summarize(k_numbers = paste0(rule, collapse = '|'), .groups = 'drop') %>%
filter(!str_detect(k_numbers, 'M\\d{5}')) %>%
mutate(k_numbers = str_split(k_numbers, pattern = '\\|')) %>%
mutate(k_numbers = map(k_numbers, ~ .x[.x %in% colnames(filler)])) %>%
filter(module %in% names(all_models))
all_kegg_modules %>%
group_by(module_name, module, module_class) %>%
summarize(k_numbers = paste0(rule, collapse = '|'), .groups = 'drop') %>%
filter(!str_detect(k_numbers, 'M\\d{5}')) %>%
mutate(k_numbers = str_split(k_numbers, pattern = '\\|')) %>%
mutate(k_numbers = map(k_numbers, ~ .x[.x %in% colnames(filler)])) %>%
filter(module %in% names(all_models)) %>%
arrange(names(all_models))
all_kegg_modules %>%
group_by(module_name, module, module_class) %>%
summarize(k_numbers = paste0(rule, collapse = '|'), .groups = 'drop') %>%
filter(!str_detect(k_numbers, 'M\\d{5}')) %>%
mutate(k_numbers = str_split(k_numbers, pattern = '\\|')) %>%
mutate(k_numbers = map(k_numbers, ~ .x[.x %in% colnames(filler)])) %>%
filter(module %in% names(all_models)) %>%
arrange(factor(module, levels = names(all_models)))
kegg_module_genes <- all_kegg_modules %>%
group_by(module_name, module, module_class) %>%
summarize(k_numbers = paste0(rule, collapse = '|'), .groups = 'drop') %>%
filter(!str_detect(k_numbers, 'M\\d{5}')) %>%
mutate(k_numbers = str_split(k_numbers, pattern = '\\|')) %>%
mutate(k_numbers = map(k_numbers, ~ .x[.x %in% colnames(filler)])) %>%
filter(module %in% names(all_models)) %>%
arrange(factor(module, levels = names(all_models)))
kegg_module_genes$k_numbers
all_models['M00001'] %>% class()
all_models[['M00001']] %>% class()
2300/50
46000 * 1024 ^2
View(all_kegg_modules)
kegg_module_genes
kegg_module_genes$k_numbers[1]
kegg_module_genes$k_numbers[[1]]
library(tictoc)
tic()
print('hello')
toc()
tic()
print('hello')
toc()
tic()
x <- 5
toc()
x
1.43*466
666 /60
300 * 466
300 * 466 / 60
300 * 466 / 60 / 60
((300 * 466) / 60) / 60
2420 / 65
37000 * 1024 ^2
234 * 466 / 60 / 60
185*466/60/60
2920/79
2950/79
37000 * 1024 ^2
rstudioapi::applyTheme('Tomorrow')
rm(pull_upper_quart)
rm(x)
rm(kegg_module_genes)
rm(list = ls())
devtools::document()
test <- read_data('~/Downloads/tully-ko-tsv/')
results <- metapredict(test)
devtools::document()
results <- metapredict(test)
View(results)
View(results[["module_extractions"]])
View(results[["summary"]])
View(all_models$M00001)
View(results)
View(results[["module_extractions"]])
View(results[["module_reconstructions"]])
View(results[["module_predictions"]])
View(results[["module_extractions"]])
View(results[["summary"]])
View(results[["module_reconstructions"]])
results_vector <- metapredict(test, module_vector = c('M00012', 'M00001'))
View(results_vector)
View(results_vector[["module_extractions"]])
View(results_vector[["module_predictions"]])
View(results_vector[["module_reconstructions"]])
View(results_vector[["summary"]])
View(results_vector)
View(results_vector[["module_predictions"]])
View(results_vector[["module_predictions"]])
View(results_vector[["module_reconstructions"]])
View(results_vector[["summary"]])
devtools::document()
rstudioapi::applyTheme('Idle Fingers')
results <- metapredict(test)
View(results)
View(results[["module_reconstructions"]])
View(results[["module_predictions"]])
View(results[["module_predictions"]])
View(results[["module_extractions"]])
devtools::document()
devtools::document()
results <- metapredict(test)
View(results)
results$summary
results$module_reconstructions
results$module_predictions
results$module_extractions
devtools::document()
results <- metapredict(test)
results$summary
results$module_reconstructions
results$module_predictions
results$module_extractions
devtools::document()
intermed <- create_kegg_matrix(test) %>%
predict(caret::preProcess(., method = c('center', 'scale')), .) %>%
suppressWarnings()
View(intermed)
x <- named_predict('M00001', all_models$M00001, intermed)
View(x)
View(x)
x
x %>% map_dfc(~ .x)
predictions <- purrr::imap_dfc(all_models[module_vector], ~ named_predict(.y, .x, intermed)) %>%
dplyr::mutate(dplyr::across(dplyr::everything(), ~ as.double(.x))) #%>%
predictions <- purrr::imap_dfc(all_models, ~ named_predict(.y, .x, intermed)) %>%
dplyr::mutate(dplyr::across(dplyr::everything(), ~ as.double(.x))) #%>%
library(tictoc)
tic()
predictions <- purrr::imap_dfc(all_models, ~ named_predict(.y, .x, intermed)) %>%
dplyr::mutate(dplyr::across(dplyr::everything(), ~ as.double(.x)))
toc()
tic()
predictions <- purrr::imap(all_models, ~ named_predict(.y, .x, intermed)) %>%
map_dfc(~ .x) %>%
dplyr::mutate(dplyr::across(dplyr::everything(), ~ as.double(.x)))
toc()
tic()
predictions <- purrr::map2(all_models, names(all_models), ~ named_predict(.y, .x, intermed)) %>%
map_dfc(~ .x) %>%
dplyr::mutate(dplyr::across(dplyr::everything(), ~ as.double(.x)))
toc()
tic()
predictions <- purrr::map2_dfc(all_models, names(all_models), ~ named_predict(.y, .x, intermed)) %>%
#map_dfc(~ .x) %>%
dplyr::mutate(dplyr::across(dplyr::everything(), ~ as.double(.x)))
toc()
tic()
predictions <- purrr::map2_dfc(all_models, names(all_models), ~ named_predict(.y, .x, intermed)) #%>%
#map_dfc(~ .x) %>%
#dplyr::mutate(dplyr::across(dplyr::everything(), ~ as.double(.x)))
toc()
predict
predict(all_models, intermed)
tic()
out <- predict(all_models, intermed)
toc()
tic()
predictions <- purrr::map2_dfc(all_models, names(all_models), ~ named_predict(.y, .x, intermed)) %>%
#map_dfc(~ .x) %>%
dplyr::mutate(dplyr::across(dplyr::everything(), ~ as.double(.x)))
toc()
predictions <- purrr::map2(all_models, names(all_models), ~ named_predict(.y, .x, intermed))
View(predictions)
interactive()
intermed
intermed2 <- create_kegg_matrix(test) %>%
predict(caret::preProcess(., method = c('center', 'scale')), .)# %>%
intermed2
identical(intermed, intermed2)
tic()
predictions <- purrr::map2_dfc(all_models, names(all_models), ~ named_predict(.y, .x, intermed)) %>%
suppressWarnings() %>%
dplyr::mutate(dplyr::across(dplyr::everything(), ~ as.double(.x)))
toc()
tic()
predictions <- purrr::map2_dfc(all_models, names(all_models), ~ named_predict(.y, .x, intermed)) %>%
suppressWarnings() %>%
dplyr::mutate(dplyr::across(dplyr::everything(), ~ as.double(.x)))
toc()
predictions
tic()
predictions <- purrr::map2_dfc(all_models, names(all_models), ~ named_predict(.y, .x, intermed)) %>%
#suppressWarnings() %>%
dplyr::mutate(dplyr::across(dplyr::everything(), ~ as.double(.x)))
toc()
devtools::document()
results <- metapredict(test)
results$summary
results$module_reconstructions
results$module_predictions
results$module_extractions
results_vector <- metapredict(test, module_vector = 'M0045678')
devtools::document()
results_vector <- metapredict(test, module_vector = 'M0045678')
devtools::document()
results_vector <- metapredict(test, module_vector = 'M0045678')
results_vector <- metapredict(test, module_vector = c('M00001', 'M0045678'))
results_vector <- metapredict(test, module_vector = c('M0000154', 'M0045678'))
results_vector <- metapredict(test, module_vector = c('M0000154', 'M0045678', 'M00345345'))
module_metadata
/module_metadata
?module_metadata
print(module_metadata, n = 100)
devtools::document()
available_modules()
test
out
metapredict(out)
devtools::document()
devtools::document()
devtools::document()
interactive()
as.numeric('yes')
BiocManager::install('KEGGREST')
mod <- KEGGREST::keggList('module')
View(mod)
devtools::document()
all_models$M00001
library(tidyverse)
all_models$M00001 %>% pryr::otype()
all_models$M00001 %>% pryr::ftype()
all_models$M00001
getS3method('predict', 'LiblineaR')
method(predict)
methods(predict)
methods(predict) %>% View()
View(methods(predict))
print
LiblineaR:::predictLinear
LiblineaR:::predictLinear(predict())
LiblineaR:::.__NAMESPACE__.
LiblineaR:::.__S3MethodsTable__.
predict
methods(predict)
predict.LiblineaR
*
predict.LiblineaR*
l
predict.LiblineaR
getS3method('predict', 'LiblineaR')
caret::preProcess
devtools::document()
devtools::document()
x <- read_data('~/Downloads/tully-ko-tsv/')
x
res <- metapredict(x)
res <- metapredict(x)
res <- metapredict(x)
devtools::document()
res <- metapredict(x)
predict.LiblineaR <- function (object, newx, proba = FALSE, decisionValues = FALSE, ...) {
sparse = FALSE
sparse2 = FALSE
if (sparse <- inherits(newx, "matrix.csr")) {
if (requireNamespace("SparseM", quietly = TRUE)) {
newx = SparseM::t(SparseM::t(newx))
n = newx@dimension[1]
p = newx@dimension[2]
}
else {
stop("newx inherits from 'matrix.csr', but 'SparseM' package is not available. Cannot proceed further. You could either use non-sparse matrix, install SparseM package or use sparse matrices based on Matrix package, also supported by LiblineaR.")
}
}
else if (sparse2 <- (inherits(newx, "dgCMatrix") | inherits(newx,
"dgRMatrix"))) {
if (requireNamespace("Matrix", quietly = TRUE)) {
if (inherits(newx, "dgCMatrix")) {
newx <- as(as(newx, "matrix"), "dgRMatrix")
}
newx = Matrix::t(Matrix::t(newx))
n = dim(newx)[1]
p = dim(newx)[2]
}
else {
stop("newx inherits from 'dgCMatrix' or 'dgRMatrix', but 'Matrix' package is not available. Cannot proceed further. You could either use non-sparse matrix, install Matrix package or use sparse matrices based on SparseM package, also supported by LiblineaR.")
}
}
else {
n = dim(newx)[1]
p = dim(newx)[2]
}
fNames = colnames(object$W)[colnames(object$W) != "Bias"]
if (is.null(colnames(newx))) {
if (p != length(fNames))
stop("dims of 'test' and 'train' differ")
}
else {
if (!all(fNames %in% colnames(newx)))
stop("columns of 'test' and 'train' differ")
if (!identical(fNames, colnames(newx)))
newx <- newx[, fNames, drop = FALSE]
}
if (!object$Type %in% c(0:7, 11:13)) {
stop("Invalid model object: Wrong value for 'type'. Must be an integer between 0 and 7  or between 11 and 13 included.\n")
}
isRegression = object$Type >= 11
b = object$Bias
Probabilities = matrix(data = -1)
if (proba) {
if (!object$Type %in% c(0, 6, 7)) {
warning("Computing probabilities is only supported for Logistic Regressions (LiblineaR 'type' 0, 6 or 7).\n",
"Accordingly, 'proba' was set to FALSE.")
proba = FALSE
}
else {
Probabilities = matrix(ncol = n * length(object$ClassNames),
nrow = 1, data = 0)
}
}
Y = matrix(ncol = n, nrow = 1, data = 0)
DecisionValues = matrix(data = -1)
if (decisionValues) {
if (isRegression) {
warning("Computing decision values is only supported for classification (LiblineaR 'type' between 0 and 7).\n",
"Accordingly, 'decisionValues' was set to FALSE.")
decisionValues = FALSE
}
else {
DecisionValues = matrix(ncol = n * length(object$ClassNames),
nrow = 1, data = 0)
}
}
cn = c(1:length(object$ClassNames))
ret <- .C("predictLinear", as.double(Y), as.double(if (sparse) {
newx@ra
} else if (sparse2) {
newx@x
} else {
t(newx)
}), as.double(object$W), as.integer(decisionValues), as.double(t(DecisionValues)),
as.integer(proba), as.double(t(Probabilities)), as.integer(object$NbClass),
as.integer(p), as.integer(n), as.integer(sparse + sparse2),
as.integer(if (sparse) {
newx@ia
} else if (sparse2) {
newx@p + 1
} else {
0
}), as.integer(if (sparse) {
newx@ja
} else if (sparse2) {
newx@j + 1
} else {
0
}), as.double(b), as.integer(cn), as.integer(object$Type),
PACKAGE = "LiblineaR")
result = list()
if (isRegression)
result$predictions = ret[[1]]
else result$predictions = object$ClassNames[as.integer(ret[[1]])]
if (proba) {
result$probabilities = matrix(ncol = length(object$ClassNames),
nrow = n, data = ret[[7]], byrow = TRUE)
colnames(result$probabilities) = object$ClassNames
}
if (decisionValues) {
result$decisionValues = matrix(ncol = length(object$ClassNames),
nrow = n, data = ret[[5]], byrow = TRUE)
colnames(result$decisionValues) = object$ClassNames
}
return(result)
}
View(predict.LiblineaR)
.C
LiblineaR:::predictLinear
devtools::document()
res <- metapredict(x)
x
res
View(res)
View(res[["summary"]])
devtools::document()
LiblineaR:::predictLinear
devtools::document()
