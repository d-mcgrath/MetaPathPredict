mutate(across(everything(), ~ map(.x, function(.y) rep(cur_column(), .y))))
x_test %>%
mutate(group_col = row_number(), .before = 1)
group_by(group_col)
x_test %>%
mutate(group_col = row_number(), .before = 1)
x_test %>%
mutate(group_col = row_number(), .before = 1)
group_by(group_col)
x_test %>%
mutate(group_col = row_number(), .before = 1) %>%
group_by(group_col)
x_test2 <- x_test %>%
lazy_dt() %>%
mutate(group_col = row_number()) %>%
relocate(group_col, .before = 1) %>%
group_by(group_col) %>%
mutate(across(everything(), ~ paste0(.x, collapse = ' '))) %>%
mutate(across(everything(), ~ stringi::stri_replace_all_regex(.x, '^$', NA_character_))) %>%
as_tibble()
View(x_test2)
x_test %>%
rowwise() %>%
mutate(across(everything(), ~ paste0(.x, collapse = ' ')))
x_test %>%
rowwise() %>%
mutate(across(everything(), ~ paste0(.x, collapse = ' '))) %>%
mutate(across(everything(), ~ stringi::stri_replace_all_fixed(.x, '', NA_character_)))
warnings()
x_test2 <- x_test %>%
rowwise() %>%
mutate(across(everything(), ~ paste0(.x, collapse = ' '))) %>%
mutate(across(everything(), ~ case_when(.x == '' ~ NA_character_,
TRUE ~ .x))) %>%
unite(everything(), col = 'k_numbers', na.rm = TRUE, sep = ' ')
View(x_test2)
2485/70
## another attempt
x_ko_tibble
x_ko_tibble %>%
mutate(across(everything(), ~ map_chr(.x, function(.y) {
rep(cur_column(), .y) %>%
paste0(collapse = ' ')
})))
x_ko_tibble %>%
mutate(across(everything(), ~ map_chr(.x, function(.y) {
rep(cur_column(), .y) %>%
paste0(collapse = ' ') %>%
if_else(. == '', NA_character_, .)
})))
rep('A', 5) %>%
paste0(collapse = ' ') %>%
if_else(. == '', NA_character_, .)
rep('', 5) %>%
paste0(collapse = ' ') %>%
if_else(. == '', NA_character_, .)
rep('A', 0) %>%
paste0(collapse = ' ') %>%
if_else(. == '', NA_character_, .)
rep('A', 0) %>%
paste0(collapse = ' ') %>%
if_else(. == '', NA_character_, .) %>% class()
x_ko_tibble %>%
mutate(across(everything(), ~ map(.x, function(.y) {
rep(cur_column(), .y) %>%
paste0(collapse = ' ') %>%
if_else(. == '', NA_character_, .)
}))) %>% View()
c('a','b','c') == ''
x_ko_tibble %>%
mutate(across(everything(), ~ map_chr(.x, function(.y) {
rep(cur_column(), .y) %>%
paste0(collapse = ' ') %>%
if_else(all(. == ''), NA_character_, .)
})))
x_ko_tibble %>%
mutate(across(everything(), ~ map_chr(.x, function(.y) {
z <- rep(cur_column(), .y) %>%
paste0(collapse = ' ')
if_else(all(z == ''), NA_character_, z)
})))
x_ko_tibble %>%
mutate(across(everything(), ~ map_chr(.x, function(.y) {
z <- rep(cur_column(), .y) %>%
paste0(collapse = ' ')
if_else(z == '', NA_character_, z)
})))
new_test <- x_ko_tibble %>%
mutate(across(everything(), ~ map_chr(.x, function(.y) {
z <- rep(cur_column(), .y) %>%
paste0(collapse = ' ')
if_else(z == '', NA_character_, z)
})))
View(new_test)
new_test %>% unite(everything(), col = 'k_numbers', sep = ' ') %>% View()
new_test %>% unite(everything(), col = 'k_numbers', sep = ' ', na.rm = TRUE) %>% View()
35*69
x
responseVars <- detect_modules(x, .modules = names(all_models))
responseVars
ko_tibble2 <- purrr::map_dfr(x, ~ {
.x %>%
dtplyr::lazy_dt() %>%
dplyr::group_by(genome_name) %>%
dplyr::summarize(k_numbers = paste0(k_number, collapse = ' ')) %>%
dplyr::as_tibble()
})
ko_tibble2
ko_tibble2 %>%
dplyr::mutate(k_numbers = stringr::str_split(k_numbers, pattern = ' '))
ko_tibble2 <- ko_tibble2 %>%
dplyr::mutate(k_numbers = stringr::str_split(k_numbers, pattern = ' '))
ko_tibble2
ko_tibble2 <- purrr::map(seq(0.10, 1, by = 0.10), function(.prop) {
ko_tibble2 %>%
dplyr::mutate(k_numbers = purrr::map(k_numbers, ~ sample(x = .x)), # randomly shuffle the k_numbers
k_numbers = purrr::map(k_numbers, ~ sample(x = .x, size = .prop * length(.x))) #randomly sample the k_numbers
) %>%
tidyr::unnest(cols = k_numbers) %>%
dplyr::mutate(k_count = 1) %>%
dplyr::group_by(genome_name, k_numbers) %>%
dplyr::summarize(k_count = sum(k_count)) %>%
tidyr::pivot_wider(names_from = k_numbers, values_from = k_count) %>%
dplyr::ungroup() %>%
dplyr::mutate(dplyr::across(2:dplyr::last_col(), ~ as.integer(.x))) %>%
dplyr::mutate(dplyr::across(2:dplyr::last_col(), ~ dplyr::case_when(is.na(.x) ~ 0L,
TRUE ~ .x))) %>%
dplyr::bind_cols(dplyr::select(filler, -c(colnames(filler)[colnames(filler) %in% colnames(.)]))) %>%
dplyr::select(colnames(filler)) %>%
dplyr::relocate(colnames(filler)) %>%
as.matrix()
}) %>%
purrr::set_names(nm = paste0('prop.', seq(10, 100, by = 10)))
ko_tibble2
View(ko_tibble2)
ko_tibble2 <- purrr::map_dfr(x, ~ {
.x %>%
dtplyr::lazy_dt() %>%
dplyr::group_by(genome_name) %>%
dplyr::summarize(k_numbers = paste0(k_number, collapse = ' ')) %>%
dplyr::as_tibble()
})
ko_tibble2 <- ko_tibble2 %>%
dplyr::mutate(k_numbers = stringr::str_split(k_numbers, pattern = ' '))
View(ko_tibble2)
ko_tibble2
ko_tibble2 <- purrr::map_dfr(x, ~ {
.x %>%
dtplyr::lazy_dt() %>%
dplyr::group_by(genome_name) %>%
dplyr::summarize(k_numbers = paste0(k_number, collapse = ' ')) %>%
dplyr::as_tibble()
})
ko_tibble2
x
x %>%
map_dfr(~ .x)
x %>%
map_dfr(~ .x) %>%
rename(k_numbers = k_number) %>%
dplyr::mutate(k_count = 1) %>%
dplyr::group_by(genome_name, k_numbers) %>%
dplyr::summarize(k_count = sum(k_count)) %>%
tidyr::pivot_wider(names_from = k_numbers, values_from = k_count) %>%
dplyr::ungroup() %>%
dplyr::mutate(dplyr::across(2:dplyr::last_col(), ~ as.integer(.x))) %>%
dplyr::mutate(dplyr::across(2:dplyr::last_col(), ~ dplyr::case_when(is.na(.x) ~ 0L,
TRUE ~ .x))) %>%
dplyr::bind_cols(dplyr::select(filler, -c(colnames(filler)[colnames(filler) %in% colnames(.)]))) %>%
dplyr::select(colnames(filler)) %>%
dplyr::relocate(colnames(filler))
x_test <- x %>%
map_dfr(~ .x) %>%
rename(k_numbers = k_number) %>%
dplyr::mutate(k_count = 1) %>%
dplyr::group_by(genome_name, k_numbers) %>%
dplyr::summarize(k_count = sum(k_count)) %>%
tidyr::pivot_wider(names_from = k_numbers, values_from = k_count) %>%
dplyr::ungroup() %>%
dplyr::mutate(dplyr::across(2:dplyr::last_col(), ~ as.integer(.x))) %>%
dplyr::mutate(dplyr::across(2:dplyr::last_col(), ~ dplyr::case_when(is.na(.x) ~ 0L,
TRUE ~ .x))) %>%
dplyr::bind_cols(dplyr::select(filler, -c(colnames(filler)[colnames(filler) %in% colnames(.)]))) %>%
dplyr::select(genome_name, colnames(filler)) %>%
dplyr::relocate(colnames(filler), .after = 1)
x_test
x_test %>%
map_dfc(~ .x)
#mutate
#x_out <-
x_test %>%
map_dfc(~ names(.x))
#x_out <-
x_test %>%
map_dfc(~ colnames(.x))
#x_out <-
x_test %>%
map_dfc(~ cur_column)
#x_out <-
x_test %>%
map_dfc(~ cur_column())
#x_out <-
x_test %>%
imap_dfc(~ rep(.y, .x)
)
#x_out <-
x_test %>%
imap_dfc(~ list(rep(.y, .x))
)
rep_along('a', c(4,5))
#mutate(across(everything(), ~ map(.x, function(.y) rep(cur_column(), .y))))
combn('a', c(4,5
))
#mutate(across(everything(), ~ map(.x, function(.y) rep(cur_column(), .y))))
combn(1:4, 'a')
#mutate(across(everything(), ~ map(.x, function(.y) rep(cur_column(), .y))))
combn(1:4, 2)
rep(2, each = 4)
rep(2, times = 4)
rep(2, each = 4:5)
rep('K00001', 10)
rep(rep('K00001', 10), each = c(1:10))
rep(rep('K00001', 10), times = c(1:10))
#x_out <-
x_test %>%
imap_dfc(~ list(rep(rep(.y, length(.x)), times = .x))
)
#x_out <-
x_test %>%
imap_dfc(~ (rep(rep(.y, length(.x)), times = .x))
)
#x_out <-
x_test %>%
imap(~ rep(rep(.y, length(.x)), times = .x)
)
#x_out <-
x_test %>%
select(-1)
#x_out <-
x_test %>%
select(-1) %>%
imap(~ rep(rep(.y, length(.x)), times = .x)
)
x_test
x_test %>%
pivot_longer(2:last_col(), names_to = 'k_numbers', values_to = 'values')
#x_out <-
x_test %>%
pivot_longer(2:last_col(), names_to = 'k_numbers', values_to = 'values') %>%
pivot_wider(names_from = genome_name, values_from = values)
#x_out <-
x_test %>%
pivot_longer(2:last_col(), names_to = 'k_numbers', values_to = 'values') %>%
pivot_wider(names_from = genome_name, values_from = values) %>%
summarize(across(everything() ~ list(.x)))
#x_out <-
x_test %>%
pivot_longer(2:last_col(), names_to = 'k_numbers', values_to = 'values') %>%
pivot_wider(names_from = genome_name, values_from = values) %>%
summarize(across(everything(), ~ list(.x)))
#x_out <-
x_test %>%
pivot_longer(2:last_col(), names_to = 'k_numbers', values_to = 'values') %>%
pivot_wider(names_from = genome_name, values_from = values) %>%
summarize(across(everything(), ~ list(.x))) %>% View()
#x_out <-
x_test %>%
pivot_longer(2:last_col(), names_to = 'k_numbers', values_to = 'values') %>%
pivot_wider(names_from = genome_name, values_from = values) %>%
summarize(across(everything(), ~ list(.x))) %>%
mutate(across(2:last_col(), ~ rep(k_numbers, times = .x))) %>% View()
#x_out <-
x_test %>%
pivot_longer(2:last_col(), names_to = 'k_numbers', values_to = 'values') %>%
pivot_wider(names_from = genome_name, values_from = values) %>%
summarize(across(everything(), ~ list(.x))) %>%
mutate(across(2:last_col(), ~ rep(k_numbers, .x))) %>% View()
rep(c('a','b','c'), 1:3)
x_test %>%
pivot_longer(2:last_col(), names_to = 'k_numbers', values_to = 'values') %>%
pivot_wider(names_from = genome_name, values_from = values) %>%
summarize(across(everything(), ~ list(.x)))
x_test %>%
pivot_longer(2:last_col(), names_to = 'k_numbers', values_to = 'values') %>%
pivot_wider(names_from = genome_name, values_from = values)
#x_out <-
x_test %>%
pivot_longer(2:last_col(), names_to = 'k_numbers', values_to = 'values') %>%
pivot_wider(names_from = genome_name, values_from = values) %>%
#summarize(across(everything(), ~ list(.x))) %>%
mutate(across(2:last_col(), ~ rep(k_numbers, times = .x))) %>%
imap(~ rep(rep(.y, length(.x)), times = .x)
)
#x_out <-
x_test %>%
pivot_longer(2:last_col(), names_to = 'k_numbers', values_to = 'values') %>%
pivot_wider(names_from = genome_name, values_from = values) %>%
#summarize(across(everything(), ~ list(.x))) %>%
mutate(across(2:last_col(), ~ list(rep(k_numbers, times = .x))))# %>%
#x_out <-
x_test %>%
pivot_longer(2:last_col(), names_to = 'k_numbers', values_to = 'values') %>%
pivot_wider(names_from = genome_name, values_from = values) %>%
#summarize(across(everything(), ~ list(.x))) %>%
mutate(across(2:last_col(), ~ (rep(k_numbers, times = .x))))# %>%
#x_out <-
x_test %>%
pivot_longer(2:last_col(), names_to = 'k_numbers', values_to = 'values') %>%
pivot_wider(names_from = genome_name, values_from = values) %>%
summarize(across(everything(), ~ list(.x))) #%>%
#x_out <-
x_test <- x_test %>%
pivot_longer(2:last_col(), names_to = 'k_numbers', values_to = 'values') %>%
pivot_wider(names_from = genome_name, values_from = values) %>%
summarize(across(everything(), ~ list(.x))) #%>%
x_test_knumbers <- x_test$k_numbers
x_test_knumbers
View(x_test_knumbers)
x_test_knumbers <- x_test %>% select(k_numbers)
x_test_genomes <- x_test %>% select(-k_numbers)
View(x_test_genomes)
View(x_test_knumbers)
x_test_genomes %>%
map_dfc(~ rep(x_test_knumbers$k_numbers, .x))
x_test_genomes %>%
map(~ rep(x_test_knumbers$k_numbers, .x))
x_test_genomes
x_test_genomes %>%
map(~ rep(x_test_knumbers$k_numbers, unlist(.x)))
x_test_genomes %>%
map(~ rep(x_test_knumbers$k_numbers, times = unlist(.x)))
x_test_genomes %>%
mutate(across(everything(), ~ rep(x_test_knumbers, .x)))
x_test_genomes %>%
mutate(across(everything(), ~ rep(x_test_knumbers, unlist(.x))))
rm(x_test_genomes, x_test_knumbers)
x_test <- x %>%
map_dfr(~ .x) %>%
rename(k_numbers = k_number) %>%
dplyr::mutate(k_count = 1) %>%
dplyr::group_by(genome_name, k_numbers) %>%
dplyr::summarize(k_count = sum(k_count)) %>%
tidyr::pivot_wider(names_from = k_numbers, values_from = k_count) %>%
dplyr::ungroup() %>%
dplyr::mutate(dplyr::across(2:dplyr::last_col(), ~ as.integer(.x))) %>%
dplyr::mutate(dplyr::across(2:dplyr::last_col(), ~ dplyr::case_when(is.na(.x) ~ 0L,
TRUE ~ .x))) %>%
dplyr::bind_cols(dplyr::select(filler, -c(colnames(filler)[colnames(filler) %in% colnames(.)]))) %>%
dplyr::select(genome_name, colnames(filler)) %>%
dplyr::relocate(colnames(filler), .after = 1)
#x_out <-
#x_test <-
x_test %>%
pivot_longer(2:last_col(), names_to = 'k_numbers', values_to = 'values') %>%
pivot_wider(names_from = genome_name, values_from = values) %>%
#summarize(across(everything(), ~ list(.x))) %>%
mutate(across(2:last_col(), ~ list(rep(k_numbers, times = .x))))# %>%
#x_out <-
#x_test <-
x_test %>%
pivot_longer(2:last_col(), names_to = 'k_numbers', values_to = 'values') %>%
pivot_wider(names_from = genome_name, values_from = values) %>%
#summarize(across(everything(), ~ list(.x))) %>%
mutate(across(2:last_col(), ~ list(rep(k_numbers, times = .x)))) %>%
select(-k_numbers) %>%
slice(1)
#x_out <-
#x_test <-
x_test %>%
pivot_longer(2:last_col(), names_to = 'k_numbers', values_to = 'values') %>%
pivot_wider(names_from = genome_name, values_from = values) %>%
#summarize(across(everything(), ~ list(.x))) %>%
mutate(across(2:last_col(), ~ list(rep(k_numbers, times = .x)))) %>%
select(-k_numbers) %>%
slice(1) %>%
pivot_longer(everything(), names_to = 'genome_name', values_to = 'k_numbers')
x_test
x_out <- x_test %>%
pivot_longer(2:last_col(), names_to = 'k_numbers', values_to = 'values') %>%
pivot_wider(names_from = genome_name, values_from = values) %>%
#summarize(across(everything(), ~ list(.x))) %>%
mutate(across(2:last_col(), ~ list(rep(k_numbers, times = .x)))) %>%
select(-k_numbers) %>%
slice(1) %>%
pivot_longer(everything(), names_to = 'genome_name', values_to = 'k_numbers')
View(x_out)
x_out
5*35
4900 * 1024 ^2
2930/30
2430/30
81000 * 1024 ^2
x_test
View(x_out)
table('K00008' %in% x_out$k_numbers[[1]])
x_out$k_numbers[[1]]
rep(c('a','b','c','d'), times = c(0, 1, 3, 0))
devtools::document()
devtools::document()
devtools::document()
ko_tibble2
responseVars
ko_tibble2 <- purrr::map_dfr(x, ~ {
.x %>%
dtplyr::lazy_dt() %>%
dplyr::group_by(genome_name) %>%
dplyr::summarize(k_numbers = paste0(k_number, collapse = ' ')) %>%
dplyr::as_tibble()
})
ko_tibble2 <- ko_tibble2 %>%
dplyr::mutate(k_numbers = stringr::str_split(k_numbers, pattern = ' '))
ko_tibble2
detach("package:caret", unload = TRUE)
library(caret)
install.packages('carrier')
library(carrier)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
5000 * 1024 ^2
10000 * 1024 ^2
175/12
175-125
5000 * 1024 ^2
%>%
c('a','b','c') %>% str_split()
c('a','b','c') %>% paste0(collapse = ' ')
c('a','b','c') magrittr::`%>%`() paste0(collapse = ' ')
c('a','b','c') magrittr::`%>%`( paste0(collapse = ' ') )
magrittr::`%>%`(c('a','b','c') , paste0(collapse = ' ') )
%p% <- magrittr::`%>%`
%p% <- magrittr::`%>%`()
devtools::document()
devtools::document()
69*81
2200/69
31000 * 1024 ^2
devtools::document()
detach("package:caret", unload = TRUE)
library(caret)
devtools::document()
detach("package:carrier", unload = TRUE)
library(carrier)
detach("package:carrier", unload = TRUE)
devtools::document()
responseVars
ko_tibble2
test_res <- evaluate_model_testdata_dt(responseVars, ko_tibble2)
test_res <- evaluate_model_testdata(responseVars, ko_tibble2)
names(responseVars)
names(responseVars$pres_abs_tbl)
actual_response_vars <- responseVars$pres_abs_tbl %>% select(-genome_name)
View(actual_response_vars)
test_res <- evaluate_model_testdata(actual_response_vars, ko_tibble2)
View(test_res)
View(test_res[["performance_metrics"]][["prop.100"]])
return(ko_tibble)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
load('R/sysdata.rda')
usethis::use_data(all_kegg_modules,all_models,filler,kegg_whole_regex,module_metadata,patt.kegg_modules)
filler
devtools::document()
devtools::document()
all_kegg_modules <- readRDS('data/all_kegg_modules.rda')
usethis::use_data(all_kegg_modules,all_models,filler,kegg_whole_regex,module_metadata,patt.kegg_modules, internal = TRUE,overwrite = TRUE)
load('R/sysdata.rda')
View(filler)
devtools::document()
devtools::document()
5000 * 1024 ^2
35*5
load('R/sysdata.rda')
usethis::use_data(all_kegg_modules,all_models,filler,kegg_whole_regex,module_metadata,patt.kegg_modules)
devtools::document()
5000 * 1024 ^2
library(carrier)
detach("package:carrier", unload = TRUE)
all_models$M00004$lambda.min
sample(c('a','b','c') size = 3)
sample(c('a','b','c'), size = 3)
sample(c('a','b','c'), size = 3)
sample(c('a','b','c'), size = 3)
sample(c('a','b','c'), size = 3)
sample(c('a','b','c'), size = 3)
sample(c('a','b','c'), size = 3)
sample(c('a','b','c'), size = 3)
sample(c('a','b','c'), size = 3)
sample(c('a','b','c'), size = 3)
sample(c('a','b','c'), size = 3)
sample(c('a','b','c'), size = 3)
sample(c('a','b','c'), size = 3)
sample(c('a','b','c'), size = 2)
sample(c('a','b','c'), size = 2)
sample(c('a','b','c'), size = 2)
sample(c('a','b','c'), size = 2)
x <- read_data(input_dir = '~/Downloads/tully-ko-tsv/')
x_modules <- detect_modules(x, .modules = names(all_models))
x
factor(c(0,0,0,1,1,1,0))
factor(factor(c(0,0,0,1,1,1,0)), levels = c('0', '1'))
identical(factor(factor(c(0,0,0,1,1,1,0)), levels = c('0', '1')), factor(c(0,0,0,1,1,1,0)))
2200/30
72000 * 1024 ^2
72*30
2200/69
31400 * 1024 ^2
all_models$M00004
