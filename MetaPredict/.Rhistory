# given the genome completeness estimate p
#' @export
get_posteriors <- function(modules_list, strict = strict) {
posterior_results <- list()
if (strict == TRUE) {
modules_list <- modules_list %>%
purrr::keep(~ nrow(.x) > 0) %>%
purrr::set_names(nm = purrr::map_chr(., ~ unique(.x$taxonomy)))
}
posterior_results <- purrr::map(seq_along(modules_list), ~ {
posterior_results[[.x]] <- modules_list[[.x]] %>%
dplyr::rowwise() %>%
dplyr::mutate(pj.k = list(get_pj.k_betabinomial(alpha, beta, y_j, n, m_j, x_j)),
p.xj_nbar = get_p.xj_nbar(n, x_j, p_j, pj.k),
p.xj_n = list(get_p.xj_n(n, x_j, p_j)), # VERIFY THAT pj.k IS EQUIVALENT TO "p_j" ## UPDATE: THEY ARE NOT EQUIVALENT.
probability = calculate_posterior(p.xj_n, p.xj_nbar, alpha, beta, y_j, n, m_j, x_j)) %>%
dplyr::select(-c(n, x_j, p_j, y_j, m_j, alpha, beta, pj.k, p.xj_nbar, p.xj_n))
}) %>%
purrr::set_names(nm = names(modules_list))
return(posterior_results)
}
#' @importFrom magrittr "%>%"
#' @export
get_gene_counts_from <- function(userData) {
input_data <- userData %>%
dplyr::ungroup() %>%
{if ('genome_name' %in% colnames(.))
dplyr::select(., k_number, gene_name, genome_name)
else if ('metagenome_name' %in% colnames(.))
dplyr::select(., k_number, gene_name, taxonomy)
else stop(cli::cli_alert_danger('Error: either "genome_name" or "metagenome_name" column is missing from the input data.'))
} %>%
dplyr::rowwise() %>%
dplyr::mutate(k_numbers = list(stringr::str_extract_all(
string = k_number,
pattern = patt.kegg_modules$k_numbers)),
k_numbers = list(purrr::map(k_numbers, ~
if (length(.x) == 0) {.x <- NA_character_
} else {paste0(.x, collapse = ';')})),
x_j.k_numbers = list(dplyr::tibble(k_numbers) %>%
dplyr::mutate(step = patt.kegg_modules$step) %>%
dplyr::group_by(step) %>%
dplyr::summarize(k_numbers = paste0(k_numbers[!is.na(k_numbers)], collapse = ' '), .groups = 'drop') %>%
dplyr::select(-step) %>%
dplyr::mutate(k_numbers = stringr::str_replace(k_numbers, stringr::regex('^$'), NA_character_),
x_j = dplyr::if_else(is.na(k_numbers), 0, (stringr::str_count(k_numbers, pattern = ' ') + 1))))) %>%
dplyr::ungroup()
gene_counts.list <- list()
gene_counts.list <- purrr::map(1:length(input_data$x_j.k_numbers), ~ {
gene_counts.list[[.x]] <- input_data$x_j.k_numbers[[.x]]
}) %>%
{if ('genome_name' %in% colnames(userData))
purrr::set_names(., nm = userData$genome_name)
else if ('metagenome_name' %in% colnames(userData))
purrr::set_names(., nm = input_data$taxonomy)
else stop(cli::cli_alert_danger("Error: 'genome_name' or 'metagenome_name' column is missing from input data."))
}
return(gene_counts.list)
}
# previous version, deprecated: 04/17/21
#get.x_j <- function(userData) {
#  input_data <- userData %>%
#    dplyr::ungroup() %>%
#    {if ('genome_name' %in% colnames(userData))
#      dplyr::select(., k_number, genome_name)
#      else dplyr::select(., k_number, taxonomy)
#    } %>%
#    dplyr::rowwise() %>%
#    dplyr::mutate(x_j = list(as.integer(stringr::str_detect(
#      string = k_number,
#      pattern = patt.kegg_modules$k_numbers)))) %>%
#    dplyr::ungroup() %>%
#    dplyr::mutate(x_j = purrr::map(x_j, ~
#                                     dplyr::tibble(x_j = .x) %>%
#                                     dplyr::mutate(step = patt.kegg_modules$step) %>%
#                                     dplyr::group_by(step) %>%
#                                     dplyr::summarize(x_j = sum(x_j), .groups = 'drop') %>%
#                                     dplyr::select(-step)))
#  gene_counts.list <- list()
#  gene_counts.list <- purrr::map(1:length(input_data$x_j), ~ {
#    gene_counts.list[[.x]] <- input_data$x_j[[.x]][[1]]
#  }) %>%
#    {if ('genome_name' %in% colnames(userData))
#      purrr::set_names(., nm = userData$genome_name)
#      else if ('metagenome_name' %in% colnames(userData))
#    purrr::set_names(., nm = input_data$taxonomy)
#      else stop(cli::cli_alert_danger("Error: 'genome_name' or 'metagenome_name' column is missing from input data."))
#    }
#  return(gene_counts.list)
#}
#previous version - deprecated
#get.x_j <- function(userData) {
#  input_data <- userData %>%
#    dplyr::ungroup() %>%
#    {if ('genome_name' %in% colnames(userData))
#      dplyr::select(., k_number, genome_name) %>%
#        tibble::column_to_rownames(var = 'genome_name')
#      else dplyr::select(., k_number, taxonomy) %>%
#        tibble::column_to_rownames(var = 'taxonomy')} %>%
#    t() %>%
#    dplyr::as_tibble(~ vctrs::vec_as_names(repair = "unique", quiet = TRUE))
#
#  x_j.tibble <- patt.kegg_modules %>%
#    dplyr::bind_cols(input_data) %>% # binding COLUMNS, not ROWS of the input data with the patt.kegg_modules tibble
#    dplyr::group_by(step, k_numbers) %>%
#    dplyr::summarize(dplyr::across(!1:3, ~ as.integer(stringr::str_detect(
#      string = .x, pattern = k_numbers))), .groups = 'keep') %>%
#    dplyr::ungroup(k_numbers) %>%
#    dplyr::select(-c(k_numbers)) %>%
#    dplyr::summarize(dplyr::across(dplyr::everything(), ~ sum(.x)), .groups = 'drop') %>%
#    dplyr::select(-step)
#
#  gene_counts.list <- list()
#  gene_counts.list <- purrr::map(1:length(x_j.tibble), ~ {
#    gene_counts.list[[.x]] <- x_j.tibble[[.x]]
#  }) %>%
#    purrr::set_names(nm = names(x_j.tibble))
#  return(gene_counts.list)
#}
#' @export
map_modules_to <- function(gene_counts.list, userData, strict = FALSE) {
modules_list <- list()
modules_list <- purrr::map(1:length(gene_counts.list), ~ {
modules_list[[.x]] <- all_kegg_modules %>%
dplyr::ungroup() %>%
#dplyr::mutate(x_j = gene_counts.list[[.x]]) %>%
dplyr::bind_cols(gene_counts.list[[.x]]) %>%
dplyr::relocate(k_numbers, .after = rule) %>%
dplyr::mutate(taxonomy = userData$taxonomy[.x], .before = 1) %>%
{if (unique(userData$data_type) == 'genome') dplyr::mutate(., 'genome_name' = userData$genome_name[.x], .after = 1)
else if (unique(userData$data_type) == 'metagenome') dplyr::mutate(., 'metagenome_name' = userData$metagenome_name[.x], .after = 1)
else stop (cli::cli_alert_danger('Error: data_type was not interpreted; input data must be one or more genomes or metagenomes.'))} %>%
dplyr::mutate(domain = get_domain(userData$taxonomy[.x]), .after = 1) %>%
get_lowest_taxonomy() %>%
dplyr::mutate(module_step_present = dplyr::case_when(n == x_j ~ TRUE, n != x_j ~ FALSE),
p_j = userData$completeness[.x]) %>%
dplyr::arrange(step) %>%
dplyr::group_by(module) %>%
{if (strict == TRUE) dplyr::filter(., !all(module_step_present == FALSE)) else (.)} # filters out pathways for which there is no evidence of their presence in the gene annotations
}) %>%
purrr::set_names(nm = names(gene_counts.list))
return(modules_list)
}
get_domain <- function(taxonomy) { #NOTE: some columns of bact_ & arch_phylo_key contain NA, hence the na.omit()
if (purrr::some(1:6, ~ {
any(stringr::str_detect(na.omit(bact_phylo_key[[.x]]), stringr::regex(paste0('^', taxonomy, '$'), ignore_case = TRUE)))})) {
domain = 'Bacteria'
} else if (purrr::some(1:6, ~ {
any(stringr::str_detect(na.omit(arch_phylo_key[[.x]]), stringr::regex(paste0('^', taxonomy, '$'), ignore_case = TRUE)))})) {
domain = 'Archaea'
} else {
domain = 'Unknown'
}
return(domain)
}
get_lowest_taxonomy <- function(.data) {
if (unique(.data$domain) == 'Bacteria') {
search_tree(.data, bact_phylo_key, .list_num = 1, .domain = 'Bacteria_')
} else if (unique(.data$domain) == 'Archaea') {
search_tree(.data, arch_phylo_key, .list_num = 2, .domain = 'Archaea_')
} else {
dplyr::mutate(.data, taxonomy_used = 'Unknown')
}
}
search_tree <- function(.data, taxonomy_key, .list_num, .domain) {
indices <- taxonomy_key %>% #find out exactly where taxonomy matches are in taxonomic table keys
purrr::map(~ {stringr::str_detect(.x, stringr::regex(paste0('^', unique(.data$taxonomy), '$'), ignore_case = TRUE))}) %>%
purrr::map(which) %>%
purrr::keep(~ !is_empty(.x))
if (!purrr::is_empty(indices)) { #extract taxonomy from key, including higher levels up to root (domain)
possible_taxa <- taxonomy_key %>%
dplyr::slice(purrr::pluck(indices, 1, 1)) %>%
dplyr::select(purrr::pluck(indices, names, 1):6)
for (.x in seq_along(possible_taxa)) {
if (is.na(possible_taxa[[.x]][1])) {
next
} else {
if (any(stringr::str_detect(
colnames(priors_list[[.list_num]][[paste0(.domain, names(possible_taxa)[.x])]]),
possible_taxa[[.x]][1]))) {
.data <- .data %>%
dplyr::mutate(taxonomy_used = possible_taxa[[.x]][1])
break
} else {
.data <- .data %>%
dplyr::mutate(taxonomy_used = 'Unknown')
}
}
}
} else {
.data <- .data %>%
dplyr::mutate(taxonomy_used = 'Unknown')
}
return(.data)
}
## pulls y_j, m_j, alpha, and beta
#' @export
get_parameters <- function(data_list, moduleVector = NULL, strict = strict)  {
if (strict == TRUE) {
data_list <- purrr::keep(data_list, ~ nrow(.x) > 0)
}
input_list <- list(bact_list = data_list %>% purrr::keep(~ .x$domain[1] == 'Bacteria'),
arch_list = data_list %>% purrr::keep(~ .x$domain[1] == 'Archaea'),
unk_list = data_list %>% purrr::keep(~ .x$domain[1] == 'Unknown'))
res_list <- list() #1:2 for bact and arch_lists; unk needs its own section
purrr::map_if(seq_along(input_list), ~ length(input_list[[.x]]) != 0, ~ {
res_list[[.x]] <- list()
purrr::map(1:length(input_list[[.x]]), function(cur) {
cur_org <- input_list[[.x]][[cur]]
cur_org <- cur_org %>% #cur_org is a grouped tibble for the current MAG/metagenome contig cluster
dplyr::ungroup() #%>%
#{if (!is.null(moduleVector)) dplyr::filter(., module %in% moduleVector) else (.)}
cur_org.list <- list(present = dplyr::filter(cur_org, module_step_present == TRUE),
absent = dplyr::filter(cur_org, module_step_present == FALSE)) # split cur_org into a list of 2 tibbles based on module presence/absence
#message('Working on: ', cur_org$lowest[1])
full_indices <- purrr::map_depth(priors_list[[.x]], .depth = 1, function(.cur_priors) {
purrr::map_lgl(colnames(.cur_priors), function(.column_name) {
stringr::str_detect(.column_name, stringr::regex(paste0('^', cur_org$taxonomy_used[1], '$')))
}) %>%
which()
})
#1st: gets position of list element with first regex match; 2nd: gets position of column within list element containing first regex match
lowest_index <- c(purrr::detect_index(full_indices, ~ !purrr::is_empty(.x)), purrr::detect(full_indices, ~ !purrr::is_empty(.x)))
cur_org.list[['absent']] <- cur_org.list[['absent']] %>%
dplyr::mutate(y_j = get_yj(modules_contained_y[[names(full_indices)[lowest_index[1]]]], cur_org$taxonomy_used[1], step_col = .$step),
m_j = get_mj(collection_lengths_m[[names(full_indices)[lowest_index[1]]]], cur_org$taxonomy_used[1])) %>%
dplyr::left_join(dplyr::select(priors_list[[.x]][[names(full_indices)[lowest_index[1]]]], step, lowest_index[2]) %>%
tidyr::separate_rows(dplyr::everything(), sep = ' '), by = 'step') %>%
#dplyr::rename(parameters = 16) %>% ### POSITION-BASED STEP- MUST CHANGE IF CODE IS UPDATED
dplyr::rename(parameters = 17) %>%
tidyr::separate(parameters, into = c('alpha', 'beta'), sep = ';') %>%
dplyr::mutate(dplyr::across(c(alpha, beta), ~ as.numeric(.x)))
cur_org.list[['present']] <- cur_org.list[['present']] %>%
dplyr::mutate(y_j = NA, m_j = NA, alpha = NA, beta = NA)
res_list[[.x]][[cur]] <- cur_org.list[['absent']] %>%
dplyr::bind_rows(cur_org.list[['present']]) %>%
dplyr::arrange(module, step) %>%
{if (!is.null(moduleVector)) dplyr::filter(., module %in% moduleVector) else (.)}
#return(res_list)
})
}) %>%
rlang::squash() %>%
suppressWarnings() %>%
purrr::keep(~ is_tibble(.x)) %>%
purrr::set_names(nm = names(data_list))
}
get_yj <- function(y_list, taxonomy, step_col = NULL) {
y_j <- y_list %>%
dplyr::select(dplyr::matches(paste0('^', taxonomy, '$'), ignore.case = TRUE), step, module) %>%
dplyr::filter(step %in% step_col) %>%
dplyr::select(-c(module, step))
return(y_j[[1]])
}
get_mj <- function(m_list, taxonomy) {
m_j <- m_list %>%
dplyr::filter(.[[1]] == taxonomy) %>%
select(-1)
return(m_j[[1]])
}
load('R/sysdata.rda')
step1 = MetaPredict::get_gene_counts_from(gen)
results1 <- map_modules_to(step1, gen, strict = FALSE) # this function should be split into 2 parts
results2 <- get_parameters(results1, strict = FALSE)
results3 <- get_posteriors(results2, strict = FALSE)
View(results3)
View(results2)
View(results1)
#' This function is used to reconstruct metabolic pathways based on present KEGG Orthology terms. For any
#' incomplete pathways with missing reactions, it will then calculate the probability that each missing reaction
#' is present in the input genome but was missed in the sampling process. It takes in user input in the form of
#' an object created with a read_data function call.
#' @param userData Created with the read_data function - KEGG Orthology data for one or more bacteria/archaea
#' @param output_dir The full or relative path to an output directory where result and summary output will be saved as TSV flatfiles
#' @param moduleVector An optional vector of specific KEGG Modules to scan user annotations and calculate probabilities for
#' @importFrom magrittr "%>%"
#' @export
MetaPredict <- function(userData, output_dir = NULL, moduleVector = NULL, strict = FALSE) {
cli::cli_h1('Starting MetaPredict')
cli::cli_alert_info('Formatting input data...')
if (missing(userData)) {
cli::cli_alert_danger('Input userData not detected in global environment. Make sure you have run read_genome_data() or read_metagenome_data() on your data and have listed your input data object for the userData argument.')
stop()
}
cli::cli_alert_info('Reconstructing metabolic pathways and performing prediction calculations...')
gene_counts.list <- get_gene_counts_from(userData)
results <- map_modules_to(gene_counts.list, userData, strict = strict)# this function should be split into 2 parts
results <- get_parameters(results, moduleVector = moduleVector, strict = strict)
results <- get_posteriors(results, strict = strict)
if (unique(userData$data_type) == 'metagenome') {
results <- results %>%
dplyr::bind_rows() %>%
dplyr::arrange(module_class, step) %>%
dplyr::mutate(metagenome_name = unique(userData$metagenome_name)) # needs updating - to allow for multiple metagenomes as input...!
summary_information <- summarize_metagenome_output(results)
#heatmaps <- create_heatmaps_from(results, userData, metagenome = TRUE)
output <- list(list('summary' = summary_information, 'full_results' = results)) %>% #, heatmaps)) %>%
purrr::set_names(unique(userData$metagenome_name))
if (is.null(output_dir)) {
cli::cli_alert_success('Finished KEGG metabolic pathway reconstruction and KEGG Module probability calculations. Output is in a list.')
cli::cli_alert_info('Enter View(results[[(x)]][[1]]) to look at summary information, View(results[[(x)]][[2]] for the full results.') #, and print(results[[(x)]][[3]]) for pathway completion heatmaps.')
cli::cli_alert_warning('Make sure to change (x) to a number between 1 and x, with x equal to the total amount of input genome annotations.')
cli::cli_alert_info("To save results, run the following command: save_results(output_dir = '/path/to/output/directory'). Note: the output directory will be created if it does not exist.")
cli::cli_h1('All done.')
return(output)
}
} else {
summary_information <- summarize_genome_output(results)
#heatmaps <- purrr::map(results, ~ {create_heatmaps_from(.x, userData)})
output <- purrr::transpose(list('summary' = summary_information, 'full_results' = results)) #, heatmaps))
if (is.null(output_dir)) {
cli::cli_alert_success('Finished KEGG metabolic pathway reconstruction and reaction probability calculations. Output is in a list.')
cli::cli_alert_info('Enter View(results[[(x)]][[1]]) to look at summary information, View(results[[(x)]][[2]] for the full results.') #, and print(results[[(x)]][[3]]) for pathway completion heatmaps.')
cli::cli_alert_warning('Make sure to change (x) to a number from 1 to x, with x equal to the total amount of input genome/metagenome inputs')
cli::cli_alert_info("To save results, run the following command: save_results(output_dir = '/path/to/output/directory/'). Note: the output directory will be created if it does not exist.")
cli::cli_h1('All done.')
return(output)
}
}
if (!is.null(output_dir)) {
save_results(output, output_dir)
cli::cli_alert_success('Finished KEGG metabolic pathway reconstruction and reaction probability calculations. Output is in directory: {output_dir}')
cli::cli_h1('All done.')
return(output)
}
}
## ADD GENOME/METAGENOME NAME AS A COLUMN
summarize_genome_output <- function(.data) {
.data <- purrr::map(seq_along(.data), ~ {
.data[[.x]] <- .data[[.x]] %>%
dplyr::filter(!(duplicated(step))) %>%
dplyr::group_by(module) %>%
dplyr::add_tally(module_step_present == TRUE, name = 'steps_present') %>%
dplyr::add_tally(length(module), name = 'module_length') %>%
dplyr::add_tally(module_step_present == FALSE, name = 'predicted') %>%
dplyr::add_tally(probability >= 0.90, name = 'p_greater_90') %>%
dplyr::select(taxonomy, taxonomy_used, module_name, module_class, module, steps_present, module_length,
predicted, p_greater_90) %>%
dplyr::distinct() %>%
dplyr::mutate('Module steps present' = paste(steps_present, module_length, sep = '/'),
'Module steps predicted' = paste(predicted, module_length, sep = '/'),
'Predictions (P > 0.90)' = paste(p_greater_90, module_length, sep = '/'),
'Predicted completeness (P > 0.90)' = paste(steps_present+p_greater_90, module_length, sep = '/')) %>%
dplyr::rename('Module name' = module_name, 'Module class' = module_class, 'Module' = module, 'Taxonomy' = taxonomy) %>%
dplyr::select(-c(steps_present, module_length, p_greater_90, predicted))
})
return(.data)
}
summarize_metagenome_output <- function(.data) {
.data %>%
dplyr::filter(!(duplicated(step))) %>%
dplyr::group_by(module, taxonomy_used) %>%
dplyr::add_tally(module_step_present == TRUE, name = 'steps_present') %>%
dplyr::add_tally(length(module), name = 'module_length') %>%
dplyr::add_tally(module_step_present == FALSE, name = 'predicted') %>%
dplyr::add_tally(probability >= 0.90, name = 'p_greater_90') %>%
dplyr::select(taxonomy, taxonomy_used, module_name, module_class, module, steps_present, module_length,
predicted, p_greater_90) %>%
dplyr::distinct() %>%
dplyr::mutate('Module steps present' = paste(steps_present, module_length, sep = '/'),
'Module steps predicted' = paste(predicted, module_length, sep = '/'),
'Predictions (P > 0.90)' = paste(p_greater_90, module_length, sep = '/'),
'Predicted completeness (P > 0.90)' = paste(steps_present + p_greater_90, module_length, sep = '/')) %>%
dplyr::rename('Module name' = module_name, 'Module class' = module_class, 'Module' = module, 'Taxonomy' = taxonomy) %>%
dplyr::select(-c(steps_present, module_length, p_greater_90, predicted))
}
#' @export
save_results <- function(output, output_dir) {
if (!dir.exists(output_dir)) {
cli::cli_alert_warning('Creating output directory {output_dir}')
dir.create(output_dir)
}
if (!stringr::str_detect(output_dir, '.*/$')) {
output_dir <- sub('(.*)', '\\1\\/', output_dir, perl = TRUE)
}
purrr::map(1:length(output), ~ {
readr::write_tsv(output[[.x]][[1]], file = paste0(output_dir, names(output)[.x], '_summary-information.tsv'))
readr::write_tsv(output[[.x]][[2]], file = paste0(output_dir, names(output)[.x], '_results.tsv'))
#png(filename = paste0(output_dir, names(output)[.x], '-heatmaps.png'), units = 'in', width = 30, height = 10, res = 500)
#print(output[[.x]][[3]])
#dev.off()
})
}
test.final <- MetaPredict(gen)
View(test.final)
#' This function is used to reconstruct metabolic pathways based on present KEGG Orthology terms. For any
#' incomplete pathways with missing reactions, it will then calculate the probability that each missing reaction
#' is present in the input genome but was missed in the sampling process. It takes in user input in the form of
#' an object created with a read_data function call.
#' @param userData Created with the read_data function - KEGG Orthology data for one or more bacteria/archaea
#' @param output_dir The full or relative path to an output directory where result and summary output will be saved as TSV flatfiles
#' @param moduleVector An optional vector of specific KEGG Modules to scan user annotations and calculate probabilities for
#' @importFrom magrittr "%>%"
#' @export
MetaPredict <- function(userData, output_dir = NULL, moduleVector = NULL, strict = FALSE) {
cli::cli_h1('Starting MetaPredict')
cli::cli_alert_info('Formatting input data...')
if (missing(userData)) {
cli::cli_alert_danger('Input userData not detected in global environment. Make sure you have run read_genome_data() or read_metagenome_data() on your data and have listed your input data object for the userData argument.')
stop()
}
cli::cli_alert_info('Reconstructing metabolic pathways and performing prediction calculations...')
gene_counts.list <- get_gene_counts_from(userData)
results <- map_modules_to(gene_counts.list, userData, strict = strict)# this function should be split into 2 parts
results <- get_parameters(results, moduleVector = moduleVector, strict = strict)
results <- get_posteriors(results, strict = strict)
if (unique(userData$data_type) == 'metagenome') {
results <- results %>%
dplyr::bind_rows() %>%
dplyr::arrange(module_class, step) %>%
dplyr::mutate(metagenome_name = unique(userData$metagenome_name)) # needs updating - to allow for multiple metagenomes as input...!
summary_information <- summarize_metagenome_output(results)
#heatmaps <- create_heatmaps_from(results, userData, metagenome = TRUE)
output <- list(list('summary' = summary_information, 'full_results' = results)) %>%
purrr::set_names(unique(userData$metagenome_name))
if (is.null(output_dir)) {
cli::cli_alert_success('Finished KEGG metabolic pathway reconstruction and KEGG Module probability calculations. Output is in a list.')
cli::cli_alert_info('Enter View(results[[(x)]][[1]]) to look at summary information, View(results[[(x)]][[2]] for the full results.')
cli::cli_alert_warning('Make sure to change (x) to a number between 1 and x, with x equal to the total amount of input genome annotations.')
cli::cli_alert_info("To save results, run the following command: save_results(output_dir = '/path/to/output/directory'). Note: the output directory will be created if it does not exist.")
cli::cli_h1('All done.')
return(output)
}
} else {
summary_information <- summarize_genome_output(results)
output <- purrr::transpose(list('summary' = summary_information, 'full_results' = results)) %>%
purrr::set_names(nm = names(results))
if (is.null(output_dir)) {
cli::cli_alert_success('Finished KEGG metabolic pathway reconstruction and reaction probability calculations. Output is in a list.')
cli::cli_alert_info('Enter View(results[[(x)]][[1]]) to look at summary information, View(results[[(x)]][[2]] for the full results.')
cli::cli_alert_warning('Make sure to change (x) to a number from 1 to x, with x equal to the total amount of input genome/metagenome inputs')
cli::cli_alert_info("To save results, run the following command: save_results(output_dir = '/path/to/output/directory/'). Note: the output directory will be created if it does not exist.")
cli::cli_h1('All done.')
return(output)
}
}
if (!is.null(output_dir)) {
save_results(output, output_dir)
cli::cli_alert_success('Finished KEGG metabolic pathway reconstruction and reaction probability calculations. Output is in directory: {output_dir}')
cli::cli_h1('All done.')
return(output)
}
}
## ADD GENOME/METAGENOME NAME AS A COLUMN
summarize_genome_output <- function(.data) {
.data <- purrr::map(seq_along(.data), ~ {
.data[[.x]] <- .data[[.x]] %>%
dplyr::filter(!(duplicated(step))) %>%
dplyr::group_by(module) %>%
dplyr::add_tally(module_step_present == TRUE, name = 'steps_present') %>%
dplyr::add_tally(length(module), name = 'module_length') %>%
dplyr::add_tally(module_step_present == FALSE, name = 'predicted') %>%
dplyr::add_tally(probability >= 0.90, name = 'p_greater_90') %>%
dplyr::select(taxonomy, taxonomy_used, module_name, module_class, module, steps_present, module_length,
predicted, p_greater_90) %>%
dplyr::distinct() %>%
dplyr::mutate('Module steps present' = paste(steps_present, module_length, sep = '/'),
'Module steps predicted' = paste(predicted, module_length, sep = '/'),
'Predictions (P > 0.90)' = paste(p_greater_90, module_length, sep = '/'),
'Predicted completeness (P > 0.90)' = paste(steps_present+p_greater_90, module_length, sep = '/')) %>%
dplyr::rename('Module name' = module_name, 'Module class' = module_class, 'Module' = module, 'Taxonomy' = taxonomy) %>%
dplyr::select(-c(steps_present, module_length, p_greater_90, predicted))
})
return(.data)
}
summarize_metagenome_output <- function(.data) {
.data %>%
dplyr::filter(!(duplicated(step))) %>%
dplyr::group_by(module, taxonomy_used) %>%
dplyr::add_tally(module_step_present == TRUE, name = 'steps_present') %>%
dplyr::add_tally(length(module), name = 'module_length') %>%
dplyr::add_tally(module_step_present == FALSE, name = 'predicted') %>%
dplyr::add_tally(probability >= 0.90, name = 'p_greater_90') %>%
dplyr::select(taxonomy, taxonomy_used, module_name, module_class, module, steps_present, module_length,
predicted, p_greater_90) %>%
dplyr::distinct() %>%
dplyr::mutate('Module steps present' = paste(steps_present, module_length, sep = '/'),
'Module steps predicted' = paste(predicted, module_length, sep = '/'),
'Predictions (P > 0.90)' = paste(p_greater_90, module_length, sep = '/'),
'Predicted completeness (P > 0.90)' = paste(steps_present + p_greater_90, module_length, sep = '/')) %>%
dplyr::rename('Module name' = module_name, 'Module class' = module_class, 'Module' = module, 'Taxonomy' = taxonomy) %>%
dplyr::select(-c(steps_present, module_length, p_greater_90, predicted))
}
#' @export
save_results <- function(output, output_dir) {
if (!dir.exists(output_dir)) {
cli::cli_alert_warning('Creating output directory {output_dir}')
dir.create(output_dir)
}
if (!stringr::str_detect(output_dir, '.*/$')) {
output_dir <- sub('(.*)', '\\1\\/', output_dir, perl = TRUE)
}
purrr::map(1:length(output), ~ {
readr::write_tsv(output[[.x]][[1]], file = paste0(output_dir, names(output)[.x], '_summary-information.tsv'))
readr::write_tsv(output[[.x]][[2]], file = paste0(output_dir, names(output)[.x], '_results.tsv'))
#png(filename = paste0(output_dir, names(output)[.x], '-heatmaps.png'), units = 'in', width = 30, height = 10, res = 500)
#print(output[[.x]][[3]])
#dev.off()
})
}
test.final <- MetaPredict(gen)
View(test.final)
View(test.final[["genome1"]][["summary"]])
devtools::document()
devtools::install_github('d-mcgrath/MetaPredict-HPC', subdir = 'MetaPredict',
auth_token = '707963548b6b2faf537f0e9790b9156853752d16')
devtools::document()
devtools::install_github('d-mcgrath/MetaPredict-HPC', subdir = 'MetaPredict',
auth_token = '707963548b6b2faf537f0e9790b9156853752d16')
load('R/sysdata.rda')
saveRDS('allk')
saveRDS(all_kegg_modules, file = 'from-041921-all_kegg_modules.RDA')
getwd()
