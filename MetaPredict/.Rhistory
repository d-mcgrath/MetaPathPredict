#library(bundle) - doesn't work with xgboost - gives an error
gx = gM00001
# issue is in the coefficients
gx$coefs$preproc = NULL
size(serialize(gx, NULL))
View(gx)
#library(bundle) - doesn't work with xgboost - gives an error
gx = gM00001
View(gx$coefs$preproc)
View(gx$coefs$preproc$terms)
gx$coefs$preproc$terms[[3]]
gx$coefs$preproc$terms[[3]] |> butcher::butcher()
gx$coefs$preproc$terms[[3]]
#library(bundle) - doesn't work with xgboost - gives an error
gx = gM00001
# issue is in the coefficients
gx$coefs$preproc$terms = NULL
size(serialize(gx, NULL))
#library(bundle) - doesn't work with xgboost - gives an error
gx = gM00001
View(gx$coefs$preproc$terms)
soze(gx$coefs$preproc$terms)
size(gx$coefs$preproc$terms)
size(serialize(gx$coefs$preproc$terms, NULL))
#library(bundle) - doesn't work with xgboost - gives an error
gx = gM00001
# issue is in the coefficients
gx$coefs$preproc$terms = NULL
size(serialize(gx, NULL))
saveRDS(gx, file = '~/Downloads/test_model_dec5_2022.rds')
#fn to load a model, and remove info not reqd for predictions on new data
load_and_trim = function(model) {
mod = readRDS(model)
mod$member_fits[str_detect(names(mod$member_fits), 'xgboost')] =
mod$member_fits[str_detect(names(mod$member_fits), 'xgboost')] %>%
map(~ shrink_xgb_recipe(.x))
mod$member_fits[str_detect(names(mod$member_fits), 'nnet')] =
mod$member_fits[str_detect(names(mod$member_fits), 'nnet')] %>%
map(~ shrink_nnet_recipe(.x))
mod = shrink_modeldefs(mod)
# 12/5/2022 addition - removing problematic 'terms' data
mod$coefs$preproc$terms = NULL
#assign(model_name, mod, envir = .GlobalEnv)
#rm(mod)
#return(get(model_name))
#return(assign(model_name, mod))
return(mod)
}
models
# create empty SQLite database called "model_sqlite.db"
model_db <- dbConnect(drv = RSQLite::SQLite(),
dbname = "/vortexfs1/omics/pachiadaki/dgellermcgrath/ensemble/sql_db/final_model_database_sqlite_dec_4_2022.db")
# create empty SQLite database called "model_sqlite.db"
model_db <- RSQLite::dbConnect(drv = RSQLite::SQLite(),
dbname = "/vortexfs1/omics/pachiadaki/dgellermcgrath/ensemble/sql_db/final_model_database_sqlite_dec_4_2022.db")
# create empty SQLite database called "model_sqlite.db"
model_db <- RSQLite::dbConnect(drv = RSQLite::SQLite(),
dbname = 'model_sqlite.db') #"/vortexfs1/omics/pachiadaki/dgellermcgrath/ensemble/sql_db/final_model_database_sqlite_dec_4_2022.db")
# create a table in SQL database: col 1 = model name, col 2 = raw model
# raw model is basically the whole model saved as a binary "blob"
RSQLite::dbSendQuery(conn = model_db,
"CREATE TABLE models (model_name CHARACTER, raw_model BLOB)")
models
#library(bundle) - doesn't work with xgboost - gives an error
gx = gM00001
# issue is in the coefficients
gx$coefs$preproc$terms = NULL
size(serialize(gx, NULL))
#fn to load a model, and remove info not reqd for predictions on new data
load_and_trim = function(model) {
mod = readRDS(model)
mod$member_fits[str_detect(names(mod$member_fits), 'xgboost')] =
mod$member_fits[str_detect(names(mod$member_fits), 'xgboost')] %>%
map(~ shrink_xgb_recipe(.x))
mod$member_fits[str_detect(names(mod$member_fits), 'nnet')] =
mod$member_fits[str_detect(names(mod$member_fits), 'nnet')] %>%
map(~ shrink_nnet_recipe(.x))
mod = shrink_modeldefs(mod)
# 12/5/2022 addition - removing problematic 'terms' data
mod$coefs$preproc$terms = NULL
#assign(model_name, mod, envir = .GlobalEnv)
#rm(mod)
#return(get(model_name))
#return(assign(model_name, mod))
return(mod)
}
models
#library(bundle) - doesn't work with xgboost - gives an error
gx = gM00001
# issue is in the coefficients
gx$coefs$preproc$terms = NULL
#' for each model:
#' load the model; trim unneccessary components;
#' save it as a row in the SQL table; remove model from memory
for (x in seq_along('gx')) {
assign(model_names[x], load_and_trim(models[x]))
RSQLite::dbExecute(model_db,
'INSERT INTO models VALUES (:model_name, :raw_model)',
params = list(
model_name = model_names[x],
raw_model = list(serialize(get(model_names[x]), NULL))
))
rm(list = model_names[x])
}
models
models = 'gx'
for (x in seq_along(models)) {
assign(model_names[x], load_and_trim(models[x]))
RSQLite::dbExecute(model_db,
'INSERT INTO models VALUES (:model_name, :raw_model)',
params = list(
model_name = model_names[x],
raw_model = list(serialize(get(model_names[x]), NULL))
))
rm(list = model_names[x])
}
models
model_db
getwd()
model_names
model_names = 'gx'
for (x in seq_along(models)) {
assign(model_names[x], load_and_trim(models[x]))
RSQLite::dbExecute(model_db,
'INSERT INTO models VALUES (:model_name, :raw_model)',
params = list(
model_name = model_names[x],
raw_model = list(serialize(get(model_names[x]), NULL))
))
rm(list = model_names[x])
}
seq_along(models)
for (x in seq_along(models)) {
assign(model_names[x], load_and_trim(models[x]))
RSQLite::dbExecute(model_db,
'INSERT INTO models VALUES (:model_name, :raw_model)',
params = list(
model_name = model_names[x],
raw_model = list(serialize(get(model_names[x]), NULL))
))
rm(list = model_names[x])
}
RSQLite::dbExecute(model_db,
'INSERT INTO models VALUES (:model_name, :raw_model)',
params = list(
model_name = 'gx',
raw_model = list(gx)
))
RSQLite::dbExecute(model_db,
'INSERT INTO models VALUES (:model_name, :raw_model)',
params = list(
model_name = 'gx',
raw_model = list(serialize(gx, NULL))
))
# create a reference obj to the database using dbplyr
model_db_ref = tbl(model_db, 'models')
#check object size
size = function(.data) {
.data %>%
object.size() %>%
format(units = 'Mb')
}
# function to properly index and then unserialize a raw model "blob"
unserialize_model = function(.data) {
unserialize(.data[[1]])
}
model_db_ref
# code to extract a specified raw model from the SQL database and
# then unserialize it/load it into RAM
modelx = model_db_ref %>%
filter(model_name == 'gx') %>%
collect() %>%
pull(raw_model) %>%
unserialize_model()
modelx
is.character(c('m', 'a', 'b'))
gc()
gc()
gc()
gc()
gc()
gc()
gc()
gc()
gc()
gc()
gc()
gc()
gc()
load('data/*')
load('data/all_kegg_modules.rda')
load('data/all_models.rda')
rm(all_models)
load('data/module_metadata.rda')
load('data/patt.kegg_modules.rda')
filler = readRDS('~/Documents/MetaPredict_workflow/rdata_files/column_filler_for_predictions.rds')
all_model_names = readRDS('~/Documents/MetaPredict_workflow/rdata_files/all_model_names_476_dec_2022.rds')
path_to_database = '~/Downloads/metapredict_sql.db'
View(module_metadata)
usethis::use_data(all_kegg_modules,filler,module_metadata,patt.kegg_modules,all_model_names,path_to_database, internal = FALSE)
devtools::document()
devtools::document()
devtools::document()
x = read_data(metadata_df = tibble(
filepath = '~/Downloads/genome_test_metapredict/CarAnox_mtb2-1454-ko.tsv',
genome_name = 'test_genome'
)
)
x
devtools::document()
x = read_data(metadata_df = tibble(
filepath = '~/Downloads/genome_test_metapredict/CarAnox_mtb2-1454-ko.tsv',
genome_name = 'test_genome'
)
)
devtools::document()
x = read_data(metadata_df = tibble(
filepath = '~/Downloads/genome_test_metapredict/CarAnox_mtb2-1454-ko.tsv',
genome_name = 'test_genome'
)
)
x_results = metapredict(x)
all_model_names
x_results = metapredict(x)
path_to_database
x_results = metapredict(x)
named_predict
devtools::document()
x = read_data(metadata_df = tibble(
filepath = '~/Downloads/genome_test_metapredict/CarAnox_mtb2-1454-ko.tsv',
genome_name = 'test_genome'
)
)
x_results = metapredict(x)
devtools::install_github("stevenpawley/recipeselectors")
install.packages('FSelectorRcpp')
devtools::document()
devtools::document()
x = read_data(metadata_df = tibble(
filepath = '~/Downloads/genome_test_metapredict/CarAnox_mtb2-1454-ko.tsv',
genome_name = 'test_genome'
)
)
x_results = metapredict(x, module_vector = 'M00001')
devtools::document()
x = read_data(metadata_df = tibble(
filepath = '~/Downloads/genome_test_metapredict/CarAnox_mtb2-1454-ko.tsv',
genome_name = 'test_genome'
)
)
x_results = metapredict(x, module_vector = 'M00001')
x
x_results
x
x_results
x@annotations_list
x
x_results@summary
x_results@summary |> view()
x_results
View(all_kegg_modules)
View(module_metadata)
x_results = metapredict(x, module_vector = c('M00001', 'M00927'))
c('M00001','M00927')
x_results = metapredict(x, module_vector = c('M00001','M00927'))
available_modules()
load('data/all_kegg_modules.rda')
load('data/all_model_names.rda')
load('data/filler.rda')
load('data/module_metadata.rda')
load('data/path_to_database.rda')
load('data/patt.kegg_modules.rda')
module_metadata
module_metadata |> filter(module %in% all_model_names)
module_metadata = module_metadata |> filter(module %in% all_model_names)
usethis::use_data(all_kegg_modules, filler, module_metadata,patt.kegg_modules,all_model_names,path_to_database, internal = FALSE)
x = read_data(metadata_df = tibble(
filepath = '~/Downloads/genome_test_metapredict/CarAnox_mtb2-1454-ko.tsv',
genome_name = 'test_genome'
)
)
View(module_metadata)
x_results = metapredict(x, module_vector = c('M00001', 'M00596'))
x_results
View(x_results@summary)
input = read_data(metadata_df = tibble(
filepath = '~/Downloads/genome_test_metapredict/CarAnox_mtb2-1454-ko.tsv',
genome_name = 'test_genome'))
results = metapredict(intput, module_vector = c('M00001', 'M00596'))
input = read_data(metadata_df = tibble(
filepath = '~/Downloads/genome_test_metapredict/CarAnox_mtb2-1454-ko.tsv',
genome_name = 'test_genome'))
results = metapredict(input, module_vector = c('M00001', 'M00596'))
devtools::document()
input = read_data(metadata_df = tibble(
filepath = '~/Downloads/genome_test_metapredict/CarAnox_mtb2-1454-ko.tsv',
genome_name = 'test_genome'))
results = metapredict(input, module_vector = c('M00001', 'M00596'))
results
input = read_data(metadata_df = tibble(
filepath = '~/Downloads/genome_test_metapredict/CarAnox_mtb2-1454-ko.tsv',
genome_name = 'test_genome'))
results = metapredict(input, module_vector = c('M00001', 'M00596'))
devtools::document()
devtools::document()
load('data/all_kegg_modules.rda')
load('data/all_model_names.rda')
load('data/filler.rda')
load('data/module_metadata.rda')
load('data/path_to_database.rda')
load('data/patt.kegg_modules.rda')
usethis::use_data(all_kegg_modules,filler,module_metadata,patt.kegg_modules,all_model_names,path_to_database, internal = TRUE)
usethis::use_data(all_kegg_modules,filler,module_metadata,patt.kegg_modules,all_model_names,path_to_database, internal = TRUE)
save(list = ls(), file = '~/Downloads/metapredict_internal_data_from_dec6_2022.rdata')
rm(list = ls())
load('R/sysdata.rda')
rm(list = ls())
load('R/sysdata.rda')
rm(list = ls())
devtools::document()
available_modules()
module_metadata
available_modules()
detach("package:readr", unload = TRUE)
devtools::install_github('d-mcgrath/MetaPredict-HPC', ref = )
devtools::install_github('d-mcgrath/MetaPredict-HPC', ref = 'MetaPredict', auth_token = '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')
devtools::install_github('d-mcgrath/MetaPredict-HPC', auth_token = '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')
devtools::install_github('d-mcgrath/MetaPredict-HPC', auth_token = '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')
devtools::install_github('d-mcgrath/MetaPredict-HPC/MetaPredict', auth_token = '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')
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::install_github('d-mcgrath/MetaPredict-HPC/MetaPredict', auth_token = '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')
library(MetaPredict)
tibble(
filepath = '~/Downloads/genome_test_metapredict/CarAnox_mtb2-1454-ko.tsv',
genome_name = 'test_genome')
library(tidyverse)
tibble(
filepath = '~/Downloads/genome_test_metapredict/CarAnox_mtb2-1454-ko.tsv',
genome_name = 'test_genome')
input = read_data(
metadata_df = tibble(
filepath = '~/Downloads/genome_test_metapredict/CarAnox_mtb2-1454-ko.tsv',
genome_name = 'test_genome')
)
View(input)
View(input@annotations_list[[1]])
results = metapredict(input, module_vector = c('M00001', 'M00596'))
devtools::doc
devtools::document()
devtools::document()
devtools::install_github('d-mcgrath/MetaPredict-HPC/MetaPredict', auth_token = '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')
library(MetaPredict)
library(tidyverse)
input = read_data(
metadata_df = tibble(
filepath = '~/Downloads/genome_test_metapredict/CarAnox_mtb2-1454-ko.tsv',
genome_name = 'test_genome')
)
results = metapredict(input, module_vector = c('M00001', 'M00596'))
devtools::document()
input = read_data(
metadata_df = tibble(
filepath = '~/Downloads/genome_test_metapredict/CarAnox_mtb2-1454-ko.tsv',
genome_name = 'test_genome')
)
library(tidyverse)
input = read_data(
metadata_df = tibble(
filepath = '~/Downloads/genome_test_metapredict/CarAnox_mtb2-1454-ko.tsv',
genome_name = 'test_genome')
)
results = metapredict(input, module_vector = c('M00001', 'M00596'))
available_modules()
results
library(MetaPredict)
results = metapredict(input, module_vector = c('M00001', 'M00596'))
library(tidyverse)
library(MetaPredict)
library(MetaPredict)
input = read_data(
metadata_df = tibble(
filepath = '~/Downloads/genome_test_metapredict/CarAnox_mtb2-1454-ko.tsv',
genome_name = 'test_genome')
)
input = read_data(
metadata_df = data.frame(
filepath = '~/Downloads/genome_test_metapredict/CarAnox_mtb2-1454-ko.tsv',
genome_name = 'test_genome'))
data.frame(
filepath = '~/Downloads/genome_test_metapredict/CarAnox_mtb2-1454-ko.tsv',
genome_name = 'test_genome')
devtools::document()
devtools::document()
input = read_data(
metadata_df = data.frame(
filepath = '~/Downloads/genome_test_metapredict/CarAnox_mtb2-1454-ko.tsv',
genome_name = 'test_genome'))
results = metapredict(input, module_vector = c('M00001', 'M00596'))
input = read_data(
metadata_df = data.frame(
filepath = '~/Downloads/genome_test_metapredict/CarAnox_mtb2-1454-ko.tsv',
genome_name = 'test_genome'))
devtools::document()
input = read_data(
metadata_df = data.frame(
filepath = '~/Downloads/genome_test_metapredict/CarAnox_mtb2-1454-ko.tsv',
genome_name = 'test_genome'))
detect_modules(input)
load('R/sysdata.rda')
detect_modules(input)
detect_modules(input, .modules = all_model_names)
library(tidyverse)
mods = detect_modules(input, .modules = all_model_names)
mods = detect_modules(input@annotations_list, .modules = all_model_names)
mods
kegg_rules = readRDS('~/Documents/MetaPredict_workflow/rdata_files/kegg_rules_prevoiusly_all_kegg_modules.rds')
kegg_rules
kegg_rules = readRDS('~/Documents/MetaPredict_workflow/rdata_files/kegg_rules_prevoiusly_all_kegg_modules.rds')
load('R/sysdata.rda')
usethis::use_data(all_kegg_modules,filler,kegg_rules,module_metadata,patt.kegg_modules,all_model_names,path_to_database, internal = TRUE)
usethis::use_data(all_kegg_modules,filler,kegg_rules,module_metadata,patt.kegg_modules,all_model_names,path_to_database, internal = TRUE, overwrite = TRUE)
devtools::document()
input = read_data(
metadata_df = data.frame(
filepath = '~/Downloads/genome_test_metapredict/CarAnox_mtb2-1454-ko.tsv',
genome_name = 'test_genome'))
new_method = december_detect_modules(input@annotations_list, .modules = all_model_names)
input@annotations_list
rep('~/Downloads/genome_test_metapredict/CarAnox_mtb2-1454-ko.tsv', 2)
genome_name = paste0('test_genome_', 1:2))
paste0('test_genome_', 1:2)
data.frame(
filepath = rep('~/Downloads/genome_test_metapredict/CarAnox_mtb2-1454-ko.tsv', 2),
genome_name = paste0('test_genome_', 1:2)
input = read_data(
input = read_data(
metadata_df = data.frame(
filepath = rep('~/Downloads/genome_test_metapredict/CarAnox_mtb2-1454-ko.tsv', 2),
genome_name = paste0('test_genome_', 1:2)))
input
devtools::document()
input = read_data(
metadata_df = data.frame(
filepath = rep('~/Downloads/genome_test_metapredict/CarAnox_mtb2-1454-ko.tsv', 2),
genome_name = paste0('test_genome_', 1:2)))
# testing module detection methods
old_method = detect_modules(input@annotations_list, .modules = all_model_names)
old_method
new_method = december_detect_modules(input@annotations_list, .modules = all_model_names)
rm(list = ls())
devtools::document()
input = read_data(
metadata_df = data.frame(
filepath = rep('~/Downloads/genome_test_metapredict/CarAnox_mtb2-1454-ko.tsv', 2),
genome_name = paste0('test_genome_', 1:2)))
# testing module detection methods
old_method = detect_modules(input@annotations_list, .modules = all_model_names)
new_method = december_detect_modules(input@annotations_list, .modules = all_model_names)
# testing module detection methods
old_method = detect_modules(input@annotations_list, .modules = all_model_names)
new_method = december_detect_modules(input@annotations_list, .modules = all_model_names)
new_method
old_method
identical(new_method, old_method$pres_abs_tbl)
devtools::document()
input = read_data(
metadata_df = data.frame(
filepath = rep('~/Downloads/genome_test_metapredict/CarAnox_mtb2-1454-ko.tsv', 2),
genome_name = paste0('test_genome_', 1:2)))
results = metapredict(input, module_vector = c('M00001', 'M00596'))
results
devtools::document()
devtools::install_github('d-mcgrath/MetaPredict-HPC/MetaPredict', auth_token = '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')
library(MetaPredict)
input = read_data(
metadata_df = data.frame(
filepath = rep('~/Downloads/genome_test_metapredict/CarAnox_mtb2-1454-ko.tsv', 2),
genome_name = paste0('test_genome_', 1:2)))
results = metapredict(input, module_vector = c('M00001', 'M00596'))
devtools::document()
input = read_data(
metadata_df = data.frame(
filepath = rep('~/Downloads/genome_test_metapredict/CarAnox_mtb2-1454-ko.tsv', 2),
genome_name = paste0('test_genome_', 1:2)))
results = metapredict(input, module_vector = c('M00001', 'M00596'))
results = metapredict(input, module_vector = c('M00001', 'M00596'))
devto
devtools::document()
results = metapredict(input, module_vector = c('M00001', 'M00596'))
devtools::document()
devtools::document()
devtools::install_github('d-mcgrath/MetaPredict-HPC/MetaPredict', auth_token = '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')
library(MetaPredict)
input = read_data(
metadata_df = data.frame(
filepath = rep('~/Downloads/genome_test_metapredict/CarAnox_mtb2-1454-ko.tsv', 2),
genome_name = paste0('test_genome_', 1:2)))
results = metapredict(input, module_vector = c('M00001', 'M00596'))
devtools::document()
devtools::document()
devtools::install_github('d-mcgrath/MetaPredict-HPC/MetaPredict', auth_token = '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')
input = read_data(
metadata_df = data.frame(
filepath = rep('~/Downloads/genome_test_metapredict/CarAnox_mtb2-1454-ko.tsv', 2),
genome_name = paste0('test_genome_', 1:2)))
results = metapredict(input, module_vector = c('M00001', 'M00596'))
devtools::document()
devtools::document()
devtools::install_github('d-mcgrath/MetaPredict-HPC/MetaPredict', auth_token = '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')
