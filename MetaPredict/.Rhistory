dplyr::mutate(dplyr::across(dplyr::everything(), ~ dplyr::case_when(is.na(.x) ~ 0L,
TRUE ~ .x))) %>%
dplyr::bind_cols(dplyr::select(filler, -c(colnames(filler)[colnames(filler) %in% colnames(.)]))) %>%
dplyr::select(colnames(filler)) %>%
dplyr::relocate(colnames(filler)) %>%
mutate(module_step_present = 0, .before = 1)
test.data <- model.matrix(as.formula('module_step_present ~ .'), test.data)[, -1]
predict(all_models$M00004$glmnet.fit,
s = all_models$M00004$lambda.min,
newx = test.data,
type = 'class')
test.data
class(test.data)
test.data <- purrr::map(genome, ~ {
.x %>%
dplyr::mutate(copy_number = 1) %>%
dplyr::group_by(k_number) %>%
dplyr::summarize(copy_number = sum(copy_number), .groups = 'drop') %>%
tidyr::pivot_wider(names_from = k_number, values_from = copy_number) #%>%
#dplyr::mutate(genome_name = .genome_name, .before = 1)
}) %>%
purrr::map_dfr(~ .x) %>%
dplyr::mutate(dplyr::across(dplyr::everything(), ~ as.integer(.x))) %>%
dplyr::mutate(dplyr::across(dplyr::everything(), ~ dplyr::case_when(is.na(.x) ~ 0L,
TRUE ~ .x))) %>%
dplyr::bind_cols(dplyr::select(filler, -c(colnames(filler)[colnames(filler) %in% colnames(.)]))) %>%
dplyr::select(colnames(filler)) %>%
dplyr::relocate(colnames(filler)) %>%
mutate(module_step_present = 0, .before = 1)
test.data
test.data <- purrr::map(genome, ~ {
.x %>%
dplyr::mutate(copy_number = 1) %>%
dplyr::group_by(k_number) %>%
dplyr::summarize(copy_number = sum(copy_number), .groups = 'drop') %>%
tidyr::pivot_wider(names_from = k_number, values_from = copy_number) #%>%
#dplyr::mutate(genome_name = .genome_name, .before = 1)
}) %>%
purrr::map_dfr(~ .x) %>%
dplyr::mutate(dplyr::across(dplyr::everything(), ~ as.integer(.x))) %>%
dplyr::mutate(dplyr::across(dplyr::everything(), ~ dplyr::case_when(is.na(.x) ~ 0L,
TRUE ~ .x))) %>%
dplyr::bind_cols(dplyr::select(filler, -c(colnames(filler)[colnames(filler) %in% colnames(.)]))) %>%
dplyr::select(colnames(filler)) %>%
dplyr::relocate(colnames(filler)) %>%
mutate(module_step_present = 0L, .before = 1)
test.data <- model.matrix(as.formula('module_step_present ~ .'), test.data)[, -1]
predict(all_models$M00004$glmnet.fit,
s = all_models$M00004$lambda.min,
newx = test.data,
type = 'class')
test.data <- purrr::map(genome, ~ {
.x %>%
dplyr::mutate(copy_number = 1) %>%
dplyr::group_by(k_number) %>%
dplyr::summarize(copy_number = sum(copy_number), .groups = 'drop') %>%
tidyr::pivot_wider(names_from = k_number, values_from = copy_number) #%>%
#dplyr::mutate(genome_name = .genome_name, .before = 1)
}) %>%
purrr::map_dfr(~ .x) %>%
dplyr::mutate(dplyr::across(dplyr::everything(), ~ as.integer(.x))) %>%
dplyr::mutate(dplyr::across(dplyr::everything(), ~ dplyr::case_when(is.na(.x) ~ 0L,
TRUE ~ .x))) %>%
dplyr::bind_cols(dplyr::select(filler, -c(colnames(filler)[colnames(filler) %in% colnames(.)]))) %>%
dplyr::select(colnames(filler)) %>%
dplyr::relocate(colnames(filler)) %>%
mutate(module_step_present = 0L, .before = 1)
test.data
test.data <- model.matrix(as.formula('module_step_present ~ .'), test.data)[, -1]
predict(all_models$M00004$glmnet.fit,
s = all_models$M00004$lambda.min,
newx = test.data,
type = 'class')
test.data <- purrr::map(genome, ~ {
.x %>%
dplyr::mutate(copy_number = 1) %>%
dplyr::group_by(k_number) %>%
dplyr::summarize(copy_number = sum(copy_number), .groups = 'drop') %>%
tidyr::pivot_wider(names_from = k_number, values_from = copy_number) #%>%
#dplyr::mutate(genome_name = .genome_name, .before = 1)
}) %>%
purrr::map_dfr(~ .x) %>%
dplyr::mutate(dplyr::across(dplyr::everything(), ~ as.integer(.x))) %>%
dplyr::mutate(dplyr::across(dplyr::everything(), ~ dplyr::case_when(is.na(.x) ~ 0L,
TRUE ~ .x))) %>%
dplyr::bind_cols(dplyr::select(filler, -c(colnames(filler)[colnames(filler) %in% colnames(.)]))) %>%
dplyr::select(colnames(filler)) %>%
dplyr::relocate(colnames(filler)) %>%
mutate(module_step_present = 0L, .before = 1)
test.data <- model.matrix(as.formula('module_step_present ~ .'), test.data)#[, -1]]
predict(all_models$M00004$glmnet.fit,
s = all_models$M00004$lambda.min,
newx = test.data,
type = 'class')
test.data <- purrr::map(genome, ~ {
.x %>%
dplyr::mutate(copy_number = 1) %>%
dplyr::group_by(k_number) %>%
dplyr::summarize(copy_number = sum(copy_number), .groups = 'drop') %>%
tidyr::pivot_wider(names_from = k_number, values_from = copy_number) #%>%
#dplyr::mutate(genome_name = .genome_name, .before = 1)
}) %>%
purrr::map_dfr(~ .x) %>%
dplyr::mutate(dplyr::across(dplyr::everything(), ~ as.integer(.x))) %>%
dplyr::mutate(dplyr::across(dplyr::everything(), ~ dplyr::case_when(is.na(.x) ~ 0L,
TRUE ~ .x))) %>%
dplyr::bind_cols(dplyr::select(filler, -c(colnames(filler)[colnames(filler) %in% colnames(.)]))) %>%
dplyr::select(colnames(filler)) %>%
dplyr::relocate(colnames(filler)) %>%
mutate(module_step_present = 0L, .before = 1)
predict(all_models$M00004$glmnet.fit,
s = all_models$M00004$lambda.min,
newx = test.data,
type = 'class')
predict(all_models$M00004$glmnet.fit,
s = all_models$M00004$lambda.min,
newx = as.matrix(test.data),
type = 'class')
predict(all_models$M00004$glmnet.fit,
s = all_models$M00004$lambda.min,
newx = as.matrix(test.data)[, -1],
type = 'class')
as.matrix(test.data)[, -1]
all(colnames(as.matrix(test.data)[, -1]))
colnames(as.matrix(test.data)[, -1])
colnames((test.data)[, -1])
all(colnames((test.data)[, -1]) == colnames(filler))
test.data <- purrr::map(genome, ~ {
.x %>%
dplyr::mutate(copy_number = 1) %>%
dplyr::group_by(k_number) %>%
dplyr::summarize(copy_number = sum(copy_number), .groups = 'drop') %>%
tidyr::pivot_wider(names_from = k_number, values_from = copy_number) #%>%
#dplyr::mutate(genome_name = .genome_name, .before = 1)
}) %>%
purrr::map_dfr(~ .x) %>%
dplyr::mutate(dplyr::across(dplyr::everything(), ~ as.integer(.x))) %>%
dplyr::mutate(dplyr::across(dplyr::everything(), ~ dplyr::case_when(is.na(.x) ~ 0L,
TRUE ~ .x))) %>%
dplyr::bind_cols(dplyr::select(filler, -c(colnames(filler)[colnames(filler) %in% colnames(.)]))) %>%
dplyr::select(colnames(filler)) %>%
dplyr::relocate(colnames(filler)) %>%
mutate(module_step_present = 0, .before = 1) %>%
mutate(module_step_present = as.factor(module_step_present))
predict(all_models$M00004$glmnet.fit,
s = all_models$M00004$lambda.min,
newx = as.matrix(test.data)[, -1],
type = 'class')
predict(all_models$M00004$glmnet.fit,
s = all_models$M00004$lambda.min,
newx = as.matrix(test.data),
type = 'class')
test.data
test.data <- model.matrix(as.formula('module_step_present ~ .'), test.data)[, -1]]
test.data <- model.matrix(as.formula('module_step_present ~ .'), test.data)[, -1]
predict(all_models$M00004$glmnet.fit,
s = all_models$M00004$lambda.min,
newx = test.data,
type = 'class')
predict(all_models$M00004$glmnet.fit,
s = all_models$M00004$lambda.min,
newx = data.matrix(test.data),
type = 'class')
predict(all_models$M00004$glmnet.fit,
s = all_models$M00004$lambda.min,
newx = data.matrix(test.data)[, -1],
type = 'class')
test.data <- purrr::map(genome, ~ {
.x %>%
dplyr::mutate(copy_number = 1) %>%
dplyr::group_by(k_number) %>%
dplyr::summarize(copy_number = sum(copy_number), .groups = 'drop') %>%
tidyr::pivot_wider(names_from = k_number, values_from = copy_number) #%>%
#dplyr::mutate(genome_name = .genome_name, .before = 1)
}) %>%
purrr::map_dfr(~ .x) %>%
dplyr::mutate(dplyr::across(dplyr::everything(), ~ as.integer(.x))) %>%
dplyr::mutate(dplyr::across(dplyr::everything(), ~ dplyr::case_when(is.na(.x) ~ 0L,
TRUE ~ .x))) %>%
dplyr::bind_cols(dplyr::select(filler, -c(colnames(filler)[colnames(filler) %in% colnames(.)]))) %>%
dplyr::select(colnames(filler)) %>%
dplyr::relocate(colnames(filler)) %>%
mutate(module_step_present = 0, .before = 1) %>%
mutate(module_step_present = as.factor(module_step_present))
predict(all_models$M00004$glmnet.fit,
s = all_models$M00004$lambda.min,
newx = data.matrix(test.data)[, -1],
type = 'class')
predict(all_models$M00004$glmnet.fit,
s = all_models$M00004$lambda.min,
newx = data.matrix(test.data),
type = 'class')
predict(all_models$M00004$glmnet.fit,
s = all_models$M00004$lambda.min,
newx = (test.data),
type = 'class')
recon <- detect_modules(genome)
recon <- detect_modules(genome, .modules = names(all_models))
recon
test.data
test.data <- purrr::map(genome, ~ {
.x %>%
dplyr::mutate(copy_number = 1) %>%
dplyr::group_by(k_number) %>%
dplyr::summarize(copy_number = sum(copy_number), .groups = 'drop') %>%
tidyr::pivot_wider(names_from = k_number, values_from = copy_number) #%>%
#dplyr::mutate(genome_name = .genome_name, .before = 1)
}) %>%
purrr::map_dfr(~ .x) %>%
dplyr::mutate(dplyr::across(dplyr::everything(), ~ as.integer(.x))) %>%
dplyr::mutate(dplyr::across(dplyr::everything(), ~ dplyr::case_when(is.na(.x) ~ 0L,
TRUE ~ .x))) %>%
dplyr::bind_cols(dplyr::select(filler, -c(colnames(filler)[colnames(filler) %in% colnames(.)]))) %>%
dplyr::select(colnames(filler)) %>%
dplyr::relocate(colnames(filler)) %>%
mutate(module_step_present = 0L, .before = 1)
x.test <- as.matrix(test.data)[, -1]
predict(all_models$M00004$glmnet.fit,
s = all_models$M00004$lambda.min,
newx = x.test,
type = 'class')
View(x.test)
x.test <- as.matrix(test.data)
View(x.test)
test.data <- model.matrix(as.formula('module_step_present ~ .'), test.data)[-1,]
predict(all_models$M00004$glmnet.fit,
s = all_models$M00004$lambda.min,
newx = x.test,
type = 'class')
test.data <- purrr::map(genome, ~ {
.x %>%
dplyr::mutate(copy_number = 1) %>%
dplyr::group_by(k_number) %>%
dplyr::summarize(copy_number = sum(copy_number), .groups = 'drop') %>%
tidyr::pivot_wider(names_from = k_number, values_from = copy_number) #%>%
#dplyr::mutate(genome_name = .genome_name, .before = 1)
}) %>%
purrr::map_dfr(~ .x) %>%
dplyr::mutate(dplyr::across(dplyr::everything(), ~ as.integer(.x))) %>%
dplyr::mutate(dplyr::across(dplyr::everything(), ~ dplyr::case_when(is.na(.x) ~ 0L,
TRUE ~ .x))) %>%
dplyr::bind_cols(dplyr::select(filler, -c(colnames(filler)[colnames(filler) %in% colnames(.)]))) %>%
dplyr::select(colnames(filler)) %>%
dplyr::relocate(colnames(filler)) %>%
mutate(module_step_present = 0L, .before = 1)
x.test <- as.matrix(test.data)[-1,]
predict(all_models$M00004$glmnet.fit,
s = all_models$M00004$lambda.min,
newx = x.test,
type = 'class')
x.test <- as.matrix(test.data)[, -1]
predict(all_models$M00004$glmnet.fit,
s = all_models$M00004$lambda.min,
newx = x.test,
type = 'class')
predict(all_models$M00004$glmnet.fit,
s = all_models$M00004$lambda.1se,
newx = x.test,
type = 'class')
rbind(test,.data, test.data)
rbind(test.data, test.data)
x.test <- as.matrix(rbind(test.data, test.data))[, -1]
predict(all_models$M00004$glmnet.fit,
s = all_models$M00004$lambda.1se,
newx = x.test,
type = 'class')
View(x.test)
test.data <- purrr::map(genome, ~ {
.x %>%
dplyr::mutate(copy_number = 1) %>%
dplyr::group_by(k_number) %>%
dplyr::summarize(copy_number = sum(copy_number), .groups = 'drop') %>%
tidyr::pivot_wider(names_from = k_number, values_from = copy_number) #%>%
#dplyr::mutate(genome_name = .genome_name, .before = 1)
}) %>%
purrr::map_dfr(~ .x) %>%
dplyr::mutate(dplyr::across(dplyr::everything(), ~ as.integer(.x))) %>%
dplyr::mutate(dplyr::across(dplyr::everything(), ~ dplyr::case_when(is.na(.x) ~ 0L,
TRUE ~ .x))) %>%
dplyr::bind_cols(dplyr::select(filler, -c(colnames(filler)[colnames(filler) %in% colnames(.)]))) %>%
dplyr::select(colnames(filler)) %>%
dplyr::relocate(colnames(filler)) #%>%
x.test <- as.matrix(rbind(test.data, test.data))
predict(all_models$M00004$glmnet.fit,
s = all_models$M00004$lambda.1se,
newx = x.test,
type = 'class')
#x.test <- as.matrix(rbind(test.data, test.data))[, -1]
x.test <- as.matrix(test.data)
predict(all_models$M00004$glmnet.fit,
s = all_models$M00004$lambda.1se,
newx = x.test,
type = 'class')
devtools::document()
MetaPredict(genome)
devtools::document()
MetaPredict(genome)
devtools::document()
MetaPredict(genome)
devtools::document()
MetaPredict(genome)
devtools::document()
MetaPredict(genome)
devtools::document()
devtools::document()
MetaPredict(genome)
names(all_models)
x <- MetaPredict(genome)
x
View(x)
View(x[["module_predictions"]])
devtools::document()
MetaPredict(genome)
class(x$module_predictions$M00004)
devtools::document()
MetaPredict(genome)
x <- MetaPredict(genome)
all_models['M00004']
all_models['M00004'] %>% names()
devtools::document()
x <- MetaPredict(genome)
x
table(is.na(x$module_predictions))
table(is.na(x$module_reconstructions))
table(x$module_reconstructions == 1)
devtools::document()
x <- MetaPredict(genome)
x
devtools::document()
x <- MetaPredict(genome)
x
devtools::document()
devtools::document()
devtools::document()
devtools::document()
getwd()
devtools::document()
read_data(input_dir = '~/Downloads/', pattern = '3300007648_16-ko.tsv')
devtools::document()
read_data(input_dir = '~/Downloads/', pattern = '3300007648_16-ko.tsv')
x <- read_data(input_dir = '~/Downloads/', pattern = '3300007648_16-ko.tsv')
x
read_data(input_dir = '~/Downloads/', pattern = '3300007648_16-ko.tsv')
devtools::document()
read_data(input_dir = '~/Downloads/', pattern = '3300007648_16-ko.tsv')
devtools::document()
read_data(input_dir = '~/Downloads/', pattern = '3300007648_16-ko.tsv')
devtools::document()
read_data(input_dir = '~/Downloads/', pattern = '3300007648_16-ko.tsv')
list.files(path = '~/Downloads/', pattern = '3300007648_16-ko.tsv')
devtools::document()
list.files(path = '~/Downloads/', pattern = '3300007648_16-ko.tsv')
read_data(input_dir = '~/Downloads/', pattern = '3300007648_16-ko.tsv')
read_data(input_dir = '~/Downloads/', pattern = '3300007648_16-ko.tsv')
x <- read_data(input_dir = '~/Downloads/', pattern = '3300007648_16-ko.tsv')
MetaPredict(x)
MetaPredict(x, predict_type = 'response')
y <- MetaPredict(x, predict_type = 'response')
View(y)
View(y[["summary"]])
MetaPredict(x, predict_type = 'class')
z <- MetaPredict(x, predict_type = 'class')
View(z)
View(z[["summary"]])
x
for (.i in 1:99) {
print(.i)
}
x
for (.i in 2:100) {
x[[.i]] <- x[[1]] %>% mutate(genome_name = paste0('genome_', .i))
}
library(tidyv)
for (.i in 2:100) {
x[[.i]] <- x[[1]] %>% mutate(genome_name = paste0('genome_', .i))
}
library(tidyverse)
for (.i in 2:100) {
x[[.i]] <- x[[1]] %>% mutate(genome_name = paste0('genome_', .i))
}
x
y <- MetaPredict(x)
y <- MetaPredict(x, predict_type = 'response')
View(y)
View(y[["summary"]])
View(z)
x <- read_data(input_dir = '~/Downloads/', pattern = '3300007648_16-ko.tsv')
for (.i in 2:1000) {
x[[.i]] <- x[[1]] %>% mutate(genome_name = paste0('genome_', .i))
}
rm(z)
y <- MetaPredict(x, predict_type = 'class')
View(y)
View(y)
View(y)
View(y[["module_reconstructions"]])
View(y[["summary"]])
x <- read_data(input_dir = '~/Downloads/', pattern = '3300007648_16-ko.tsv')
y <- MetaPredict(x, predict_type = 'class', moduleVector = 'M00004')
y
devtools::document()
x <- read_data(input_dir = '~/Downloads/', pattern = '3300007648_16-ko.tsv')
y <- MetaPredict(x, predict_type = 'class', moduleVector = 'M00004')
y
dir.exists('~/Documents/')
dir.exists('~/Downloads/')
x <- read_data(input_dir = '~/Downloads/', pattern = '3300007648_16-ko.tsv')
x <- read_data(input_dir = '~/Downloads/', pattern = '3300007648_16-ko.tsv')
x <- read_data(input_dir = '~/Downloads/', pattern = '3300007648_16-ko.tsv')
y <- MetaPredict(x, predict_type = 'class', moduleVector = 'M00004')
devtools::document()
x <- read_data(input_dir = '~/Downloads/', pattern = '3300007648_16-ko.tsv')
y <- MetaPredict(x, predict_type = 'class', moduleVector = 'M00004')
devtools::document()
x <- read_data(input_dir = '~/Downloads/', pattern = '3300007648_16-ko.tsv')
y <- MetaPredict(x, predict_type = 'class', moduleVector = 'M00004')
devtools::document()
y <- MetaPredict(x, predict_type = 'class', moduleVector = 'M00004')
y <- MetaPredict(x, predict_type = 'class', moduleVector = 'M00004', predict_models = FALSE)
y
y <- MetaPredict(x, predict_type = 'class', predict_models = FALSE)
y
module_metadata
devtools::document()
x <- read_data(input_dir = '~/Downloads/', pattern = '3300007648_16-ko.tsv')
y <- MetaPredict(x, predict_type = 'class', predict_models = FALSE)
y
View(y)
View(y[["summary"]])
y <- MetaPredict(x, predict_type = 'class', predict_models = FALSE, output_dir = '~/Downloads/genome-output')
y <- MetaPredict(x, predict_type = 'class', predict_models = FALSE, output_dir = '~/Downloads/genome-output')
y <- MetaPredict(x, predict_type = 'class', predict_models = FALSE, output_dir = '~/Downloads/genome-output', moduleVector = 'M00004')
devtools::document()
devtools::document()
x <- read_data(input_dir = '~/Downloads/', pattern = '3300007648_16-ko.tsv')
y <- MetaPredict(x, predict_models = FALSE, output_dir = '~/Downloads/genome-output', moduleVector = 'M00004')
y
y <- MetaPredict(x, output_dir = '~/Downloads/genome-output', moduleVector = 'M00004')
y
readline(prompt = 'Overwrite files?')
readline(prompt = 'Overwrite files? [y/n] ')
if (TRUE) {print('yes')}
if (FALSE) {print('yes')}
!FALSE
paste0('~/Downloads', c('summary', 'module_reconstructions'), '.tsv')
paste0('~/Downloads/', c('summary', 'module_reconstructions'), '.tsv')
paste0('~/Downloads/', NULL, c('summary', 'module_reconstructions'), '.tsv')
paste0('~/Downloads/', NULL, c('summary', 'module_reconstructions'), '.tsv') %in% list.files(path = '~/Downloads/genome-output/')
list.files(path = '~/Downloads/genome-output/')
paste0('~/Downloads/genome-output/', NULL, c('summary', 'module_reconstructions'), '.tsv') %in% list.files(path = '~/Downloads/genome-output/')
paste0('~/Downloads/genome-output/', NULL, c('summary', 'module_reconstructions'), '.tsv') %in% list.files(path = '~/Downloads/genome-output/', full.names = TRUE)
list.files(path = '~/Downloads/genome-output/', full.names = TRUE)
paste0('NULL, c('summary', 'module_reconstructions'), '.tsv') %in% list.files(path = '~/Downloads/genome-output/)
paste0(NULL, c('summary', 'module_reconstructions'), '.tsv') %in% list.files(path = '~/Downloads/genome-output/)
paste0(NULL, c('summary', 'module_reconstructions'), '.tsv') %in% list.files(path = '~/Downloads/genome-output/')
devtools::document()
x
y <- MetaPredict(x, predict_type = 'class', predict_models = FALSE, output_dir = '~/Downloads/genome-output', moduleVector = 'M00004')
devtools::document()
y <- MetaPredict(x, predict_type = 'class', predict_models = FALSE, output_dir = '~/Downloads/genome-output', moduleVector = 'M00004')
y <- MetaPredict(x, predict_type = 'class', predict_models = FALSE, output_dir = '~/Downloads/genome-output', moduleVector = 'M00004', output_prefix = 'hello')
devtools::document()
y <- MetaPredict(x, predict_type = 'class', predict_models = FALSE, output_dir = '~/Downloads/genome-output', moduleVector = 'M00004')
y <- MetaPredict(x, predict_type = 'class', predict_models = FALSE, output_dir = '~/Downloads/genome-output', moduleVector = 'M00004')
y <- MetaPredict(x, predict_type = 'class', predict_models = FALSE, output_dir = '~/Downloads/genome-output', moduleVector = 'M00004')
y <- MetaPredict(x, predict_type = 'class', predict_models = FALSE, output_dir = '~/Downloads/genome-output', moduleVector = 'M00004')
devtools::document()
y <- MetaPredict(x, predict_type = 'class', predict_models = FALSE, output_dir = '~/Downloads/genome-output', moduleVector = 'M00004')
y <- MetaPredict(x, predict_type = 'class', predict_models = FALSE, output_dir = '~/Downloads/genome-output', moduleVector = 'M00004', output_prefix = 'hello')
y <- MetaPredict(x, predict_type = 'class', predict_models = TRUE, output_dir = '~/Downloads/genome-output', moduleVector = 'M00004', output_prefix = 'hello')
y <- MetaPredict(x, predict_type = 'class', predict_models = TRUE, output_dir = '~/Downloads/genome-output', moduleVector = 'M00004', output_prefix = 'hello')
save_results(y, '~/Downloads/genome-output/')
save_recon(y, '~/Downloads/genome-output/')
devtools::document()
devtools::document()
x <- read_data(input_dir = '~/Downloads/', pattern = '3300007648_16-ko.tsv')
y <- MetaPredict(x, predict_type = 'class', predict_models = TRUE, output_dir = '~/Downloads/genome-output', moduleVector = 'M00004', output_prefix = 'hello')
devtools::document()
y <- MetaPredict(x, predict_type = 'class', predict_models = TRUE, output_dir = '~/Downloads/genome-output', moduleVector = 'M00004', output_prefix = 'hello')
devtools::document()
y <- MetaPredict(x, predict_type = 'class', predict_models = TRUE, output_dir = '~/Downloads/genome-output', moduleVector = 'M00004', output_prefix = 'hello')
devtools::document()
devtools::document()
x <- read_data(input_dir = '~/Downloads/', pattern = '3300007648_16-ko.tsv', custom = TRUE, kofamscan = FALSE, score_type = 'none')
devtools::document()
x <- read_data(input_dir = '~/Downloads/', pattern = '3300007648_16-ko.tsv', custom = TRUE, kofamscan = FALSE, score_type = 'none')
x <- read_data(input_dir = '~/Downloads/', pattern = '3300007648_16-ko copy.tsv', custom = TRUE, kofamscan = FALSE, score_type = 'none')
x
x <- read_data(input_dir = '~/Downloads/', pattern = '3300007648_16-ko copy.tsv', custom = TRUE, kofamscan = FALSE, score_type = 'score')
x
library(tidyverse)
x %>% select(contains('k_number'))
x[[1]] %>% select(contains('k_number'))
x[[1]] %>% select(contains('k_number|knumber'))
x[[1]] %>% select(matches('k_number|knumber'))
x[[1]] %>% select(matches('^k_number$|knumber'))
x[[1]] %>% select(matches('^k_number$|knumber'), gene_name)
x[[1]]
x[[1]] %>% select(matches('^k_number$|knumber'), genome_name)
devtools::document()
x <- read_data(input_dir = '~/Downloads/', pattern = '3300007648_16-ko copy.tsv', custom = TRUE, kofamscan = FALSE, score_type = 'score')
x
x <- read_data(input_dir = '~/Downloads/', pattern = '3300007648_16-ko copy.tsv', custom = TRUE, kofamscan = FALSE, score_type = 'evalue')
x
x <- read_data(input_dir = '~/Downloads/', pattern = '3300007648_16-ko copy.tsv', custom = TRUE, kofamscan = FALSE, score_type = 'none')
devtools::document()
x <- read_data(input_dir = '~/Downloads/', pattern = '3300007648_16-ko copy.tsv', custom = TRUE, kofamscan = FALSE, score_type = 'none')
devtools::document()
x <- read_data(input_dir = '~/Downloads/', pattern = '3300007648_16-ko copy.tsv', custom = TRUE, kofamscan = FALSE, score_type = 'none')
x <- read_data(input_dir = '~/Downloads/', pattern = '3300007648_16-ko copy.tsv', custom = TRUE, kofamscan = FALSE, score_type = 'evalue')
x <- read_data(input_dir = '~/Downloads/', pattern = '3300007648_16-ko copy.tsv', custom = TRUE, kofamscan = FALSE, score_type = 'score', cutoff = 100)
x
