mutate(across(everything(), ~ if_else(n == .x, 1, 0))) %>%
ungroup() %>%
select(-n) %>%
mutate(module_step = str_replace(module_step, '(M\\d{5}_\\d{2}_)[:ALPHA:]', '\\1alt')) %>%
group_by(module_step) %>%
summarize(across(everything(), ~ sum(.x))) %>%
ungroup() %>%
mutate(across(2:last_col(), ~ if_else(.x >= 1, 1, 0))) %>%
mutate(module_name = stringr::str_replace(module_step, '(M\\d{5}).*', '\\1')) %>%
dplyr::relocate(module_name, .before = 1) %>%
dplyr::select(-module_step) %>%
dplyr::group_by(module_name) %>%
dplyr::summarize(dplyr::across(dplyr::everything(), ~ sum(.x))) %>%
mutate(n = kegg_module_sizes[['n']]) %>%
relocate(n, .after = 1) %>%
dplyr::mutate(across(3:dplyr::last_col(), ~ dplyr::case_when(.x == n ~ 1,
.x < n ~ 0))) %>% # this does not account for multiple ways to perform one step; it requires all alternate step possibilities to be present to count the pathway as complete. need to revise this
dplyr::select(-n) %>%
dplyr::as_tibble() %>%
#pivot_longer_c(pivotColNames = c(colnames(.)[2:length(colnames(.))]),
#               keepColName = 'module_name', names_to = 'temp', values_to = 'temp_values') %>%
tidyr::pivot_longer(cols = 2:dplyr::last_col(), names_to = 'genome_name', values_to = 'temp_values') %>%
tidyr::pivot_wider(names_from = 'module_name', values_from = 'temp_values')
identical(y2, temp3x)
y2 == temp3x
y2 == temp3x %>% View()
(y2 == temp3x) %>% View()
(y2 == temp3x) %>% table()
temp3x <- temp2x %>%
mutate(n_numeric = (stri_count_fixed(n, ' ') + 1), .after = n) %>%
#mutate(n_numeric = all_n$n, .after = n) %>%
lazy_dt() %>%
mutate(across(4:last_col(), ~ (stringi::stri_count_fixed(.x, ' ') + 1))) %>%
mutate(across(4:last_col(), ~ case_when(is.na(.x) ~ 0, TRUE ~ .x))) %>%
mutate(across(4:last_col(), ~ case_when(.x == n_numeric ~ 1, TRUE ~ 0))) %>%
select(-c(n, n_numeric)) %>%
as_tibble() %>%
tidyr::pivot_longer(cols = 2:dplyr::last_col(), names_to = 'genome_name', values_to = 'temp_values') %>%
tidyr::pivot_wider(names_from = 'alt_steps', values_from = 'temp_values')
#identical(temp3x, compare)
identical(temp3x, y2)
(temp3x == y2) %>% table()
#y2 <-
y %>%
dplyr::mutate(module_step = patt.filt$step, .before = 1) %>%
dtplyr::lazy_dt() %>%
dplyr::mutate(dplyr::across(2:dplyr::last_col(), ~ as.integer(.x))) %>%
dplyr::group_by(module_step) %>%
dplyr::summarize(dplyr::across(dplyr::everything(), ~ sum(.x))) %>% as.tibble() %>% View()# aggregate sums of multi-step steps
y
patt.filt
all_kegg.filt
y2 <-
y %>%
dplyr::mutate(module_step = patt.filt$step, .before = 1) %>%
dtplyr::lazy_dt() %>%
dplyr::mutate(dplyr::across(2:dplyr::last_col(), ~ as.integer(.x))) %>%
dplyr::group_by(module_step) %>%
dplyr::summarize(dplyr::across(dplyr::everything(), ~ sum(.x))) %>% # aggregate sums of multi-step steps
dplyr::mutate(#module_name = stringr::str_replace(module_step, '(M\\d{5}).*', '\\1'),
n = all_kegg.filt[['n']]) %>%
relocate(n, .after = 1) %>%
#group_by(n, module_step) %>%
mutate(across(everything(), ~ if_else(n == .x, 1, 0))) %>%
#ungroup() %>%
select(-n) %>%
mutate(module_step = str_replace(module_step, '(M\\d{5}_\\d{2}_)[:ALPHA:]', '\\1alt')) %>%
group_by(module_step) %>%
summarize(across(everything(), ~ sum(.x))) %>%
ungroup() %>%
mutate(across(2:last_col(), ~ if_else(.x >= 1, 1, 0))) %>%
mutate(module_name = stringr::str_replace(module_step, '(M\\d{5}).*', '\\1')) %>%
dplyr::relocate(module_name, .before = 1) %>%
dplyr::select(-module_step) %>%
dplyr::group_by(module_name) %>%
dplyr::summarize(dplyr::across(dplyr::everything(), ~ sum(.x))) %>%
mutate(n = kegg_module_sizes[['n']]) %>%
relocate(n, .after = 1) %>%
dplyr::mutate(across(3:dplyr::last_col(), ~ dplyr::case_when(.x == n ~ 1,
.x < n ~ 0))) %>% # this does not account for multiple ways to perform one step; it requires all alternate step possibilities to be present to count the pathway as complete. need to revise this
dplyr::select(-n) %>%
dplyr::as_tibble() %>%
#pivot_longer_c(pivotColNames = c(colnames(.)[2:length(colnames(.))]),
#               keepColName = 'module_name', names_to = 'temp', values_to = 'temp_values') %>%
tidyr::pivot_longer(cols = 2:dplyr::last_col(), names_to = 'genome_name', values_to = 'temp_values') %>%
tidyr::pivot_wider(names_from = 'module_name', values_from = 'temp_values')
y2 <- y %>%
dplyr::mutate(module_step = patt.filt$step, .before = 1) %>%
dtplyr::lazy_dt() %>%
dplyr::mutate(dplyr::across(2:dplyr::last_col(), ~ as.integer(.x))) %>%
dplyr::group_by(module_step) %>%
dplyr::summarize(dplyr::across(dplyr::everything(), ~ sum(.x))) %>% # aggregate sums of multi-step steps
dplyr::mutate(#module_name = stringr::str_replace(module_step, '(M\\d{5}).*', '\\1'),
n = all_kegg.filt[['n']]) %>%
relocate(n, .after = 1) %>%
#group_by(n, module_step) %>%
mutate(across(everything(), ~ if_else(n == .x, 1, 0))) %>%
#ungroup() %>%
select(-n) %>%
mutate(module_step = str_replace(module_step, '(M\\d{5}_\\d{2}_)[:ALPHA:]', '\\1alt')) %>%
group_by(module_step) %>%
summarize(across(everything(), ~ sum(.x))) %>%
ungroup() %>%
mutate(across(2:last_col(), ~ if_else(.x >= 1, 1, 0))) %>%
mutate(module_name = stringr::str_replace(module_step, '(M\\d{5}).*', '\\1')) %>%
dplyr::relocate(module_name, .before = 1) %>%
dplyr::select(-module_step) %>%
dplyr::group_by(module_name) %>%
dplyr::summarize(dplyr::across(dplyr::everything(), ~ sum(.x))) %>%
mutate(n = kegg_module_sizes[['n']]) %>%
relocate(n, .after = 1) %>%
dplyr::mutate(across(3:dplyr::last_col(), ~ dplyr::case_when(.x == n ~ 1,
.x < n ~ 0))) %>% # this does not account for multiple ways to perform one step; it requires all alternate step possibilities to be present to count the pathway as complete. need to revise this
dplyr::select(-n) %>%
dplyr::as_tibble() %>%
#pivot_longer_c(pivotColNames = c(colnames(.)[2:length(colnames(.))]),
#               keepColName = 'module_name', names_to = 'temp', values_to = 'temp_values') %>%
tidyr::pivot_longer(cols = 2:dplyr::last_col(), names_to = 'genome_name', values_to = 'temp_values') %>%
tidyr::pivot_wider(names_from = 'module_name', values_from = 'temp_values')
y2 <- y %>%
dplyr::mutate(module_step = patt.filt$step, .before = 1) %>%
dtplyr::lazy_dt() %>%
dplyr::mutate(dplyr::across(2:dplyr::last_col(), ~ as.integer(.x))) %>%
dplyr::group_by(module_step) %>%
dplyr::summarize(dplyr::across(dplyr::everything(), ~ sum(.x))) %>% # aggregate sums of multi-step steps
dplyr::mutate(#module_name = stringr::str_replace(module_step, '(M\\d{5}).*', '\\1'),
n = all_kegg.filt[['n']]) %>%
relocate(n, .after = 1) %>%
group_by(n, module_step) %>%
mutate(across(everything(), ~ if_else(n == .x, 1, 0))) %>%
ungroup() %>%
select(-n) %>%
mutate(module_step = str_replace(module_step, '(M\\d{5}_\\d{2}_)[:ALPHA:]', '\\1alt')) %>%
group_by(module_step) %>%
summarize(across(everything(), ~ sum(.x))) %>%
ungroup() %>%
mutate(across(2:last_col(), ~ if_else(.x >= 1, 1, 0))) %>%
mutate(module_name = stringr::str_replace(module_step, '(M\\d{5}).*', '\\1')) %>%
dplyr::relocate(module_name, .before = 1) %>%
dplyr::select(-module_step) %>%
dplyr::group_by(module_name) %>%
dplyr::summarize(dplyr::across(dplyr::everything(), ~ sum(.x))) %>%
mutate(n = kegg_module_sizes[['n']]) %>%
relocate(n, .after = 1) %>%
dplyr::mutate(across(3:dplyr::last_col(), ~ dplyr::case_when(.x == n ~ 1,
.x < n ~ 0))) %>% # this does not account for multiple ways to perform one step; it requires all alternate step possibilities to be present to count the pathway as complete. need to revise this
dplyr::select(-n) %>%
dplyr::as_tibble() %>%
#pivot_longer_c(pivotColNames = c(colnames(.)[2:length(colnames(.))]),
#               keepColName = 'module_name', names_to = 'temp', values_to = 'temp_values') %>%
tidyr::pivot_longer(cols = 2:dplyr::last_col(), names_to = 'genome_name', values_to = 'temp_values') %>%
tidyr::pivot_wider(names_from = 'module_name', values_from = 'temp_values')
n = all_kegg.filt[['n']]) %>%
relocate(n, .after = 1)# %>%
#y2 <-
y %>%
dplyr::mutate(module_step = patt.filt$step, .before = 1) %>%
dtplyr::lazy_dt() %>%
dplyr::mutate(dplyr::across(2:dplyr::last_col(), ~ as.integer(.x))) %>%
dplyr::group_by(module_step) %>%
dplyr::summarize(dplyr::across(dplyr::everything(), ~ sum(.x))) %>% # aggregate sums of multi-step steps
dplyr::mutate(#module_name = stringr::str_replace(module_step, '(M\\d{5}).*', '\\1'),
n = all_kegg.filt[['n']]) %>%
relocate(n, .after = 1)# %>%
y2 <- y %>%
dplyr::mutate(module_step = patt.filt$step, .before = 1) %>%
dtplyr::lazy_dt() %>%
dplyr::mutate(dplyr::across(2:dplyr::last_col(), ~ as.integer(.x))) %>%
dplyr::group_by(module_step) %>%
dplyr::summarize(dplyr::across(dplyr::everything(), ~ sum(.x))) %>% # aggregate sums of multi-step steps
dplyr::mutate(#module_name = stringr::str_replace(module_step, '(M\\d{5}).*', '\\1'),
n = all_kegg.filt[['n']]) %>%
relocate(n, .after = 1) %>%
#group_by(n, module_step) %>%
mutate(across(3:last_col(), ~ if_else(n == .x, 1, 0))) %>%
#ungroup() %>%
select(-n) %>%
mutate(module_step = str_replace(module_step, '(M\\d{5}_\\d{2}_)[:ALPHA:]', '\\1alt')) %>%
group_by(module_step) %>%
summarize(across(everything(), ~ sum(.x))) %>%
ungroup() %>%
mutate(across(2:last_col(), ~ if_else(.x >= 1, 1, 0))) %>%
mutate(module_name = stringr::str_replace(module_step, '(M\\d{5}).*', '\\1')) %>%
dplyr::relocate(module_name, .before = 1) %>%
dplyr::select(-module_step) %>%
dplyr::group_by(module_name) %>%
dplyr::summarize(dplyr::across(dplyr::everything(), ~ sum(.x))) %>%
mutate(n = kegg_module_sizes[['n']]) %>%
relocate(n, .after = 1) %>%
dplyr::mutate(across(3:dplyr::last_col(), ~ dplyr::case_when(.x == n ~ 1,
.x < n ~ 0))) %>% # this does not account for multiple ways to perform one step; it requires all alternate step possibilities to be present to count the pathway as complete. need to revise this
dplyr::select(-n) %>%
dplyr::as_tibble() %>%
#pivot_longer_c(pivotColNames = c(colnames(.)[2:length(colnames(.))]),
#               keepColName = 'module_name', names_to = 'temp', values_to = 'temp_values') %>%
tidyr::pivot_longer(cols = 2:dplyr::last_col(), names_to = 'genome_name', values_to = 'temp_values') %>%
tidyr::pivot_wider(names_from = 'module_name', values_from = 'temp_values')
identical(y2, temp3x)
(y2 == temp3x) %>% table()
(y2 == temp3x) %>% View()
View(y2)
View(temp3x)
View(temp2x)
K01626_K01626 K01735+K03785_K03786+K00014_K00014 K00891 K01736
identical(y2, compare)
(y2 == compare) %>% table()
e[[5]]
e
e$genome_name[5]
e[5]
e[[5]]
e %>% slice(5)
e %>%
slice(5) %>%
pull(k_number)
genome_5 <- e %>%
slice(5) %>%
pull(k_number)
stri_extract_all_regex(str = genome_5, pattern = 'K01626|K01626|K01735|K03785|K03786|K00014|K00891|K01736')
str_extract_all(str = genome_5, pattern = 'K01626|K01626|K01735|K03785|K03786|K00014|K00891|K01736')
all_kegg_modules %>% filter(module == 'M00022')
patt.kegg_modules %>% module = 'M00022'
patt.kegg_modules %>% filter(module = 'M00022')
patt.kegg_modules %>% filter(module == 'M00022')
tempx <- purrr::map2_dfc(e$k_number, e$genome_name, ~ tibble(!!.y := stringi::stri_extract_all_regex(str = .x, pattern = patt.filt$k_numbers))) %>%
dtplyr::lazy_dt() %>%
dplyr::mutate(alt_steps = patt.filt$alt_steps,
group_col = dplyr::row_number()) %>%
dplyr::relocate(c(alt_steps, group_col), .before = 1)
temp2x <-
tempx %>%
dplyr::group_by(alt_steps, group_col) %>%
dplyr::mutate(dplyr::across(dplyr::everything(), ~ paste0(unlist(.x[!is.na(.x)]), collapse = '_'))) %>% # for each step (or 1 step of multi-step step): glue together duplicate genes or diff genes that do the same step (e.g., in case when requirement is K01626|K03856, if both are present and 2 copies of K01626 present, it will become: K01626_K01626_K03856)
dplyr::ungroup() %>%
dplyr::select(-group_col) %>%
dplyr::mutate(dplyr::across(dplyr::everything(), ~ stringi::stri_replace_first_regex(.x, '^$', NA_character_))) %>%
#as_tibble() %>%
dplyr::group_by(alt_steps) %>%
summarize(across(everything(), ~ if (any(is.na(.x))) {NA_character_} else {paste0(unlist(.x[!is.na(.x)]), collapse = '_')} )) %>%
#dplyr::summarize(dplyr::across(dplyr::everything(), ~ paste0(unlist(.x[!is.na(.x)]), collapse = '_'))) %>% #combine alternate versions of the same module step with `|`
#dplyr::mutate(dplyr::across(dplyr::everything(), ~ stringi::stri_replace_first_regex(.x, '^$', NA_character_))) %>%
dplyr::ungroup() %>%
dplyr::mutate(alt_steps = str_replace(alt_steps, '(M\\d{5}_\\d{2}_)[:ALPHA:].*', '\\1alt')) %>%
dplyr::group_by(alt_steps) %>%
dplyr::summarize(dplyr::across(dplyr::everything(), ~ paste0(unlist(.x[!is.na(.x)]), collapse = '|'))) %>% #combine alternate versions of the same module step with `|`
dplyr::ungroup() %>%
dplyr::mutate(dplyr::across(dplyr::everything(), ~ stringi::stri_replace_first_regex(.x, '^$', NA_character_))) %>%
dplyr::mutate(alt_steps = stringr::str_replace(alt_steps, '(M\\d{5}_\\d{2}).*', '\\1')) %>%
dplyr::mutate(n = 1) %>%
dplyr::relocate(n, .after = 1) %>%
dplyr::group_by(alt_steps) %>%
dplyr::summarize(dplyr::across(dplyr::everything(), ~ paste0(.x[!is.na(.x)], collapse = '+'))) %>% #combine multi-step module steps together with `+`
dplyr::ungroup() %>%
dplyr::mutate(dplyr::across(dplyr::everything(), ~ stringi::stri_replace_first_regex(.x, '^$', NA_character_))) %>%
dplyr::mutate(alt_steps = stringr::str_replace(alt_steps, '(M\\d{5}).*', '\\1')) %>%
dplyr::group_by(alt_steps) %>%
dplyr::summarize(dplyr::across(dplyr::everything(), ~ paste0(.x[!is.na(.x)], collapse = ' '))) %>%
dplyr::mutate(dplyr::across(2:dplyr::last_col(), ~ stringi::stri_replace_all_regex(.x, '^$', NA_character_))) %>%
dplyr::as_tibble()
temp3x <- temp2x %>%
mutate(n_numeric = (stri_count_fixed(n, ' ') + 1), .after = n) %>%
#mutate(n_numeric = all_n$n, .after = n) %>%
lazy_dt() %>%
mutate(across(4:last_col(), ~ (stringi::stri_count_fixed(.x, ' ') + 1))) %>%
mutate(across(4:last_col(), ~ case_when(is.na(.x) ~ 0, TRUE ~ .x))) %>%
mutate(across(4:last_col(), ~ case_when(.x == n_numeric ~ 1, TRUE ~ 0))) %>%
select(-c(n, n_numeric)) %>%
as_tibble() %>%
tidyr::pivot_longer(cols = 2:dplyr::last_col(), names_to = 'genome_name', values_to = 'temp_values') %>%
tidyr::pivot_wider(names_from = 'alt_steps', values_from = 'temp_values')
identical(y2, temp3x)
(y2 == compare) %>% table()
(y2 == temp3x) %>% table()
all_kegg_modules %>% filter(module == 'M00022')
genome_5
all_kegg_modules %>% filter(module == 'M00022')
temp2x$`GCA_002694305.1_ASM269430v1_genomic-ko.tsv`[3]
#temp2x <-
tempx %>%
dplyr::group_by(alt_steps, group_col) %>%
dplyr::mutate(dplyr::across(dplyr::everything(), ~ paste0(unlist(.x[!is.na(.x)]), collapse = '_'))) %>% # for each step (or 1 step of multi-step step): glue together duplicate genes or diff genes that do the same step (e.g., in case when requirement is K01626|K03856, if both are present and 2 copies of K01626 present, it will become: K01626_K01626_K03856)
dplyr::ungroup() %>%
dplyr::select(-group_col) %>%
dplyr::mutate(dplyr::across(dplyr::everything(), ~ stringi::stri_replace_first_regex(.x, '^$', NA_character_))) %>%
#as_tibble() %>%
dplyr::group_by(alt_steps) %>%
summarize(across(everything(), ~ if (any(is.na(.x))) {NA_character_} else {paste0(unlist(.x[!is.na(.x)]), collapse = '_')} )) %>%
#dplyr::summarize(dplyr::across(dplyr::everything(), ~ paste0(unlist(.x[!is.na(.x)]), collapse = '_'))) %>% #combine alternate versions of the same module step with `|`
#dplyr::mutate(dplyr::across(dplyr::everything(), ~ stringi::stri_replace_first_regex(.x, '^$', NA_character_))) %>%
dplyr::ungroup() %>%
dplyr::mutate(alt_steps = str_replace(alt_steps, '(M\\d{5}_\\d{2}_)[:ALPHA:].*', '\\1alt')) %>%
dplyr::group_by(alt_steps) %>%
dplyr::summarize(dplyr::across(dplyr::everything(), ~ paste0(unlist(.x[!is.na(.x)]), collapse = '|'))) %>% #combine alternate versions of the same module step with `|`
dplyr::ungroup() %>%
dplyr::mutate(dplyr::across(dplyr::everything(), ~ stringi::stri_replace_first_regex(.x, '^$', NA_character_))) %>%
dplyr::mutate(alt_steps = stringr::str_replace(alt_steps, '(M\\d{5}_\\d{2}).*', '\\1')) %>%
dplyr::mutate(n = 1) %>%
dplyr::relocate(n, .after = 1) %>%
dplyr::group_by(alt_steps) %>% as_tibble() %>% View()
patt.filt %>% View()
#temp2x <-
tempx %>%
dplyr::group_by(alt_steps, group_col) %>%
dplyr::mutate(dplyr::across(dplyr::everything(), ~ paste0(unlist(.x[!is.na(.x)]), collapse = '_'))) %>% # for each step (or 1 step of multi-step step): glue together duplicate genes or diff genes that do the same step (e.g., in case when requirement is K01626|K03856, if both are present and 2 copies of K01626 present, it will become: K01626_K01626_K03856)
dplyr::ungroup() %>%
dplyr::select(-group_col) %>%
dplyr::mutate(dplyr::across(dplyr::everything(), ~ stringi::stri_replace_first_regex(.x, '^$', NA_character_))) %>%
#as_tibble() %>%
dplyr::group_by(alt_steps) %>%
summarize(across(everything(), ~ if (any(is.na(.x))) {NA_character_} else {paste0(unlist(.x[!is.na(.x)]), collapse = '_')} )) %>% # This aggregates all steps in multi-step steps that have an _A and _B alternate way of completing - and condenses each _A and _B method into a single row, with the genes separated by '_'; if any piece of an alt step is missing, it returns NA instead
#dplyr::summarize(dplyr::across(dplyr::everything(), ~ paste0(unlist(.x[!is.na(.x)]), collapse = '_'))) %>% #combine alternate versions of the same module step with `|`
#dplyr::mutate(dplyr::across(dplyr::everything(), ~ stringi::stri_replace_first_regex(.x, '^$', NA_character_))) %>%
dplyr::ungroup() %>%
dplyr::mutate(alt_steps = str_replace(alt_steps, '(M\\d{5}_\\d{2}_)[:ALPHA:].*', '\\1alt')) %>%
dplyr::group_by(alt_steps) %>%
dplyr::summarize(dplyr::across(dplyr::everything(), ~ paste0(unlist(.x[!is.na(.x)]), collapse = '|'))) %>% #combine alternate versions of the same module step with `|`
dplyr::ungroup() %>%
dplyr::mutate(dplyr::across(dplyr::everything(), ~ stringi::stri_replace_first_regex(.x, '^$', NA_character_))) %>%
dplyr::mutate(alt_steps = stringr::str_replace(alt_steps, '(M\\d{5}_\\d{2}).*', '\\1')) %>%
dplyr::mutate(n = 1) %>%
dplyr::relocate(n, .after = 1) %>%
dplyr::group_by(alt_steps) %>% as_tibble() %>% View()
all_kegg_modules %>% filter(module == 'M00004')
#temp2x <-
tempx %>%
dplyr::group_by(alt_steps, group_col) %>%
dplyr::mutate(dplyr::across(dplyr::everything(), ~ paste0(unlist(.x[!is.na(.x)]), collapse = '_'))) %>% # for each step (or 1 step of multi-step step): glue together duplicate genes or diff genes that do the same step (e.g., in case when requirement is K01626|K03856, if both are present and 2 copies of K01626 present, it will become: K01626_K01626_K03856)
dplyr::ungroup() %>%
dplyr::select(-group_col) %>%
dplyr::mutate(dplyr::across(dplyr::everything(), ~ stringi::stri_replace_first_regex(.x, '^$', NA_character_))) %>%
#as_tibble() %>%
dplyr::group_by(alt_steps) %>%
summarize(across(everything(), ~ if (any(is.na(.x))) {NA_character_} else {paste0(unlist(.x[!is.na(.x)]), collapse = '_')} )) %>% # This aggregates all steps in multi-step steps that have an _A and _B alternate way of completing - and condenses each _A and _B method into a single row, with the genes separated by '_'; if any piece of an alt step is missing, it returns NA instead
#dplyr::summarize(dplyr::across(dplyr::everything(), ~ paste0(unlist(.x[!is.na(.x)]), collapse = '_'))) %>% #combine alternate versions of the same module step with `|`
#dplyr::mutate(dplyr::across(dplyr::everything(), ~ stringi::stri_replace_first_regex(.x, '^$', NA_character_))) %>%
dplyr::ungroup() %>%
dplyr::mutate(alt_steps = str_replace(alt_steps, '(M\\d{5}_\\d{2}_)[:ALPHA:].*', '\\1alt')) %>%
dplyr::group_by(alt_steps) %>%
dplyr::summarize(dplyr::across(dplyr::everything(), ~ paste0(unlist(.x[!is.na(.x)]), collapse = '|'))) %>% #combine alternate versions of the same module step with `|`
dplyr::ungroup() %>%
dplyr::mutate(dplyr::across(dplyr::everything(), ~ stringi::stri_replace_first_regex(.x, '^$', NA_character_))) %>%
dplyr::mutate(alt_steps = stringr::str_replace(alt_steps, '(M\\d{5}_\\d{2}).*', '\\1')) %>%
dplyr::mutate(n = 1) %>%
dplyr::relocate(n, .after = 1) %>%
dplyr::group_by(alt_steps) %>%
#dplyr::summarize(dplyr::across(dplyr::everything(), ~ paste0(.x[!is.na(.x)], collapse = '+'))) %>% #combine multi-step module steps together with `+`
summarize(across(everything(), ~ if (any(is.na(.x))) {NA_character_} else {paste0(unlist(.x[!is.na(.x)]), collapse = '+')} )) %>% #combine multi-step module steps together with `+`; returns NA if not all steps of multi-step steps are present, or if the step of a single step step is missing
dplyr::ungroup() %>%
#dplyr::mutate(dplyr::across(dplyr::everything(), ~ stringi::stri_replace_first_regex(.x, '^$', NA_character_))) %>%
dplyr::mutate(alt_steps = stringr::str_replace(alt_steps, '(M\\d{5}).*', '\\1')) %>% as_tibble() %>% View()
temp2x <-
tempx %>%
dplyr::group_by(alt_steps, group_col) %>%
dplyr::mutate(dplyr::across(dplyr::everything(), ~ paste0(unlist(.x[!is.na(.x)]), collapse = '_'))) %>% # for each step (or 1 step of multi-step step): glue together duplicate genes or diff genes that do the same step (e.g., in case when requirement is K01626|K03856, if both are present and 2 copies of K01626 present, it will become: K01626_K01626_K03856)
dplyr::ungroup() %>%
dplyr::select(-group_col) %>%
dplyr::mutate(dplyr::across(dplyr::everything(), ~ stringi::stri_replace_first_regex(.x, '^$', NA_character_))) %>%
#as_tibble() %>%
dplyr::group_by(alt_steps) %>%
summarize(across(everything(), ~ if (any(is.na(.x))) {NA_character_} else {paste0(unlist(.x[!is.na(.x)]), collapse = '_')} )) %>% # This aggregates all steps in multi-step steps that have an _A and _B alternate way of completing - and condenses each _A and _B method into a single row, with the genes separated by '_'; if any piece of an alt step is missing, it returns NA instead
#dplyr::summarize(dplyr::across(dplyr::everything(), ~ paste0(unlist(.x[!is.na(.x)]), collapse = '_'))) %>% #combine alternate versions of the same module step with `|`
#dplyr::mutate(dplyr::across(dplyr::everything(), ~ stringi::stri_replace_first_regex(.x, '^$', NA_character_))) %>%
dplyr::ungroup() %>%
dplyr::mutate(alt_steps = str_replace(alt_steps, '(M\\d{5}_\\d{2}_)[:ALPHA:].*', '\\1alt')) %>%
dplyr::group_by(alt_steps) %>%
dplyr::summarize(dplyr::across(dplyr::everything(), ~ paste0(unlist(.x[!is.na(.x)]), collapse = '|'))) %>% #combine alternate versions of the same module step with `|`
dplyr::ungroup() %>%
dplyr::mutate(dplyr::across(dplyr::everything(), ~ stringi::stri_replace_first_regex(.x, '^$', NA_character_))) %>%
dplyr::mutate(alt_steps = stringr::str_replace(alt_steps, '(M\\d{5}_\\d{2}).*', '\\1')) %>%
dplyr::mutate(n = 1) %>%
dplyr::relocate(n, .after = 1) %>%
dplyr::group_by(alt_steps) %>%
#dplyr::summarize(dplyr::across(dplyr::everything(), ~ paste0(.x[!is.na(.x)], collapse = '+'))) %>% #combine multi-step module steps together with `+`
summarize(across(everything(), ~ if (any(is.na(.x))) {NA_character_} else {paste0(unlist(.x[!is.na(.x)]), collapse = '+')} )) %>% #combine multi-step module steps together with `+`; returns NA if not all steps of multi-step steps are present, or if the step of a single step step is missing
dplyr::ungroup() %>%
#dplyr::mutate(dplyr::across(dplyr::everything(), ~ stringi::stri_replace_first_regex(.x, '^$', NA_character_))) %>%
dplyr::mutate(alt_steps = stringr::str_replace(alt_steps, '(M\\d{5}).*', '\\1')) %>%
dplyr::group_by(alt_steps) %>%
dplyr::summarize(dplyr::across(dplyr::everything(), ~ paste0(.x[!is.na(.x)], collapse = ' '))) %>%
dplyr::mutate(dplyr::across(2:dplyr::last_col(), ~ stringi::stri_replace_all_regex(.x, '^$', NA_character_))) %>%
dplyr::as_tibble()
temp3x <- temp2x %>%
mutate(n_numeric = (stri_count_fixed(n, ' ') + 1), .after = n) %>%
#mutate(n_numeric = all_n$n, .after = n) %>%
lazy_dt() %>%
mutate(across(4:last_col(), ~ (stringi::stri_count_fixed(.x, ' ') + 1))) %>%
mutate(across(4:last_col(), ~ case_when(is.na(.x) ~ 0, TRUE ~ .x))) %>%
mutate(across(4:last_col(), ~ case_when(.x == n_numeric ~ 1, TRUE ~ 0))) %>%
select(-c(n, n_numeric)) %>%
as_tibble() %>%
tidyr::pivot_longer(cols = 2:dplyr::last_col(), names_to = 'genome_name', values_to = 'temp_values') %>%
tidyr::pivot_wider(names_from = 'alt_steps', values_from = 'temp_values')
(temp3x == y2) %>% table()
(temp3x == compare) %>% table()
View(temp2x)
temp3x <- temp2x %>%
mutate(n_numeric = (stri_count_fixed(n, ' ') + 1), .after = n) %>%
lazy_dt() %>%
mutate(across(4:last_col(), ~ (stringi::stri_count_fixed(.x, ' ') + 1))) %>%
mutate(across(4:last_col(), ~ case_when(is.na(.x) ~ 0, TRUE ~ .x))) %>%
mutate(across(4:last_col(), ~ case_when(.x == n_numeric ~ 1, TRUE ~ 0))) %>%
select(-c(n, n_numeric)) %>%
as_tibble() %>%
tidyr::pivot_longer(cols = 2:dplyr::last_col(), names_to = 'genome_name', values_to = 'temp_values') %>%
tidyr::pivot_wider(names_from = 'alt_steps', values_from = 'temp_values')
temp2x
tempx <- purrr::map2_dfc(e$k_number, e$genome_name, ~ tibble(!!.y := stringi::stri_extract_all_regex(str = .x, pattern = patt.filt$k_numbers))) %>%
dtplyr::lazy_dt() %>%
dplyr::mutate(alt_steps = patt.filt$alt_steps,
group_col = dplyr::row_number()) %>%
dplyr::relocate(c(alt_steps, group_col), .before = 1) %>%
dplyr::group_by(alt_steps, group_col) %>%
dplyr::mutate(dplyr::across(dplyr::everything(), ~ paste0(unlist(.x[!is.na(.x)]), collapse = '_'))) %>% # for each step (or 1 step of multi-step step): glue together duplicate genes or diff genes that do the same step (e.g., in case when requirement is K01626|K03856, if both are present and 2 copies of K01626 present, it will become: K01626_K01626_K03856)
dplyr::ungroup() %>%
dplyr::select(-group_col) %>%
dplyr::mutate(dplyr::across(dplyr::everything(), ~ stringi::stri_replace_first_regex(.x, '^$', NA_character_))) %>%
dplyr::group_by(alt_steps) %>%
summarize(across(everything(), ~ if (any(is.na(.x))) {NA_character_} else {paste0(unlist(.x[!is.na(.x)]), collapse = '_')} )) %>% # This aggregates all steps in multi-step steps that have an _A and _B alternate way of completing - and condenses each _A and _B method into a single row, with the genes separated by '_'; if any piece of an alt step is missing, it returns NA instead
dplyr::ungroup() %>%
dplyr::mutate(alt_steps = str_replace(alt_steps, '(M\\d{5}_\\d{2}_)[:ALPHA:].*', '\\1alt')) %>%
dplyr::group_by(alt_steps) %>%
dplyr::summarize(dplyr::across(dplyr::everything(), ~ paste0(unlist(.x[!is.na(.x)]), collapse = '|'))) %>% #combine alternate versions of the same module step with `|`
dplyr::ungroup() %>%
dplyr::mutate(dplyr::across(dplyr::everything(), ~ stringi::stri_replace_first_regex(.x, '^$', NA_character_))) %>%
dplyr::mutate(alt_steps = stringr::str_replace(alt_steps, '(M\\d{5}_\\d{2}).*', '\\1')) %>%
dplyr::mutate(n = 1) %>%
dplyr::relocate(n, .after = 1) %>%
dplyr::group_by(alt_steps) %>%
summarize(across(everything(), ~ if (any(is.na(.x))) {NA_character_} else {paste0(unlist(.x[!is.na(.x)]), collapse = '+')} )) %>% #combine multi-step module steps together with `+`; returns NA if not all steps of multi-step steps are present, or if the step of a single step step is missing
dplyr::ungroup() %>%
dplyr::mutate(alt_steps = stringr::str_replace(alt_steps, '(M\\d{5}).*', '\\1')) %>%
dplyr::group_by(alt_steps) %>%
dplyr::summarize(dplyr::across(dplyr::everything(), ~ paste0(.x[!is.na(.x)], collapse = ' '))) %>%
dplyr::mutate(dplyr::across(2:dplyr::last_col(), ~ stringi::stri_replace_all_regex(.x, '^$', NA_character_))) %>%
mutate(n = (stri_count_fixed(n, ' ') + 1)) %>%
mutate(across(4:last_col(), ~ (stringi::stri_count_fixed(.x, ' ') + 1))) %>%
mutate(across(4:last_col(), ~ case_when(is.na(.x) ~ 0, TRUE ~ .x))) %>%
mutate(across(4:last_col(), ~ case_when(.x == n ~ 1, TRUE ~ 0))) %>%
select(-n) %>%
as_tibble() %>%
tidyr::pivot_longer(cols = 2:dplyr::last_col(), names_to = 'genome_name', values_to = 'temp_values') %>%
tidyr::pivot_wider(names_from = 'alt_steps', values_from = 'temp_values')
tempx <- purrr::map2_dfc(e$k_number, e$genome_name, ~ tibble(!!.y := stringi::stri_extract_all_regex(str = .x, pattern = patt.filt$k_numbers))) %>%
dtplyr::lazy_dt() %>%
dplyr::mutate(alt_steps = patt.filt$alt_steps,
group_col = dplyr::row_number()) %>%
dplyr::relocate(c(alt_steps, group_col), .before = 1) %>%
dplyr::group_by(alt_steps, group_col) %>%
dplyr::mutate(dplyr::across(dplyr::everything(), ~ paste0(unlist(.x[!is.na(.x)]), collapse = '_'))) %>% # for each step (or 1 step of multi-step step): glue together duplicate genes or diff genes that do the same step (e.g., in case when requirement is K01626|K03856, if both are present and 2 copies of K01626 present, it will become: K01626_K01626_K03856)
dplyr::ungroup() %>%
dplyr::select(-group_col) %>%
dplyr::mutate(dplyr::across(dplyr::everything(), ~ stringi::stri_replace_first_regex(.x, '^$', NA_character_))) %>%
dplyr::group_by(alt_steps) %>%
summarize(across(everything(), ~ if (any(is.na(.x))) {NA_character_} else {paste0(unlist(.x[!is.na(.x)]), collapse = '_')} )) %>% # This aggregates all steps in multi-step steps that have an _A and _B alternate way of completing - and condenses each _A and _B method into a single row, with the genes separated by '_'; if any piece of an alt step is missing, it returns NA instead
dplyr::ungroup() %>%
dplyr::mutate(alt_steps = str_replace(alt_steps, '(M\\d{5}_\\d{2}_)[:ALPHA:].*', '\\1alt')) %>%
dplyr::group_by(alt_steps) %>%
dplyr::summarize(dplyr::across(dplyr::everything(), ~ paste0(unlist(.x[!is.na(.x)]), collapse = '|'))) %>% #combine alternate versions of the same module step with `|`
dplyr::ungroup() %>%
dplyr::mutate(dplyr::across(dplyr::everything(), ~ stringi::stri_replace_first_regex(.x, '^$', NA_character_))) %>%
dplyr::mutate(alt_steps = stringr::str_replace(alt_steps, '(M\\d{5}_\\d{2}).*', '\\1')) %>%
dplyr::mutate(n = 1) %>%
dplyr::relocate(n, .after = 1) %>%
dplyr::group_by(alt_steps) %>%
summarize(across(everything(), ~ if (any(is.na(.x))) {NA_character_} else {paste0(unlist(.x[!is.na(.x)]), collapse = '+')} )) %>% #combine multi-step module steps together with `+`; returns NA if not all steps of multi-step steps are present, or if the step of a single step step is missing
dplyr::ungroup() %>%
dplyr::mutate(alt_steps = stringr::str_replace(alt_steps, '(M\\d{5}).*', '\\1')) %>%
dplyr::group_by(alt_steps) %>%
dplyr::summarize(dplyr::across(dplyr::everything(), ~ paste0(.x[!is.na(.x)], collapse = ' '))) %>%
dplyr::mutate(dplyr::across(2:dplyr::last_col(), ~ stringi::stri_replace_all_regex(.x, '^$', NA_character_))) %>%
mutate(n = (stri_count_fixed(n, ' ') + 1)) %>% as_tibble()
tempx
tempx <- purrr::map2_dfc(e$k_number, e$genome_name, ~ tibble(!!.y := stringi::stri_extract_all_regex(str = .x, pattern = patt.filt$k_numbers))) %>%
dtplyr::lazy_dt() %>%
dplyr::mutate(alt_steps = patt.filt$alt_steps,
group_col = dplyr::row_number()) %>%
dplyr::relocate(c(alt_steps, group_col), .before = 1) %>%
dplyr::group_by(alt_steps, group_col) %>%
dplyr::mutate(dplyr::across(dplyr::everything(), ~ paste0(unlist(.x[!is.na(.x)]), collapse = '_'))) %>% # for each step (or 1 step of multi-step step): glue together duplicate genes or diff genes that do the same step (e.g., in case when requirement is K01626|K03856, if both are present and 2 copies of K01626 present, it will become: K01626_K01626_K03856)
dplyr::ungroup() %>%
dplyr::select(-group_col) %>%
dplyr::mutate(dplyr::across(dplyr::everything(), ~ stringi::stri_replace_first_regex(.x, '^$', NA_character_))) %>%
dplyr::group_by(alt_steps) %>%
summarize(across(everything(), ~ if (any(is.na(.x))) {NA_character_} else {paste0(unlist(.x[!is.na(.x)]), collapse = '_')} )) %>% # This aggregates all steps in multi-step steps that have an _A and _B alternate way of completing - and condenses each _A and _B method into a single row, with the genes separated by '_'; if any piece of an alt step is missing, it returns NA instead
dplyr::ungroup() %>%
dplyr::mutate(alt_steps = str_replace(alt_steps, '(M\\d{5}_\\d{2}_)[:ALPHA:].*', '\\1alt')) %>%
dplyr::group_by(alt_steps) %>%
dplyr::summarize(dplyr::across(dplyr::everything(), ~ paste0(unlist(.x[!is.na(.x)]), collapse = '|'))) %>% #combine alternate versions of the same module step with `|`
dplyr::ungroup() %>%
dplyr::mutate(dplyr::across(dplyr::everything(), ~ stringi::stri_replace_first_regex(.x, '^$', NA_character_))) %>%
dplyr::mutate(alt_steps = stringr::str_replace(alt_steps, '(M\\d{5}_\\d{2}).*', '\\1')) %>%
dplyr::mutate(n = 1) %>%
dplyr::relocate(n, .after = 1) %>%
dplyr::group_by(alt_steps) %>%
summarize(across(everything(), ~ if (any(is.na(.x))) {NA_character_} else {paste0(unlist(.x[!is.na(.x)]), collapse = '+')} )) %>% #combine multi-step module steps together with `+`; returns NA if not all steps of multi-step steps are present, or if the step of a single step step is missing
dplyr::ungroup() %>%
dplyr::mutate(alt_steps = stringr::str_replace(alt_steps, '(M\\d{5}).*', '\\1')) %>%
dplyr::group_by(alt_steps) %>%
dplyr::summarize(dplyr::across(dplyr::everything(), ~ paste0(.x[!is.na(.x)], collapse = ' '))) %>%
dplyr::mutate(dplyr::across(2:dplyr::last_col(), ~ stringi::stri_replace_all_regex(.x, '^$', NA_character_))) %>%
mutate(n = (stri_count_fixed(n, ' ') + 1)) %>%
mutate(across(3:last_col(), ~ (stringi::stri_count_fixed(.x, ' ') + 1))) %>%
mutate(across(3:last_col(), ~ case_when(is.na(.x) ~ 0, TRUE ~ .x))) %>%
mutate(across(3:last_col(), ~ case_when(.x == n ~ 1, TRUE ~ 0))) %>%
select(-n) %>%
as_tibble() %>%
tidyr::pivot_longer(cols = 2:dplyr::last_col(), names_to = 'genome_name', values_to = 'temp_values') %>%
tidyr::pivot_wider(names_from = 'alt_steps', values_from = 'temp_values')
tempx
identical(y2, tempx)
View(tempx)
patt.filt
