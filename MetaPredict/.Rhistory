View(x_j.tibble_list)
View(x_j.tibble_list[["genome1"]])
all_kegg_modules %>% bind_cols(x_j.tibble_list[[1]])
all_kegg_modules %>% bind_cols(x_j.tibble_list[[1]]) %>% relocate(rule, .after = k_numbers) %>% View()
input_data <- gen %>%
dplyr::ungroup() %>%
{if ('genome_name' %in% colnames(.))
dplyr::select(., k_number, gene_name, genome_name)
else if ('metagenome_name' %in% colnames(.))
dplyr::select(., k_number, gene_name, taxonomy)
else stop(cli::cli_alert_danger('Error: either "genome_name" or "metagenome_name" column is missing from the input data.'))
} %>%
dplyr::rowwise() %>%
dplyr::mutate(x_j = list(as.integer(stringr::str_detect(
string = k_number,
pattern = patt.kegg_modules$k_numbers)))) %>%
dplyr::mutate(k_numbers = list(stringr::str_extract_all(
string = k_number,
pattern = all_kegg_modules$rule))) %>%
#dplyr::mutate(x_j = purrr::map_int(~ k_numbers)) %>%
dplyr::ungroup() %>%
#dplyr::mutate(x_j = purrr::map(x_j, ~
#                                 dplyr::tibble(x_j = .x) %>%
#                                 dplyr::mutate(step = patt.kegg_modules$step) %>%
#                                 dplyr::group_by(step) %>%
#                                 dplyr::summarize(x_j = sum(x_j), .groups = 'drop') %>%
#                                 dplyr::select(-step))) %>%
dplyr::mutate(x_j.k_numbers = purrr::map2(x_j, k_numbers, ~
dplyr::tibble(x_j = .x, k_numbers = .y) %>%
dplyr::mutate(step = patt.kegg_modules$step) %>%
dplyr::group_by(step) %>%
dplyr::summarize(x_j = sum(x_j), k_numbers = paste0(k_numbers, collapse = ' '), .groups = 'drop') %>%
dplyr::select(-step)))
input_data <- gen %>%
dplyr::ungroup() %>%
{if ('genome_name' %in% colnames(.))
dplyr::select(., k_number, gene_name, genome_name)
else if ('metagenome_name' %in% colnames(.))
dplyr::select(., k_number, gene_name, taxonomy)
else stop(cli::cli_alert_danger('Error: either "genome_name" or "metagenome_name" column is missing from the input data.'))
} %>%
dplyr::rowwise() %>%
dplyr::mutate(x_j = list(as.integer(stringr::str_detect(
string = k_number,
pattern = patt.kegg_modules$k_numbers)))) %>%
dplyr::mutate(k_numbers = list(stringr::str_extract_all(
string = k_number,
pattern = patt.kegg_modules$k_numbers))) %>%
#dplyr::mutate(x_j = purrr::map_int(~ k_numbers)) %>%
dplyr::ungroup() %>%
#dplyr::mutate(x_j = purrr::map(x_j, ~
#                                 dplyr::tibble(x_j = .x) %>%
#                                 dplyr::mutate(step = patt.kegg_modules$step) %>%
#                                 dplyr::group_by(step) %>%
#                                 dplyr::summarize(x_j = sum(x_j), .groups = 'drop') %>%
#                                 dplyr::select(-step))) %>%
dplyr::mutate(x_j.k_numbers = purrr::map2(x_j, k_numbers, ~
dplyr::tibble(x_j = .x, k_numbers = .y) %>%
dplyr::mutate(step = patt.kegg_modules$step) %>%
dplyr::group_by(step) %>%
dplyr::summarize(x_j = sum(x_j), k_numbers = paste0(k_numbers, collapse = ' '), .groups = 'drop') %>%
dplyr::select(-step)))
View(input_data)
View(input_data[[6]][[1]])
input_data <- gen %>%
dplyr::ungroup() %>%
{if ('genome_name' %in% colnames(.))
dplyr::select(., k_number, gene_name, genome_name)
else if ('metagenome_name' %in% colnames(.))
dplyr::select(., k_number, gene_name, taxonomy)
else stop(cli::cli_alert_danger('Error: either "genome_name" or "metagenome_name" column is missing from the input data.'))
} %>%
dplyr::rowwise() %>%
dplyr::mutate(x_j = list(as.integer(stringr::str_detect(
string = k_number,
pattern = patt.kegg_modules$k_numbers)))) %>%
dplyr::mutate(k_numbers = list(stringr::str_extract_all(
string = k_number,
pattern = patt.kegg_modules$k_numbers))) %>%
#dplyr::mutate(x_j = purrr::map_int(~ k_numbers)) %>%
dplyr::ungroup() %>%
#dplyr::mutate(x_j = purrr::map(x_j, ~
#                                 dplyr::tibble(x_j = .x) %>%
#                                 dplyr::mutate(step = patt.kegg_modules$step) %>%
#                                 dplyr::group_by(step) %>%
#                                 dplyr::summarize(x_j = sum(x_j), .groups = 'drop') %>%
#                                 dplyr::select(-step))) %>%
dplyr::mutate(x_j.k_numbers = purrr::map2(x_j, k_numbers, ~
dplyr::tibble(x_j = .x, k_numbers = .y) %>%
dplyr::mutate(step = patt.kegg_modules$step) %>%
dplyr::group_by(step) %>%
dplyr::summarize(x_j = sum(x_j), k_numbers = c(k_numbers), .groups = 'drop') %>%
dplyr::select(-step)))
View(input_data)
View(input_data[[6]][[1]])
input_data <- gen %>%
dplyr::ungroup() %>%
{if ('genome_name' %in% colnames(.))
dplyr::select(., k_number, gene_name, genome_name)
else if ('metagenome_name' %in% colnames(.))
dplyr::select(., k_number, gene_name, taxonomy)
else stop(cli::cli_alert_danger('Error: either "genome_name" or "metagenome_name" column is missing from the input data.'))
} %>%
dplyr::rowwise() %>%
dplyr::mutate(x_j = list(as.integer(stringr::str_detect(
string = k_number,
pattern = patt.kegg_modules$k_numbers)))) %>%
dplyr::mutate(k_numbers = list(stringr::str_extract_all(
string = k_number,
pattern = patt.kegg_modules$k_numbers))) %>%
#dplyr::mutate(x_j = purrr::map_int(~ k_numbers)) %>%
dplyr::ungroup() %>%
#dplyr::mutate(x_j = purrr::map(x_j, ~
#                                 dplyr::tibble(x_j = .x) %>%
#                                 dplyr::mutate(step = patt.kegg_modules$step) %>%
#                                 dplyr::group_by(step) %>%
#                                 dplyr::summarize(x_j = sum(x_j), .groups = 'drop') %>%
#                                 dplyr::select(-step))) %>%
dplyr::mutate(x_j.k_numbers = purrr::map2(x_j, k_numbers, ~
dplyr::tibble(x_j = .x, k_numbers = .y) %>%
dplyr::mutate(step = patt.kegg_modules$step) %>%
dplyr::group_by(step) %>%
dplyr::summarize(x_j = sum(x_j), k_numbers = paste0(k_numbers, collapse = ' '), .groups = 'drop') %>%
dplyr::select(-step)))
View(input_data)
View(input_data[[6]][[1]])
input_data$x_j.k_numbers[[1]]
input_data$x_j.k_numbers[1]
input_data$x_j.k_numbers[[1]]
x_j.tibble_list <- list()
x_j.tibble_list <- purrr::imap(input_data$x_j.k_numbers, ~ {
#x_j.tibble_list[[.x]] <- dplyr::tibble(k_numbers = purrr::flatten(input_data$k_numbers[.x]),
#                                x_j = input_data$x_j[[.x]][[1]])
x_j.tibble_list[[.y]] <- .x
}) %>%
{if ('genome_name' %in% colnames(gen))
purrr::set_names(., nm = gen$genome_name)
else if ('metagenome_name' %in% colnames(gen))
purrr::set_names(., nm = input_data$taxonomy)
else stop(cli::cli_alert_danger("Error: 'genome_name' or 'metagenome_name' column is missing from input data."))
}
View(x_j.tibble_list)
View(x_j.tibble_list[["genome1"]])
x_j.tibble_list <- list()
x_j.tibble_list <- purrr::imap(input_data$x_j.k_numbers, ~ {
#x_j.tibble_list[[.x]] <- dplyr::tibble(k_numbers = purrr::flatten(input_data$k_numbers[.x]),
#                                x_j = input_data$x_j[[.x]][[1]])
x_j.tibble_list[[.y]] <- .x %>%
mutate(k_numbers = na_if(is_empty(k_numbers)))
}) %>%
{if ('genome_name' %in% colnames(gen))
purrr::set_names(., nm = gen$genome_name)
else if ('metagenome_name' %in% colnames(gen))
purrr::set_names(., nm = input_data$taxonomy)
else stop(cli::cli_alert_danger("Error: 'genome_name' or 'metagenome_name' column is missing from input data."))
}
is_empty(x_j.tibble_list[[1]])
x_j.tibble_list
x_j.tibble_list <- list()
x_j.tibble_list <- purrr::imap(input_data$x_j.k_numbers, ~ {
x_j.tibble_list <- list()
x_j.tibble_list <- purrr::imap(input_data$x_j.k_numbers, ~ {
#x_j.tibble_list[[.x]] <- dplyr::tibble(k_numbers = purrr::flatten(input_data$k_numbers[.x]),
#                                x_j = input_data$x_j[[.x]][[1]])
x_j.tibble_list[[.y]] <- .x %>%
mutate(k_numbers = na_if(character(0))
}) %>%
{if ('genome_name' %in% colnames(gen))
x_j.tibble_list <- list()
x_j.tibble_list <- purrr::imap(input_data$x_j.k_numbers, ~ {
#x_j.tibble_list[[.x]] <- dplyr::tibble(k_numbers = purrr::flatten(input_data$k_numbers[.x]),
#                                x_j = input_data$x_j[[.x]][[1]])
x_j.tibble_list[[.y]] <- .x %>%
mutate(k_numbers = na_if(character(0)))
}) %>%
{if ('genome_name' %in% colnames(gen))
purrr::set_names(., nm = gen$genome_name)
else if ('metagenome_name' %in% colnames(gen))
purrr::set_names(., nm = input_data$taxonomy)
else stop(cli::cli_alert_danger("Error: 'genome_name' or 'metagenome_name' column is missing from input data."))
}
x_j.tibble_list <- list()
x_j.tibble_list <- purrr::imap(input_data$x_j.k_numbers, ~ {
#x_j.tibble_list[[.x]] <- dplyr::tibble(k_numbers = purrr::flatten(input_data$k_numbers[.x]),
#                                x_j = input_data$x_j[[.x]][[1]])
x_j.tibble_list[[.y]] <- .x %>%
mutate(k_numbers = na_if(character(0)))
}) %>%
{if ('genome_name' %in% colnames(gen))
purrr::set_names(., nm = gen$genome_name)
else if ('metagenome_name' %in% colnames(gen))
purrr::set_names(., nm = input_data$taxonomy)
else stop(cli::cli_alert_danger("Error: 'genome_name' or 'metagenome_name' column is missing from input data."))
}
x_j.tibble_list <- list()
x_j.tibble_list <- purrr::imap(input_data$x_j.k_numbers, ~ {
#x_j.tibble_list[[.x]] <- dplyr::tibble(k_numbers = purrr::flatten(input_data$k_numbers[.x]),
#                                x_j = input_data$x_j[[.x]][[1]])
x_j.tibble_list[[.y]] <- .x %>%
mutate(k_numbers = na_if(k_numbers, character(0)))
}) %>%
{if ('genome_name' %in% colnames(gen))
purrr::set_names(., nm = gen$genome_name)
else if ('metagenome_name' %in% colnames(gen))
purrr::set_names(., nm = input_data$taxonomy)
else stop(cli::cli_alert_danger("Error: 'genome_name' or 'metagenome_name' column is missing from input data."))
}
x_j.tibble_list <- list()
x_j.tibble_list <- purrr::imap(input_data$x_j.k_numbers, ~ {
#x_j.tibble_list[[.x]] <- dplyr::tibble(k_numbers = purrr::flatten(input_data$k_numbers[.x]),
#                                x_j = input_data$x_j[[.x]][[1]])
x_j.tibble_list[[.y]] <- .x %>%
mutate(k_numbers = tidyr::replace_na(k_numbers, character(0)))
}) %>%
{if ('genome_name' %in% colnames(gen))
purrr::set_names(., nm = gen$genome_name)
else if ('metagenome_name' %in% colnames(gen))
purrr::set_names(., nm = input_data$taxonomy)
else stop(cli::cli_alert_danger("Error: 'genome_name' or 'metagenome_name' column is missing from input data."))
}
x_j.tibble_list <- list()
x_j.tibble_list <- purrr::imap(input_data$x_j.k_numbers, ~ {
#x_j.tibble_list[[.x]] <- dplyr::tibble(k_numbers = purrr::flatten(input_data$k_numbers[.x]),
#                                x_j = input_data$x_j[[.x]][[1]])
x_j.tibble_list[[.y]] <- .x %>%
mutate(k_numbers = tidyr::replace_na(character(0)))
}) %>%
{if ('genome_name' %in% colnames(gen))
purrr::set_names(., nm = gen$genome_name)
else if ('metagenome_name' %in% colnames(gen))
purrr::set_names(., nm = input_data$taxonomy)
else stop(cli::cli_alert_danger("Error: 'genome_name' or 'metagenome_name' column is missing from input data."))
}
x_j.tibble_list <- list()
x_j.tibble_list <- purrr::imap(input_data$x_j.k_numbers, ~ {
#x_j.tibble_list[[.x]] <- dplyr::tibble(k_numbers = purrr::flatten(input_data$k_numbers[.x]),
#                                x_j = input_data$x_j[[.x]][[1]])
x_j.tibble_list[[.y]] <- .x %>%
mutate(k_numbers = dplyr::case_when(k_numbers == character(0) ~ NA_character_,
TRUE ~ k_numbers))
}) %>%
{if ('genome_name' %in% colnames(gen))
purrr::set_names(., nm = gen$genome_name)
else if ('metagenome_name' %in% colnames(gen))
purrr::set_names(., nm = input_data$taxonomy)
else stop(cli::cli_alert_danger("Error: 'genome_name' or 'metagenome_name' column is missing from input data."))
}
x_j.tibble_list <- list()
x_j.tibble_list <- purrr::imap(input_data$x_j.k_numbers, ~ {
#x_j.tibble_list[[.x]] <- dplyr::tibble(k_numbers = purrr::flatten(input_data$k_numbers[.x]),
#                                x_j = input_data$x_j[[.x]][[1]])
x_j.tibble_list[[.y]] <- .x
}) %>%
{if ('genome_name' %in% colnames(gen))
purrr::set_names(., nm = gen$genome_name)
else if ('metagenome_name' %in% colnames(gen))
purrr::set_names(., nm = input_data$taxonomy)
else stop(cli::cli_alert_danger("Error: 'genome_name' or 'metagenome_name' column is missing from input data."))
}
# doesnt work on module steps that contain more than one gene
all_kegg_modules %>% bind_cols(x_j.tibble_list[[1]]) %>% relocate(rule, .after = k_numbers) %>% View()
x_j.tibble_list$genome1 %>% mutate(k_numbers = str_c(k_numbers))
x_j.tibble_list$genome1 %>% mutate(k_numbers = paste0(k_numbers, collapse = ' '))
x_j.tibble_list$genome1 %>% mutate(k_numbers = str_c(k_numbers, collapse = ' '))
x_j.tibble_list$genome1 %>% mutate(k_numbers = str_glue(k_numbers, collapse = ' '))
x_j.tibble_list$genome1 %>% mutate(k_numbers = str_glue(k_numbers))
x_j.tibble_list$genome1 %>% mutate(k_numbers = str_c(k_numbers))
x_j.tibble_list$genome1 %>% mutate(k_numbers = str_wrap(k_numbers))
x_j.tibble_list$genome1 %>% mutate(k_numbers = c(k_numbers))
x_j.tibble_list$genome1 %>% mutate(k_numbers = rlang::squash(k_numbers))
x_j.tibble_list$genome1 %>% mutate(k_numbers = as.character(k_numbers))
x_j.tibble_list$genome1 %>% mutate(k_numbers = as.character.default(k_numbers))
x_j.tibble_list$genome1 %>% mutate(k_numbers = str_replace(k_numbers, character(0), NA))
x_j.tibble_list$genome1 %>% mutate(k_numbers = str_replace(k_numbers, character(0), NA_character_))
x_j.tibble_list$genome1 %>% mutate(k_numbers = str_replace_all(k_numbers, character(0), NA_character_))
x_j.tibble_list$genome1 %>% mutate(k_numbers = paste(k_numbers, sep = '', collapse = ''))
x_j.tibble_list$genome1 %>% rowwise() %>% mutate(k_numbers = paste(k_numbers, sep = '', collapse = ''))
x_j.tibble_list$genome1 %>% rowwise() %>% mutate(k_numbers = list(paste(k_numbers, sep = '', collapse = '')))
x_j.tibble_list$genome1 %>% rowwise() %>% mutate(k_numbers = list(paste(k_numbers, sep = '', collapse = ''))) %>% unnest(cols = 2)
x_j.tibble_list$genome1 %>% rowwise() %>% mutate(k_numbers = list(paste0(k_numbers, collapse = ''))) %>% unnest(cols = 2)
x_j.tibble_list$genome1 %>% rowwise() %>% mutate(k_numbers = list(str_c(k_numbers, collapse = ''))) %>% unnest(cols = 2)
x_j.tibble_list$genome1 %>% rowwise() %>% mutate(k_numbers = list(as.character(k_numbers, collapse = ''))) %>% unnest(cols = 2)
x_j.tibble_list$genome1 %>% rowwise() %>% mutate(k_numbers = unlist(k_numbers))
str_detect(x_j.tibble_list$genome1$k_numbers, character(0))
str_detect(x_j.tibble_list$genome1$k_numbers, 'character(0)')
str_detect(x_j.tibble_list$genome1$k_numbers, character(0))
str_detect(x_j.tibble_list$genome1$k_numbers, '')
x_j.tibble_list$genome1 %>% mutate(k_numbers = case_when(length(k_numbers) == 0 ~ NA_character_, TRUE ~ k_numbers))
x_j.tibble_list$genome1 %>% mutate(k_numbers = case_when(length == 0 ~ NA_character_, TRUE ~ k_numbers))
x_j.tibble_list$genome1 %>% mutate(k_numbers = case_when(is_empty(k_numbers) ~ NA_character_, TRUE ~ k_numbers))
x_j.tibble_list$genome1 %>% mutate(k_numbers = case_when(identical(k_numbers, character(0)) ~ NA_character_, TRUE ~ k_numbers))
x_j.tibble_list$genome1 %>% mutate(k_numbers = case_when(identical(k_numbers, character(0)) ~ NA_character_, TRUE ~ k_numbers))
x_j.tibble_list$genome1 %>% mutate(k_numbers = case_when(k_numbers == 'character(0)' ~ NA_character_, TRUE ~ k_numbers))
input_data <- gen %>%
dplyr::ungroup() %>%
{if ('genome_name' %in% colnames(.))
dplyr::select(., k_number, gene_name, genome_name)
else if ('metagenome_name' %in% colnames(.))
dplyr::select(., k_number, gene_name, taxonomy)
else stop(cli::cli_alert_danger('Error: either "genome_name" or "metagenome_name" column is missing from the input data.'))
} %>%
dplyr::rowwise() %>%
dplyr::mutate(x_j = list(as.integer(stringr::str_detect(
string = k_number,
pattern = patt.kegg_modules$k_numbers)))) %>%
dplyr::mutate(k_numbers = list(stringr::str_extract_all(
string = k_number,
pattern = patt.kegg_modules$k_numbers))) %>%
#dplyr::mutate(x_j = purrr::map_int(~ k_numbers)) %>%
dplyr::ungroup() %>%
#dplyr::mutate(x_j = purrr::map(x_j, ~
#                                 dplyr::tibble(x_j = .x) %>%
#                                 dplyr::mutate(step = patt.kegg_modules$step) %>%
#                                 dplyr::group_by(step) %>%
#                                 dplyr::summarize(x_j = sum(x_j), .groups = 'drop') %>%
#                                 dplyr::select(-step))) %>%
dplyr::mutate(x_j.k_numbers = purrr::map2(x_j, k_numbers, ~
dplyr::tibble(x_j = .x, k_numbers = .y) %>%
dplyr::mutate(step = patt.kegg_modules$step,
k_numbers = case_when(
k_numbers == 'character(0)' ~ NA_character_,
TRUE ~ k_numbers)) %>%
dplyr::group_by(step) %>%
dplyr::summarize(x_j = sum(x_j), k_numbers = paste0(k_numbers, collapse = ' '), .groups = 'drop') %>%
dplyr::select(-step)))
input_data <- gen %>%
dplyr::ungroup() %>%
{if ('genome_name' %in% colnames(.))
dplyr::select(., k_number, gene_name, genome_name)
else if ('metagenome_name' %in% colnames(.))
dplyr::select(., k_number, gene_name, taxonomy)
else stop(cli::cli_alert_danger('Error: either "genome_name" or "metagenome_name" column is missing from the input data.'))
} %>%
dplyr::rowwise() %>%
dplyr::mutate(x_j = list(as.integer(stringr::str_detect(
string = k_number,
pattern = patt.kegg_modules$k_numbers)))) %>%
dplyr::mutate(k_numbers = list(stringr::str_extract_all(
string = k_number,
pattern = patt.kegg_modules$k_numbers))) %>%
#dplyr::mutate(x_j = purrr::map_int(~ k_numbers)) %>%
dplyr::ungroup() %>%
#dplyr::mutate(x_j = purrr::map(x_j, ~
#                                 dplyr::tibble(x_j = .x) %>%
#                                 dplyr::mutate(step = patt.kegg_modules$step) %>%
#                                 dplyr::group_by(step) %>%
#                                 dplyr::summarize(x_j = sum(x_j), .groups = 'drop') %>%
#                                 dplyr::select(-step))) %>%
dplyr::mutate(x_j.k_numbers = purrr::map2(x_j, k_numbers, ~
dplyr::tibble(x_j = .x, k_nums = .y) %>%
dplyr::mutate(step = patt.kegg_modules$step,
k_nums = case_when(
k_nums == 'character(0)' ~ NA_character_,
TRUE ~ k_nums)) %>%
dplyr::group_by(step) %>%
dplyr::summarize(x_j = sum(x_j), k_numbers = paste0(k_numbers, collapse = ' '), .groups = 'drop') %>%
dplyr::select(-step)))
rlang::last_error()
input_data <- gen %>%
dplyr::ungroup() %>%
{if ('genome_name' %in% colnames(.))
dplyr::select(., k_number, gene_name, genome_name)
else if ('metagenome_name' %in% colnames(.))
dplyr::select(., k_number, gene_name, taxonomy)
else stop(cli::cli_alert_danger('Error: either "genome_name" or "metagenome_name" column is missing from the input data.'))
} %>%
dplyr::rowwise() %>%
dplyr::mutate(x_j = list(as.integer(stringr::str_detect(
string = k_number,
pattern = patt.kegg_modules$k_numbers)))) %>%
dplyr::mutate(k_numbers = list(stringr::str_extract_all(
string = k_number,
pattern = patt.kegg_modules$k_numbers))) %>%
#dplyr::mutate(x_j = purrr::map_int(~ k_numbers)) %>%
dplyr::ungroup() %>%
#dplyr::mutate(x_j = purrr::map(x_j, ~
#                                 dplyr::tibble(x_j = .x) %>%
#                                 dplyr::mutate(step = patt.kegg_modules$step) %>%
#                                 dplyr::group_by(step) %>%
#                                 dplyr::summarize(x_j = sum(x_j), .groups = 'drop') %>%
#                                 dplyr::select(-step))) %>%
dplyr::mutate(x_j.k_numbers = purrr::map2(x_j, k_numbers, ~
dplyr::tibble(x_j = .x, k_numbers = .y) %>%
dplyr::mutate(step = patt.kegg_modules$step) %>%
dplyr::mutate(k_numbers = case_when(k_numbers == 'character(0)' ~ NA_character_,
TRUE ~ k_numbers)) %>%
dplyr::group_by(step) %>%
dplyr::summarize(x_j = sum(x_j), k_numbers = paste0(k_numbers, collapse = ' '), .groups = 'drop') %>%
dplyr::select(-step)))
rlang::last_error()
View(x_j.tibble_list)
View(x_j.tibble_list[["genome1"]])
x_j.tibble_list$genome1$k_numbers %>% class()
input_data <- gen %>%
dplyr::ungroup() %>%
{if ('genome_name' %in% colnames(.))
dplyr::select(., k_number, gene_name, genome_name)
else if ('metagenome_name' %in% colnames(.))
dplyr::select(., k_number, gene_name, taxonomy)
else stop(cli::cli_alert_danger('Error: either "genome_name" or "metagenome_name" column is missing from the input data.'))
} %>%
dplyr::rowwise() %>%
dplyr::mutate(x_j = list(as.integer(stringr::str_detect(
string = k_number,
pattern = patt.kegg_modules$k_numbers)))) %>%
dplyr::mutate(k_numbers = list(stringr::str_extract_all(
string = k_number,
pattern = patt.kegg_modules$k_numbers))) %>%
#dplyr::mutate(x_j = purrr::map_int(~ k_numbers)) %>%
dplyr::ungroup() %>%
#dplyr::mutate(x_j = purrr::map(x_j, ~
#                                 dplyr::tibble(x_j = .x) %>%
#                                 dplyr::mutate(step = patt.kegg_modules$step) %>%
#                                 dplyr::group_by(step) %>%
#                                 dplyr::summarize(x_j = sum(x_j), .groups = 'drop') %>%
#                                 dplyr::select(-step))) %>%
dplyr::mutate(x_j.k_numbers = purrr::map2(x_j, k_numbers, ~
dplyr::tibble(x_j = .x, k_numbers = .y) %>%
dplyr::mutate(step = patt.kegg_modules$step) %>%
dplyr::rowwise() %>%
dplyr::mutate(k_numbers = case_when(k_numbers == 'character(0)' ~ NA_character_,
TRUE ~ k_numbers)) %>%
dplyr::ungroup() %>%
dplyr::group_by(step) %>%
dplyr::summarize(x_j = sum(x_j), k_numbers = paste0(k_numbers, collapse = ' '), .groups = 'drop') %>%
dplyr::select(-step)))
t
input_data <- gen %>%
dplyr::ungroup() %>%
{if ('genome_name' %in% colnames(.))
dplyr::select(., k_number, gene_name, genome_name)
else if ('metagenome_name' %in% colnames(.))
dplyr::select(., k_number, gene_name, taxonomy)
else stop(cli::cli_alert_danger('Error: either "genome_name" or "metagenome_name" column is missing from the input data.'))
} %>%
dplyr::rowwise() %>%
dplyr::mutate(x_j = list(as.integer(stringr::str_detect(
string = k_number,
pattern = patt.kegg_modules$k_numbers)))) %>%
dplyr::mutate(k_numbers = list(stringr::str_extract_all(
string = k_number,
pattern = patt.kegg_modules$k_numbers))) %>%
#dplyr::mutate(x_j = purrr::map_int(~ k_numbers)) %>%
dplyr::ungroup() %>%
#dplyr::mutate(x_j = purrr::map(x_j, ~
#                                 dplyr::tibble(x_j = .x) %>%
#                                 dplyr::mutate(step = patt.kegg_modules$step) %>%
#                                 dplyr::group_by(step) %>%
#                                 dplyr::summarize(x_j = sum(x_j), .groups = 'drop') %>%
#                                 dplyr::select(-step))) %>%
dplyr::mutate(x_j.k_numbers = purrr::map2(x_j, k_numbers, ~
dplyr::tibble(x_j = .x, k_numbers = .y) %>%
dplyr::mutate(step = patt.kegg_modules$step) %>%
dplyr::rowwise() %>%
dplyr::mutate(k_numbers = list(case_when(k_numbers == 'character(0)' ~ NA_character_,
TRUE ~ k_numbers))) %>%
dplyr::ungroup() %>%
dplyr::group_by(step) %>%
dplyr::summarize(x_j = sum(x_j), k_numbers = paste0(k_numbers, collapse = ' '), .groups = 'drop') %>%
dplyr::select(-step)))
View(input_data)
View(input_data[[6]][[1]])
input_data <- gen %>%
dplyr::ungroup() %>%
{if ('genome_name' %in% colnames(.))
dplyr::select(., k_number, gene_name, genome_name)
else if ('metagenome_name' %in% colnames(.))
dplyr::select(., k_number, gene_name, taxonomy)
else stop(cli::cli_alert_danger('Error: either "genome_name" or "metagenome_name" column is missing from the input data.'))
} %>%
dplyr::rowwise() %>%
dplyr::mutate(x_j = list(as.integer(stringr::str_detect(
string = k_number,
pattern = patt.kegg_modules$k_numbers)))) %>%
dplyr::mutate(k_numbers = list(stringr::str_extract_all(
string = k_number,
pattern = patt.kegg_modules$k_numbers))) %>%
dplyr::mutate(k_numbers = list(case_when(
k_numbers == 'character(0)' ~ NA_character_,
TRUE ~ k_numbers))) %>%
#dplyr::mutate(x_j = purrr::map_int(~ k_numbers)) %>%
dplyr::ungroup()
library(tidyverse)
input_data <- gen %>%
dplyr::ungroup() %>%
{if ('genome_name' %in% colnames(.))
dplyr::select(., k_number, gene_name, genome_name)
else if ('metagenome_name' %in% colnames(.))
dplyr::select(., k_number, gene_name, taxonomy)
else stop(cli::cli_alert_danger('Error: either "genome_name" or "metagenome_name" column is missing from the input data.'))
} %>%
dplyr::rowwise() %>%
dplyr::mutate(x_j = list(as.integer(stringr::str_detect(
string = k_number,
pattern = patt.kegg_modules$k_numbers)))) %>%
dplyr::mutate(k_numbers = list(stringr::str_extract_all(
string = k_number,
pattern = patt.kegg_modules$k_numbers))) %>%
#dplyr::mutate(x_j = purrr::map_int(~ k_numbers)) %>%
dplyr::ungroup() %>%
#dplyr::mutate(x_j = purrr::map(x_j, ~
#                                 dplyr::tibble(x_j = .x) %>%
#                                 dplyr::mutate(step = patt.kegg_modules$step) %>%
#                                 dplyr::group_by(step) %>%
#                                 dplyr::summarize(x_j = sum(x_j), .groups = 'drop') %>%
#                                 dplyr::select(-step))) %>%
dplyr::mutate(x_j.k_numbers = purrr::map2(x_j, k_numbers, ~
dplyr::tibble(x_j = .x, k_numbers = .y) %>%
dplyr::mutate(step = patt.kegg_modules$step) %>%
dplyr::group_by(step) %>%
dplyr::summarize(x_j = sum(x_j), k_numbers = paste0(k_numbers, collapse = ' '), .groups = 'drop') %>%
dplyr::select(-step)))
