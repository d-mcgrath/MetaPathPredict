ls
map
purrr::map
purrr::as_mapper
lapply(c('magrittr', 'tidyverse'), library, character.only = T)
map(.x = )
map(.x = 'b', .f = print)
devtools::document()
1e-3
devtools::document()
load('~/Documents/metapredict_project/reqd-metapredict-data-objects-v3.RData')
install.packages('usethis')
install.packages('usethis')
load('~/Documents/metapredict_project/reqd-metapredict-data-objects-v3.RData')
usethis::use_data(bacteria.rxn.matrix, imgm.archaea.rxn.matrix, ko_term.tibble, pathways.tibble)
usethis::use_data(bacteria.rxn.matrix, imgm.archaea.rxn.matrix, ko_term.tibble, pathways.tibble, internal = T)
devtools::document()
devtools::document()
MetaPredict()
devtools::document()
library('tidyveres')
library('tidyverse')
library('magrittr')
library('tidyverse')
devtools::document()
install.packages('dplyr')
install.packages("dplyr")
devtools::document()
install.packages('tidyverse')
x == TRUE
x = TRUE
if (x == TRUE) {print('correct')}
rm(x)
devtools::document()
library('MetaPredict')
library('devtools')
devtools::document()
test = read_data('~/Documents/metapredict_project/test-metapred-ko-tsv-output/CarAnox_mtb2_1016-ko.tsv')
test = read_data('~/Documents/metapredict_project/test-metapred-ko-tsv-output')
View(test)
test = MetaPredict(test)
test = MetaPredict(test, '~/Documents/metapredict_project/test-metapred-ko-tsv-output/taxon.csv')
3 * 10^2
3 * 10^24
library('furrr')
availableCores()
document()
devtools::document()
rm(test)
devtools::document()
devtools::document()
getwd()
setwd('~/MetaPredict/')
devtools::document()
devtools::document()
test <- read_data('~/Documents/metapredict_project/test-metapred-ko-tsv-output/CarAnox_mtb2_1016-ko.tsv')
test <- read_data('~/Documents/metapredict_project/test-metapred-ko-tsv-output')
test <- read_data('~/Documents/metapredict_project/test-metapred-ko-tsv-output')
readr::read_delim('~/Documents/metapredict_project/test-metapred-ko-tsv-output/CarAnox_mtb2_1016-ko.tsv')
readr::read_delim('~/Documents/metapredict_project/test-metapred-ko-tsv-output/CarAnox_mtb2_1016-ko.tsv', delim = '\t')
test <- read_data('~/Documents/metapredict_project/test-metapred-ko-tsv-output')
test <- read_data('~/Documents/metapredict_project/test-metapred-ko-tsv-output')
read_data
devtools::document()
read_data
test <- read_data('~/Documents/metapredict_project/test-metapred-ko-tsv-output')
res = MetaPredict(test)
res = MetaPredict(test, '~/Documents/metapredict_project/test-metapred-ko-tsv-output/taxon.csv')
View(res)
View(res[[1]])
View(res[[1]])
devtools::document()
test2 <- read_data('~/Documents/metapredict_project/test-metapred-ko-tsv-output')
res2 <- MetaPredict(test, '~/Documents/metapredict_project/test-metapred-ko-tsv-output/taxon.csv')
View(test2)
all(res == res2)
all(res[[1]] == res2[[1]])
res[[1]]
res[[1]][[1]]
identical(res, res2)
#started at 1:41pm
#ended at 1:47pm
#significant speed-up!!!! ~6 minutes processing time on one core.
#previous test took 30+ minutes to complete
identical(res, res2)
View(res2)
View(res2[[1]])
View(res)
View(res[[1]])
document()
getwd()
document()
View(test)
iris
iris %>% group_by(Species) %>% summarize(y_j = sum(.data[['Petal.Length']]))
iris %>% group_by(Species) %>% summarize(y_j = sum(.data[['Petal.Length']], n_j = sum(.data[['Petal.Width']])))
iris %>% group_by(Species) %>% summarize(y_j = sum(.data[['Petal.Length']], n_j = sum(.data[['Petal.Width']])))
iris %>%
group_by(Species) %>%
summarize(y_j = sum(.data[['Petal.Length']], n_j = sum(.data[['Petal.Width']])))
iris %>%
group_by(Species) %>%
summarize(y_j = sum(.data[['Petal.Length']], n_j = sum(.data[['Petal.Width']])))
iris %>%
group_by(Species) %>%
summarize(y_j = sum(.data[['Petal.Length']], n_j = length(.data[['Petal.Width']])))
iris %>%
group_by(Species) %>%
summarize(y_j = sum(.data[['Petal.Length']], n_j = length(.data[['Petal.Width']])))
iris %>%
group_by(Species) %>%
summarize(y_j = sum(.data[['Petal.Length']], pi = length(.data[['Petal.Width']])))
View(iris %>%
group_by(Species) %>%
summarize(y_j = sum(.data[['Petal.Length']], pi = length(.data[['Petal.Width']])))
)
View(iris %>%
group_by(Species) %>%
summarize(n_j = length(.data[['Petal.Width']])))
x <- iris %>%
group_by(Species) %>%
summarize(y_j = sum(.data[['Petal.Length']], n_j = length(.data[['Petal.Width']])))
x
View(x)
names(iris)
x <- iris %>%
group_by(Species) %>%
summarize(y_j = sum(.data[['Petal.Length']]))  %>%
summarize(n_j = length(.data[['Petal.Width']]))
x <- iris %>%
group_by(Species) %>%
summarize(y_j = sum(.data[['Petal.Length']]), n_j = length(.data[['Petal.Width']]))
x
rm(x)
iris %>%
group_by(Species) %>%
summarize(y_j = sum(.data[['Petal.Length']]), n_j = length(.data[['Petal.Width']]))
iris %>%
group_by(Species) %>%
summarize(y_j = sum(.data[['Petal.Length']]), n_j = length(.data[['Petal.Width']]))
(iris %>%
group_by(Species) %>%
summarize(y_j = sum(.data[['Petal.Length']]), n_j = length(.data[['Petal.Width']]))
)$n_j
iris %>%
group_by(Species) %>%
summarize(y_j = sum(.data[['Petal.Length']]), n_j = length(.data[['Petal.Width']]))$n_j
(iris %>% group_by(Species) %>% summarize(y_j = sum(.data[['Petal.Length']]), n_j = length(.data[['Petal.Width']])))$y_j
document()
document()
test3 = read_data('~/Documents/metapredict_project/test-metapred-ko-tsv-output/')
res3 = MetaPredict(test3, '~/Documents/metapredict_project/test-metapred-ko-tsv-output/taxon.csv')
identical(res3,res)
identical(res,res2)
identical(res2,res3)
View(res3[[1]])
identical(res3[[1]]$probability, res2[[1]]$probability)
ident(res, res3)
ident(res,res3)
identical(res,res3)
identical(res3[[1]]$organism, res2[[1]]$organism)
res.test = res
res.test = res.test %>% select(-organism)
res.test[[1]] = res.test[[1]] %>% select(-organism)
res.test3 = res3
res.test3[[1]] = res.test3[[1]] %>% select(-organism)
identical(res.test, res.test3)
rm(res.test, res.test3)
1/
2
x = c(1,2,3,4,5)
x
y <- vector(mode = "list", length = length(x))
y
document()
rm(x,y)
test4 = read_data('~/Documents/metapredict_project/test-metapred-ko-tsv-output/')
res4 = MetaPredict(test4, '~/Documents/metapredict_project/test-metapred-ko-tsv-output/taxon.csv')
document()
x = tibble()
x = dplyr::tibble()
x
is.data.frame(x)
class(x)
x = list(1 = c(2,3), 2 = 4)
x = list(at = 'hi', by = 'lo')
x
names(x)
rm(x)
devtools::document()
c(3,4) %in% c(3,4,5,6,7,8,0)
devtools::document()
devtools::document()
ls
devtools::document()
test = readr::read_tsv('~/Documents/metapredict_project/test-metapred-ko-tsv-output/CarAnox_mtb2_1016-ko.tsv')
View(test)
indat = read_data(Data = test)
x = 5
if (is.numeric(x) | is.character(x) & x >= 5) {print('yes')}
devtools::document()
test = readr::read_tsv('~/Documents/metapredict_project/test-metapred-ko-tsv-output/CarAnox_mtb2_1016-ko.tsv')
View(test)
indat = read_data(Data = test)
is.data.frame(test)
View(test)
all(purrr::map(test, ~ {
c(stringr::regex('KO', ignore_case = TRUE),
stringr::regex('evalue|e-value', ignore_case = TRUE)) %in% names(.x)
})))
all(purrr::map(test, ~ {
c(stringr::regex('KO', ignore_case = TRUE),
stringr::regex('evalue|e-value', ignore_case = TRUE)) %in% names(.x) }))
names(test)
c(stringr::regex('KO', ignore_case = TRUE),
stringr::regex('evalue|e-value', ignore_case = TRUE)) %in% names(test)
c(stringr::regex('KO', ignore_case = TRUE),
stringr::regex('evalue|E-value', ignore_case = TRUE)) %in% names(test)
c(stringr::regex('KO', ignore_case = TRUE),
stringr::regex('E-value', ignore_case = TRUE)) %in% names(test)
paste('KO', 'evalue', 'e-value', collapse = '|')
paste(c('KO', 'evalue', 'e-value'), collapse = '|')
grepl('KO|evalue|e-value', test, ignore.case = T)
grepl('KO|evalue|e-value', names(test), ignore.case = T)
names(test)
'KO|evalue|e-value' %in% names(test)
regexpr('evalue|e-value', ignore.case = T) %in% names(test)
regexpr('evalue|e-value', names(test), ignore.case = T)
grepl(names(test), 'KO', ignore.case = T)
grepl(paste(names(test), collapse = '|'), 'KO', ignore.case = T)
grepl(paste(names(test), collapse = '|'), 'KO|evalue', ignore.case = T)
grepl(paste(names(test), collapse = '|'), c('KO', 'evalue'), ignore.case = T)
grepl(paste(names(test), collapse = '|'), c('KO', 'evalue|e-value'), ignore.case = T)
all(grepl(paste(names(test), collapse = '|'),
c('KO', 'evalue|e-value'), ignore.case = T))
purrr::map(test, ~ {
grepl(paste(names(.x), collapse = '|'),
c('KO', 'evalue|e-value'), ignore.case = T)
})
all(purrr::map(test, ~ {
grepl(paste(names(.x), collapse = '|'),
c('KO', 'evalue|e-value'), ignore.case = T)
})
)
(purrr::map(test, ~ {
grepl(paste(names(.x), collapse = '|'),
c('KO', 'evalue|e-value'), ignore.case = T)
})
)
purrr::every(test, ~ {
grepl(paste(names(.x), collapse = '|'),
c('KO', 'evalue|e-value'), ignore.case = T)
})
devtools::document()
indat = read_data(Data = test)
devtools::document()
indat = read_data(Data = test)
devtools::document()
indat = read_data(Data = test)
x
x = list(test)
x
x[['test']]
x
x = list()
x[[1]] = test
x
x[['test']]
x
x = list
x = list()
x[['test']] = test
x
x[[1]]
identical(x[['test']], x[[1]])
is.list(test)
length(test)
length(as.list(test))
length(list(test))
x
x[[2]] = test
length(x)
length(list(test))
is.data.frame(x)
is.list(x)
is.list(test)
length(x)
length(list(x))
length(list(c(x,x)))
list(test)
list(c(test, test))
list(c(test, test))
length(list(c(test, test)))
length(list(x = test, y = test))
is.data.frame(c(test, test))
c(test,tet)
c(test,test)
View(c(test,test))
devtools::dco
devtools::document()
indat = read_data(Data = test)
read_data
devtools::document()
devtools::document()
indat = read_data(Data = test)
quote(test)
Quote(test)
Quote(!!test)
rlang::enquo(test)
test
enquote(test)
deparse(substitute(test))
devtools::document()
indat = read_data(test)
devtools::document()
devtools::document()
rm(test, x)
devtools::document()
sessionInfo()
test = readr::read_tsv('~/Documents/metapredict_project/test-metapred-ko-tsv-output/CarAnox_mtb2_1016-ko.tsv')
indat = read_data(test)
View(test)
View(indat)
x = c(3,4)
class(x)
is.vector(x)
is.list(x)
indat = read_data(Data = test)
View(indat)
devtools::document()
read_data <- function(Data = NULL, filePath = NULL, filePattern = '*-ko.tsv', #still needs to accept single input files more easily...
kofamscan = TRUE, evalue = 1e-3, delim = '\t') {
message('Parsing HMM/Blast hits and E-values into MetaPredict. Using E-value cutoff: ', evalue)
res <- list()
if (is.null(Data)) {
index <- list.files(path = filePath, pattern = filePattern, full.names = TRUE)
}
if (is.list(Data) & purrr::every(Data, ~ {
grepl(paste(names(.x), collapse = '|'),
c('KO', 'evalue|e-value'), ignore.case = T)
})) {
index <- length(Data)
}
res <- furrr::future_map(1:length(index), .progress = T, ~ {
if (is.null(Data)) {
col <- sub(paste('(.*)', filePattern, sep = ''), '\\1', index[.x], perl = T)
res[[.x]] <- readr::read_delim(index[.x], col_types = readr::cols(), delim = delim)
} else if (is.data.frame(Data) & length(list(Data)) == 1) {
res[[.x]] <- Data
} else if (is.list(Data) & length(Data) >= 1) {
res[[.x]] <- Data[[.x]]
} else {
stop('Data must be of class dataframe, list of dataframes, or input flatfile/flatfile(s).')
}
if (kofamscan == TRUE) {
res[[.x]] <- res[[.x]] %>% dplyr::slice(-1)
}
res[[.x]] <- res[[.x]] %>%
dplyr::select(KO, `E-value`) %>%
dplyr::mutate(`E-value` = as.numeric(`E-value`)) %>%
dplyr::filter(`E-value` <= evalue) %>%
dplyr::select(KO)
if (is.null(Data)) {
res[[.x]] <- res[[.x]] %>%
dplyr::rename(!!col := KO) %>%
dplyr::filter(!(duplicated(.data[[col]])))
} else if (is.data.frame(Data) & length(list(Data)) == 1) {
res[[.x]] <- res[[.x]] %>%
dplyr::rename(!!deparse(quote(Data)) := KO) %>%
dplyr::filter(!(duplicated(.data[[!!deparse(quote(Data))]])))
} else {
res[[.x]] <- res[[.x]] %>%
dplyr::rename(!!Data[[.x]] := KO) %>%
dplyr::filter(!(duplicated(.data[[Data[[.x]]]])))
}
})
res <- res %>%
dplyr::tibble() %>%
tidyr::unnest(cols = dplyr::everything()) %>%
tidyr::pivot_longer(cols = dplyr::everything(), names_to = 'organism',
values_to = 'ko_term', values_drop_na = T) %>%
dplyr::group_by(organism)
return(res)
}
indat = read_data(Data = test)
indat
indat = read_data(Data = test)
indat
rm(read_data())
rm(read_data, x, test, indat
)
devtools::document()
devtools::document()
devtools::document()
test = read_data(filePath = '~/Documents/metapredict_project/test-metapred-ko-tsv-output/')
test = read_data(filePath = '~/Documents/metapredict_project/test-metapred-ko-tsv-output/', filePattern = '*-ko.tsv')
devtools::document()
test = read_data(filePath = '~/Documents/metapredict_project/test-metapred-ko-tsv-output/')
test = readr::read_tsv('~/Documents/metapredict_project/test-metapred-ko-tsv-output/CarAnox_mtb2_1016-ko.tsv')
temp = read_data(Data = test)
xx = MetaPredict(temp, '~/Documents/metapredict_project/test-metapred-ko-tsv-output/taxon.csv')
xx = MetaPredict(temp, '~/Documents/metapredict_project/test-metapred-ko-tsv-output/taxon.csv')
